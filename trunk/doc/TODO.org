* 0.3.2 Extensibility, step 1
** Fix long-lasting bugs
*** DONE convert nullable empty foreign keys to NULL before saving since it annoys a lot :model:bug:
    - Definitions:  <<freeFields>>
      - *free foreign field*: is not part of PK or other multi-field FK, or has meta-property isRestricted == false
      - *restricted foreign field*: is part of PK or other multi-field FK, or has meta-property isRestricted == true
    - [X] already implemented for single-field key
    - [ ] we should report if field is part of foreign key
      - [ ] Ac_Model_Mapper::getFkFieldsData()
  	returns array ($fieldId => array($relId => array(
              'objectProperty' => $objectProperty,
              'isRestricted' => $isRestricted, 
	      'otherFields' => array()
        )))
    - [ ] should be converted to null if...
      - it is part of foreign key
      - is nullable and is "empty" (empty string, 0, '0')
	- OR referenced object is set to NULL
      - this field is *free* (see above)
    - [ ] test cases
      - [ ] case A: field is an exact foreign key
      - [ ] case B: field is a PART of foreign key, other field is part of other FK or PK
    Done: [2014-08-21 Thu]
*** DONE Foreign 'ids' are lost in N-N relation of Ac_Model_Object during setFooIds() after getFoo() :model:bug:
    Done: [2014-08-21 Thu]
    steps to re-produce:
    - we have some "property", which loads external object(s) during evaluation
    - we setID/IDs in the form
    - object begins to save 
    - "validation" checks the "property", and related objects are loaded
    - after that ID/IDs won't be used since we have object properties' populated
**** DONE N-N relations must obey model' ID lists (if IDs property is filled-in, it should be used instead of mid-table content) [2013-09-27 Fri] :model:feature:
     Done: [2014-08-21 Thu]
*** DONE when trying to receive N-N-linked object, generated code of the model instance produces bugs :model:bug:
    Done: [2014-08-24 Sun]
    Example: where are relation categories <- NN -> products
    When trying $this->getField('products[0][foo]'), when no 'product' with '0' index is present, the error message 
    is being displayed regarding inability to load related object.
*** DONE Ac_Model_Mapper::addRelation(), deleteRelation(), isIntrinsicRelation() [2014-08-25 Mon] :model:
    Done on [2014-08-28 Thu]
    - if relations are altered for generated mapper, additional relations should be asked for model defaults
    - [X] Ac_Model_Relation::immutable <- relation cannot be changed
    - [X] Ac_Model_Relation::__clone <- leaves immutable = FALSE
    - [X] Ac_Model_Relation::protected members, setters & getters
      - [X] better phpdoc comments
      - [X] internal relations maintainance

*** DONE Ac_Model_Object::reset() fix [2014-07-25 Fri]	       :model:cg:bug:
    Done on [2014-09-02 Tue]
    - Ac_Model_Object::reset() now clears association fields too
    - Ac_Model_Mapper::EVENT_ON_GET_DEFAULTS, EVENT_ON_GET_INTERNAL_DEFAULTS
    - Ac_Model_Object::EVENT_ON_SET_DEFAULTS
    - Ac_Model_Object::reset() now accept parameter $revert to reset object to last loaded state
*** DONE Ac_Sql_Select: don't join tables, which are specified in $this->tables[$this->primaryAlias]->joinsAlias [2013-08-27 Tue] :sql:bug:
    DONE on [2014-09-12 Fri]
    - [X] Optimize Ac_Select_Table::getSqlSelect(),
    - [X] Ac_Select_Table::isPrimary()
    - [X] Ac_Select_Table::getEffectiveJoinData() <- if table is not primary anymore, reverse back join direction
    - +Test "rotating" sql select' schema (join former primary table to other tables)+ much work at the moment*
*** DONE after model changes, the $form->fetchPresentation(true) should return updated data :forms:redesign:bug:
    (at least when $form->updateFromModel() is called)
    - a - pull-based forms
    - b - make 'caching' more intelligent
    Done on [2014-09-25 Thu]
*** DONE Ac_Form_Control_Date cannot display "zero date" in required format :forms:bug:
    Done on [2014-09-27 Sat]
*** DONE Ac_Model_Values_Records & Ac_Model_Validator: don't load all records to check if value is Ok, use SELECT instead [2014-08-17 Sun] :model:bug:
    Done on [2014-10-05 Sun]
*** DONE Fix tree-related bugs (add tests) [2014-08-25 Mon]   :model:sql:bug:
    - in-memory tree creation, then saving
    Done on [2014-10-05 Sun]
** Extensible model
*** DONE Ability of mixables to add custom fields into mapper' hydration data :model:mixin:
  - Use loadFromRows() everywhere
    - [X] Ac_Model_Relation
      - [X] basic solution
	- [X] Ac_Model_Mapper::loadFromRows for 'non-unique' records -- should return same instances
	- [X] Ac_Model_Mapper::loadFromRows with partially-loaded records in the collection
    - [X] Ac_Model_Collection
*** WORK Multi-table models [2014-10-05 Sun]		      :model:feature:
*** TODO Model subclassing (both "physical" and "virtual") [2014-10-05 Sun] :model:feature:
*** TODO Cg: domain inheritance [2014-10-05 Sun]					 :cg:
*** TODO Better integration of Ac_Accessor, Ac_Model_Object and Ac_Mixin [2014-07-25 Fri]  :core:
*** TODO make Ac_Accessor Mixin-aware
*** DONE currently Ac_Model_Object has its' __get. set, isset; they hide Mixin implementation
    Changed that on [2014-11-24 Mon]
*** TODO Better support of "magic" methods in Ac_Prototyped and vice versa (through Ac_I_Accessor?) :base:feature:
*** TODO Support of docblock-style overrides :cg:
*** TODO Cg is able to "mix in" mixables' docblocks into generated base mixins [2014-07-25 Fri] :cg:feature:
*** TODO Mix-in properties [2014-08-25 Mon]
*** WORK Mix-in associations [2014-08-25 Mon]
*** TODO Support of sequential instantiation of mapper' records
    - [ ] should be supported by mixins that should be able to add their resources to the 'sequential' records source
    - [ ] bring back sequential access to the collection
** Extensible sql schema
*** TODO Think out what does it mean [2014-07-25 Fri] - maybe the task below?? [2014-11-24 Mon] :planning:
*** TODO Pre-made partials of Sql Select and ability to compose Select from them [2013-08-27 Tue] :sql:feature:
    Example: adding "children" or "parents" into nested sets, path column, nesting conditions and so on.
    We need to be able to specify partials' parameters (connected aliases, prefixes of exported aliases and so on)
** Extensible controller
*** TODO Think-out concept of 'fractal' mixing (Controller & Template are both mixable and mixed); :planning:mixin:controller:
    When used as a slave, some properies are shared with the parent 
*** TODO Extensible old controller [2014-07-25 Fri]
*** TODO Extensible old template [2014-07-25 Fri]
*** TODO Extensible new controller [2014-07-25 Fri]
*** TODO Extensible new template [2014-07-25 Fri]
** Extensible application
*** TODO Support of autoloading of start-up scripts
* 0.3.3 focus on productivity
** CLI tool and CG improvements
** TODO Cg improvements [2014-07-25 Fri] :cg:feature:
*** TODO Support of protected members
*** TODO Docblock: Return type of array fetchers in generated mappers and objects
*** TODO Specify application class in all generated objects and mappers
*** TODO Add loader of gen app base class from concrete app class
*** TODO Generate base controller, base new controller
*** TODO Support of auto-loading 
** New & Old Controllers are friends
*** TODO [2014-02-05 Wed] Ability to use new Result, Template and Controller
**** TODO Ac_Response_Environment -> Ac_Result_Environment
**** TODO Ac_Result_Environment_Legacy
**** TODO Support new Controllers in Application
** Jooomla and Standalone skeletons
** Simplify naming of controllers and templates
** Remove all language strings from "defines", switch to Ac_Lang_String
** Practical modules:
*** support Config
*** support User & Session
*** support "Userstate"?
** Useful features that increase productivity
*** TODO Ac_Sql_Select::mapperClass, Ac_Sql_Select::loadRecords [2014-07-25 Fri] :model:sql:feature:minor: 
*** TODO Ac_Sql_Select::setCritera(array $nameValues, $dontReset = false), Ac_Sql_Select::getCriteria() [2014-07-25 Fri] :sql:feature:minor:
    use instead of multiple $select->getPart('name')->bind('value') calls
*** TODO Clean up interface and implementation of Ac_Model_Mapper [2013-12-06 Fri]
**** TODO Ac_Model_Record_Mapper for all "automatic" setup, Ac_Model_Mapper becomes abstract [2014-07-25 Fri]  :model:feature:minor:
* 0.3.4 more consistent OOP
** Description
    - no public members, no "_" vars (compat. using magic)
      - model setters & getters; change events
    - only exceptions, no trigger_errors
    - strict members
    - don't pull anything from Application & Adapter, create & push instead??
    - proper member names, old names are @deprecated and show warnings
    - proper headers in files
    - document all public members (oh, shit), generate docs
    - cleanup project dir
    - switch to GitHub; put roadmap & tasks there; add composer support
* 0.3.5 - model improvements
** Description
    - new meta model (compat. with old one)
    - support in-memory model editing and transactional saving
      - support partially-loaded relations
      - IDs vs. References consistency
      - "list" object
      - association change notifications, "cold" events
      - mark "deleted" associated' items
    - better validation
    - detect model & property names in Ac_Sql OR use Ac_Collection instead
    - qualifiers
    - support several-table-per-model concept?
    
* Thoughts
** Qualifiers concept [2014-08-03 Sun]
    - The idea of using array keys as qualifiers creates unnecessary complications, 
      so I abandon it completely.
      - requires tracking of all incoming references
      - requires many unnecesary computations just to keep array keys' sane
      - complicates adding of references into array members
      - and, probably, creates of other problems I'm not aware off
    - Still srcQualifier and destQualifier can be used by Ac_Model_Relation but it has 
      limited usages
    - Model qualifiers will be used by models when logical relation will be created
      instead of 'physical' relation
    - Instead of having 'qualifier is key' idea we can use 'dynamic' qualifiers
      - $foo->listBars($onlyLoaded, $qualifier) => will compute dynamically
	(when default qualifier is used, $qualifier is always default qualifier)
      - $foo->getBar($keyValue, $qualifier) => same (also obey default qualifier)
	- since qualifier uniquely identifies related record, will play nicely
	  with partially-loaded associations
	  - is related object found?
	    - yes: return it
	    - no: load all remaining and then try to return it
** How partially-loaded associations will work with Ac_Model_Relation? [2014-08-03 Sun]
    - [ ] Deleted N-N records
    - [ ] Not adding objects that were already loaded
    - [ ] Not instantiating objects that were already loaded
      - What if mapper::useRecordsCollection() is not enabled?
      - Proposed solution: collect all loaded records, then identify them by PKs (if any)
** How model changes will reflect on in-memory relations? [2014-08-03 Sun]
    - Example: 
      $country = $countryMapper->getById(10);
      $prov = $country->getProvince(1);
      $prov->countryId = 12; // should be in $country->listProvinces() no more
    - Solution a: observer <- complicates things
    - Solution b: always check by listProvinces() <- requires more intensive computations
    - Both solutions are related to qualifiers
* Unassigned tasks
** Began and not finished
*** WORK Qualifiers in relations	[2013-12-09 Mon] :model:feature:major:
    - requires: logical relations
*** WORK Ac_Sql_Db->debugNext()->query(...), Ac_Sql_Db->args(array)->query(...) [2013-12-09 Mon]  :sql:feature:minor:
    Ability to provide extra params for next request (DB instance is returned for chaining)
**** args/a: We CANNOT mix positional args, but can mix named ones
     After the request param values are "forgotten". But args() with no arguments allows to "remember" last ones.
     $foo = 10; 
     //...
     $bar = 20;
     //...
     Ac_Sql_Db->args(compact('foo', 'bar'))->query("SELECT :foo, :bar");
     Ac_Sql_Db->args()->query("SELECT :foo, :bar"); // will re-use last args
     //...
**** debugNext
     Ac_Sql_Db->debugNext(Ac_Sql_Db::DEBUG_DIE_DONT_RUN)->query("SELECT 'stuff'");
     // also DEBUG_SHOW_RESULT, DEBUG_DIE_AFTER, DEBUG_FIREPHP - bit mask 

     debug: the SQL will always be shown
     DEBUG_DIE_DONT_RUN = 1 //  DEBUG_DIE_AFTER = 2 // request is run, but then we will die()
     DEBUG_SHOW_RESULT = 4 // result will be shown after the request (max. 100 lines)
     DEBUG_FIREPHP = 16 // all info through FirePHP
*** WORK switch to getters and seters instead of Ac_Model_Data::bind(). NN IDs must have priority over linked object (if it wasn't set?) :model:redesign:
       	 when $this->_fooIds is changed, getFoos() should return proper values
**** TODO gen. code: currently only data members with accessors should be protected
**** TODO compatibility with Ac_Model_Relation using $this->__set('_foo') - calls peGet/peSet for specified fields or objects
**** TODO check if all other model members can become *protected*
      - [ ] replace "_" with "int"; 
      - [ ] calling __get for "int" property which is not a data field must show DEPRECATED warning;
*** WORK SELECT LISTs based on Chosen and/or Select2	  :forms:feature:hot:
*** WORK Finish hierarchical tests [2014-02-05 Wed]
**** TODO Complete basic test cycle: ability to run the tests
     - [ ] Determined and well-specified execution order
     - [ ] Compare probes' reports with nominal values
     - [ ] Reporter, Writer
**** TODO Form tests
**** TODO Table tests
**** TODO SQL tests
*** WORK Ability to "rotate" sql select by assigning different primary alias [2014-09-12 Fri] :sql:feature:
** Complete
*** DONE Ac_Model_Relation::loadSrc/loadDest *DOES NOT WORK* for M-N relations (but should be quite useful) :model:bug:
    - As it turned out, only loadSrc didn't work properly, in contrast to loadDest
    Completed on [2013-09-27 Fri] 
*** DONE catcher of model errors that are not shown by form controls :admin:bug:
    in some cases object isn't saved, but we don't see any error messages, since they belong to properties, which don't have respective controls.
    - [X] control to show ALL form errors
    - [X] by default, it must show ALL errors
    - [X] we can try to exclude errors that are shown by other controls
    - [X] ability to improve error list' look
*** DONE Translate this file to broken English [2014-02-07 Fri]
    // DONE [2014-07-16 Wed] 
*** DONE Get completely rid of Ac_Dispatcher (even for autoloading!!!) // DONE [2014-03-03 Mon]
**** DONE Ac_Cg_Frontend: don't use Ac_Form_Helper // DONE [2014-03-03 Mon]
**** DONE Remove Ac_Form_Helper, Ac_Form_Util // DONE [2014-03-03 Mon]
*** DONE Ac_Mail: better implementation (Avancore 0.3-style), remove ugliness like $useNewMailer [2013-08-27 Tue] :core:feature:
       	 // DONE [2014-03-03 Mon]
*** DONE bring back really used classes from obsolete/, leave there classes which are not used [2014-02-05 Wed] 
*** DONE Cg_ -> Ac_Cg [2014-02-05 Wed] 
*** DONE getter setter maker, base64dec tools make part of the project [2014-02-05 Wed] 
*** DONE remove all closing "?>"			    :framework:style:
*** DONE Ac_Sql_Db::getLastError(); add to Ac_Model_Mapper::peSave  :sql:bug:
*** DONE Ac_Sql_Db applies limits not through Dialect		    :sql:bug:
*** DONE cloning of Ac_Sql_Select				:sql:feature:
*** DONE Ac_Sql_Db::fetch* and Ac_Model_Mapper::load<Foo>: if array is provided instead of $keyColumn, multi-level array is created [2013-12-09 Mon]  :sql:feature:minor:
    For Db, if last key of an array is TRUE, we assume records are uniquely qualifid by the keys.
    For mapper, we will check keys for uniqueness by default (trailing TRUE or FALSE can still be provided for override)
    Completed on [2014-07-25 Fri]
*** DONE Support partially-loaded associations [2014-08-01 Fri] :model:feature:
    Done on [2014-09-01 Mon]
    - Example:
      - orders A, B and line items A.1, A.2, A.3, B.1, B.2
      - we select line items $lineItems := A.1, B.2
      - we use $orderMapper->loadForLineItems($lineItems)
      - Ac_Relation::linkBack sets back references $orderA->_lineItems[1] = A.1, $orderB->_lineItems[2] = B.2
      - from now on, $orderA->listLineItems() will return only A.1 
      - but listLineItems() should return all line items!
    - Proposed solution:
      - for each 'to many' link add var $_lineItems_loaded = false in addition to $_lineItems = false
      - listLineItems($onlyLoaded = false) - if array is partially populated, it will be fully populated
      - relation must NOT overwrite objects that were already pre-loaded

*** DONE fix Ac_Model_Relation::countSrc/Dest [2014-08-17 Sun]	  :model:bug:
    Done on [2014-08-31 Sun]
*** DONE Ac_Admin_Manager returnUrl on save()/cancel() [2013-11-11 Mon] :admin:feature:
         Done on [2015-01-31 Sat]
       	 +Also $returnToReferer  would be nice.+
*** DONE Ac_Admin_Manager: 'datalink' restrictions are not always applied to sub-manager processing [2014-12-09] :admin:bug:minor:
    How to reproduce: invoke a processing in sub-manager that has 
    $defaultToAllRecords === Ac_Admin_Processing::DEFAULT_RECORDS_BY_FILTERS
    It will run through ALL detail records, not all details of currently open parent record.
    Done on [2015-01-17 Sat]
*** DONE Ac_Admin_Manager: when action returns "raw" (non-wrapped, no-html output), output is still wrapped in outer manager's details [2014-12-09] :admin:bug:minor:
    Done on [2015-01-24 Sat]
*** DONE Ac_Admin_Manager must save open referencing records when top referenced record is saved [2013-12-06 Fri] 
    Done on [2015-01-24 Sat]
*** DONE Think: introduce 'logical' relations that will describe high-level associations between modesl [2014-08-03 Sun] :planning::model:meta:feature:
    Currently there are only 'physical' relations (Ac_Model_Relation).
    We have to create an entity that provides necessary metadata about in-memort relation
    of the models (one, many, qualifier, src property & mapper class, dest property &
    mapper class), interface to load/save relations, but without any implementation details.
    - Is implemented by Ac_Model_Association - done on [2014-11-24 Mon]
** Not started
*** TODO think about fields that are part of foreign key [2014-03-05 Wed]
    - Example A: userAvatar is referenced by both user->id and user->photoId. 
      $user->id must serve as a restriction of photo ValueList while photoId must behave normally.
      This behaviour must be enabled in case when second field is part of other foreign key or record unique index, 
      or is a non-NULL value.
**** TODO If only one free field participates in relation, restrict records in Ac_Model_Values_Records by other non-free fields [2014-08-09 Sat] :model:
     see [[freeFields]]
*** TODO tests for Ac_Form [2013-11-23 Sat]
*** TODO Forms and controls should not be descendants of Ac_Controller anymore :forms:redesign:huge:
    Practice had shown that has no sense, burdens a class interface and confuses developer.
**** TODO improve forms					     :forms:redesign:
***** TODO incomfort to use and inflexible templates and wrappers
***** TODO non-clear and hard to understand lifecycle of elements, which should act like full-scaled widgets
***** TODO better way to provide form defaults
***** TODO ability of array-returning controls to write their values into the root of form' value array.
           that will give us ability to create elements which edit several model' properties at once.
***** TODO uniform method to update model from the froms
      Currently where are two concurrent methods: $form->updateModel() and $model->bind($form->getValue())
      In some cases these methods produce different results.
      - [ ] See, how Ac_Admin_Manager does
      - [ ] Always use $form->updateModel()
      - [ ] Make its' behaviour as close to bind() as possible
      - [ ] bind() is almost abandoned, it's better to remove or improve it
**** TODO convert Ac_Sql_*, Ac_Form_*, Ac_Table_* to Ac_Prototyped :framework:redesign:incompat:
     - [ ] convert all *var $foo* to get/set, make sure everything works
     - [ ] throw errors when encountering unknown objects or mis-configuration
***** Tests
**** TODO [2013-11-23 Sat] tests for Ac_Table*
**** TODO [2013-11-23 Sat] tests for Ac_Sql*
*** TODO Support composite PKs by stock Ac_Model_Mapper and Ac_Model_Object [2014-02-05 Wed] 
*** TODO Admin: allow to sort table by clicking on headers [2014-02-05 Wed]  
**** TODO basic solution
**** TODO ability to specify own sort expressions
*** TODO Get rid of Ac_Model_Collection::getStatementTail(), since not all DBMS have limit clause [2013-11-11 Mon]  
**** Make E_DEPRECATED, that's all
*** TODO Ac_Admin_Manager returnUrl on save()/cancel() [2013-11-11 Mon] 	      :admin:feature:
       	 Also $returnToReferer  would be nice.
*** WORK decorators' access to the model		      :model:feature:
*** TODO Ac_Widget_Menu [2014-03-12 Wed]		     :widget:feature:
*** TODO Add "libraries" class to add common JS and CSS frameworks [2013-10-26 Sat] :js:feature:
       	 The idea is to provide ability to quickly add jQuery, chosen, bootstrap & so on.
       	 Adapter must serve as factory or as configurator for Libraries' instances to avoid
       	 conflicts with libraries bundled with the CMS.
*** TODO Ac_Form_Control doesn't show errors, when model isChecked() == false (but should?) :model:redesign:
    Should it?
    If application populates model's _errors array from outside, shouldn't _checked altready be set to TRUE?
    How externally-provided errors should merge with model's own errors?
*** TODO Ac_Model_Values_Records refactor to use Ac_Sql_Select instance generated by Ac_Model_Mapper::getSqlSelectPrototype() :model:feature:
*** TODO when trying to get transitional property with index of no-existent object, return NULL instead of displaying an error (see example above) :model:bug:
*** TODO inability to 'properly' set default order in admin manager really pisses me off :admin:annoyance:
*** TODO Integrate table, actions, sub-managers and filters into a common form (they must all be controls) :admin:feature:
*** TODO support of readOnly (getter-only) model properties (which should be understood by other components) :model:feature:
*** TODO figure out format of 'property' (getter + setter) docblocks, finally :docs:design:
*** TODO PSR-2 code style compliance				     :global:
*** TODO composer support					     :global:
*** TODO uniform identifiers' naming 		:framework:redesign:incompat:
    - [ ] title (instead of caption)
    - [ ] id (instead of name)
    - [ ] dataPath instead of fieldName, modelPropertyName, path etc
    - [ ] visible instead of hidden
    - [ ] enabled instead of disabled
    - [ ] writeable instead of readOnly
    - [ ] displayOrder/creationOrder instead of ordering or order
*** TODO better specification of 'path' with getters support	:base:design:
    - examples:
      - foo[bar.3][baz(true)][quxx]
      - foo->getBar()[3]->getBaz(true)->quux
    - Important! Wrong method or property must throw an excepton; 
      if transitional segment returns not an object or there is an array element missing,
      no exception must be thrown.
      - foo[@bar] - if there is no array key @bar, don't throw an error
*** TODO ? rename Ac_Prototyped::factory* to Ac_Prototyped::create* :base:incompat:
*** TODO Test generator				    :framework:feature:major:
    If model & scaffolding is generated, we can automatically create tests (API and HTTP-based) for regular CRUD,
    since that allows to detect common issues. In the future, such tests can be made extensible.
    Also we can generate test datasets.
   * TODO Skeleton generator [2013-08-20 Tue] :framework:feature:hot:
   ** TODO for Joomla component
   ** TODO for Standalone app
   ** TODO commands to pack Avancore + solution into lib/ or into distro
   * TODO Ac_Model_Sql_TableProvider: возможность связывания с таблицами, созданными пользователем :model:feature:
     Мы сделали alias fooAlias, который читает из таблицы Model_Bar, связанной, в свою очередь, с моделью Baz. 
     Нам нужно, чтобы TableProvider смог подключить alias fooAlias[baz] <- желательно, чтобы он сам всё понял, без наших подсказок.
   * DONE Ac_Sql_Db: pseudo-parametrised queries [2013-08-27 Tue] :model:sql:feature:medium:
     $db->query($sql, ...) - regular call as usual ($sql is a string)
     $db->query(array(0 => $sql, 1=> posParam, 'foo' => fooParam)) - if $sql is an array, use parameter substitution.
     %1 - positional parameter, %foo - named parameter, +#foo - DB objects (NameQuote).+ 
     Only  word characters are allowed as identifiers, underscore can't be first character.
	  (done [2013-11-07])
   * TODO Complete the test cases for model and Sql 	    :model:sql:tests:
*** TODO Automatic injection of dependencies into Application components [2013-08-27 Tue] :base:design:
    Controller, mapper, service object are Application components.
    For example, if a component has method setDb(Ac_Sql_Db $db), then such method should be automatically called
    by Ac_Application instance using value from $this->getDb().
    Questions:
    - how to define the matches between application properties and components' dependencies?
    - what to do with components created by components?
    Контроллер, преобразователь, сервисные объекты являются компонентами Приложения.
*** TODO Fully and completely get rid of pulling "defaults" from Ac_Application instance. [2013-08-27 Tue] :framework:redesign:
    Objects such as an Ac_Mail must be configured by creating object. (i.e. during Ac_Application::createMail())
*** TODO Ac_Table_Column: display according to values and valueList meta-properties [2013-08-28 Wed] :admin:feature:medium:
    We need to be able to use one instance of Values for all appropriate records to reduce number of requsts to the DB.
*** TODO Usable method do exclude/include all/some sub-mappers in Admin [2013-08-28 Wed] :admin:feature:minor:
*** TODO Ac_Db_Mysqli, Ac_Db_Pg, Ac_Db_Ms [2013-09-08 Sun]	:sql:feature:
*** TODO Ac_Sql_Select parameters (*including names of tables and databases*) [2013-09-08 Sun] :sql:feature:medium:tblParams:
    Если я делаю станадртную форму "параметров", то она должна экранироваться при помощи Ac_Sql_Db::q()
**** TODO support of '#foo' => nameQuote in Ac_Sql_Db::preProcessQuery()
*** TODO Do we need to make Ac_Sql_Filter_Multiple/Ac_Sql_Order_Multiple supporting $foo->getFilter|Order($sub)->bind()? [2013-11-12 Tue] :sql:design:
*** TODO Ac_Model_Mapper: ability to remap property<->column (?how to deal with SQL? special form of NameQuote, probably?) [2013-12-06 Fri]
**** Nice idea to add $defaultQualifier in Mapper to allow other related object know what qualifier to use.
**** Usually it's a PK field.
*** TODO Ac_Sql_Select::applyPrototype(), Ac_Sql_Select::getPrototype() [2013-12-14 Sat]
*** TODO Codegen: improve model browser [2014-02-05 Wed] 
*** TODO Ac_Form_Control_Template_Basic: use <labels> in the captions where appropriate [2014-02-07 Fri] 
*** TODO Re-work Ac_Table_Column_Link (to properly get current URL; now Ac_Url::guess() is used) [2014-02-08 Sat] 
*** TODO Document all config values used by Ac_Application_Adapter [2014-02-09 Sun] 
*** TODO Support 1-1 relations in model [2014-07-22 Tue] :model:feature:
**** TODO Support also to-1 relations with midTable [2014-11-24 Mon]
*** TODO Support composite PKs by basic Ac_Model_Object/Ac_Model_Mapper  [2014-07-22 Tue] :model:feature:major:
*** TODO Specify return type of array-returning methods that return lists of objects in docblocks  [2014-07-25 Fri] :global:doc:
*** TODO Cache list of class files and startup scripts [2014-07-25 Fri]	   :core:performance:
*** TODO Handle cascade deletion of records [2014-07-27 Sun] :model:feature:
    - [ ] Warn if there are references that cannot be deleted automatically
    - [ ] Ability to force deletion of referencing records
    - [ ] Option to nullify referencing records' fields
    - [ ] NN-linked records are not 'referencing', only intermediary table is affected
*** TODO Support of read-only properties, records, mappers AND managers [2014-07-31 Thu] :model:feature:
*** TODO View-based mappers (metadata is detected automatically if SQL is used instead of table) [2014-07-31 Thu] :model:feature:
*** TODO Think: observe referenced records from referencing ones? [2014-08-03 Sun] :planning:model:
    ...to avoid complexites such as re-qualifying models
*** TODO $modelAinstance->removeModelB([$modelBinstance]) [2014-08-03 Sun] :model:
    - For not saved records: should remove association
    - For N-N records: should remove record from intermediary table
    - If $modelA references $modelB as 'to One': $a->bId = null;
    - If $modelB references $modelA: $b->aId = null;
    - If $modelB is an aggregate of $modelA: $modelB->deleteOnStore()
*** TODO Remove all references to the model by referencing records when it's deleted [2014-08-03 Sun] :model:
    
*** TODO reduce getNNIds() to free field only [2014-08-09 Sat] :model:
    see [[freeFields]]
*** TODO Cache Ac_Model_Values_Records instances where applicable (not so straightforward) [2014-09-27 Sat] :model:feature:cool:
*** TODO Ac_Model_Validator: allow to accept NULL values for wuld-be-populated non-nullable foreign keys [2014-11-27] :model:bug:minor:
    *Example*: I have two tables
    - master (id), 
    - details 
      - masterId NOT NULL foreign key
      - other fields
    Since masterId in details is NOT NULL (as specified in DB schema),
    during $detailsRecord->bind(array('masterId' => null)) NULL won't be
    accepted and therefore it will be, most probably, converted to 0 or ''
    (depending on a data type). Thus, the attempt to load non-existent master
    record will take place during validation or storing.
	
*** TODO Ac_Form_Control_Repeater is a complete WTFery :forms: [2014-11-27]
    I should allow it to create and delate detail records, since
    it's almost ununsable in it's current state (See how it's done
    in different solutions)
*** TODO Ac_Cg_Model::findRelationSuffixes() produces wrong result when two one FK is 'common prefix' of other FK :cg:bug:minor:important: [2015-01-17]
    Example:
    I have table1 (class Foo)
    I have table2 (class Bar)
    - reference 1: fkWithSomeName
    - reference 2: fkWithSomeNameBlah
    Ac_Cg_Util::findCommonPrefix returns fkWithSomeName, suffix of reference 1 is empty,
    suffix of reference2 is Blah. When there is common prefix, but empty ref. suffix,
    default property & accessor names should be used.
    
*** TODO Ac_Admin_Feature, Ac_Admin_Datalink: should be Mixins of Ac_Admin_Manager [2015-01-31 Sat] :admin:refactor:
*** TODO Ac_Model_Object: $foo->createBar(), $foo->addBar() should always create in-mem link from $bar to $foo :model:bug:
    Example:
    $bar = $foo->createBar(); // Bar has many FOOs
    $this->assertTrue($bar->getFoo(0) == $foo); // should return TRUE, now returns FALSE
    // ..or.., assuming Foo has many Bars:
    $bar = $barMapper->createObject();
    $foo->addBar($bar);
    $list = $foo->listBars();
    $last = array_pop($list);
    $this->assertTrue($foo->getBar($last) === $bar); // should work now
    $this->assertTrue($bar->getFoo(0) === $foo); // TODO: should return TRUE, now returns FALSE
    
*** TODO Pseudo-singular relations with restrictions [2014-11-01 Sat] :model:
    - [ ] Restrictions: are combined with the srcWhere / destWhere
      - [ ] Ac_Model_Relation::srcRestrictions [field => value]
      - [ ] Ac_Model_Relation::destRestrictions [field => value]
    - [ ] Restrictions+fieldNames are used to detect cardinality of src/dest
          records
    - [ ] Support by Cg (ability to add restrictions to domain schema)
    - [ ] Restrictions are applied to the other record when it is created
    - [ ] Restriction values are added to joins' on clause by Ac_Model_Sql_TableProvider
      - Example: $sefInfo = $post->createSefInfo(); $sefInfo->type === 'post'
    - [ ] Example:
      - Posts table: sefDataId => `Sef table`.Id (assumes `Sef table`.`type` = 'post')
      - Products table: sefDataId => `Sef table`.Id (assumes `Sef table`.`type` = 'product')
    - [ ] Must play nice with cascaded deletions
*** TODO Ac_Model_Relation refactor level 1 [2014-11-01 Sat] 	      :model:
    - [ ] Ac_Model_Relation_Impl: has only methods to load, count, list DESTINATION records
      - [ ] computes derivative parameters and stores it in members
      - [ ] is created by Ac_Model_Relation (two instances, one for src, one for dest), is re-created
            when Ac_Model_Relation' parameters are changed
      - [ ] subclasses
	- [ ] Ac_Model_Relation_Impl_One
	- [ ] Ac_Model_Relation_Impl_Many
	- [ ] Ac_Model_Relation_Impl_ManyToMany
*** TODO Ac_Model_Relation refactor level 2 [2014-11-01 Sat] :model:
    Ac_Model_Relation_Impl has aggregates to perform per-record tasks: retrieve values from records,
    create in-memory bindings. By default such aggregates are muti-purpose and able to work with
    heterogeneous sets of records. But if we are aware about uniformness of src/dest set and its' 
    properties, optimised concrete strategies can be used.
*** TODO Re-mapping field names by Ac_Model_Mapper [2014-11-01 Sat]	    :model:difficult:
    See also: feature tagged as :tblParams:
**** TODO Ability to use "mapped" placeholders in Ac_Sql_Select i.e. {{foo:bar}} where
     foo is mapped relation name and :bar is mapped property name
     - [ ] proper support by Ac_Sql_Db::preProcessQuery()
     - [ ] aliases' of referenced mappers' tables must be "used" automatically    
**** TODO It must be decided (and implemented), whether we use mapped column names 
     or "physical" field names in Ac_Model_Relation
*** TODO bind for $nn=>array doesn't work with default-generated code [2014-11-07 Fri] :cg:model:bug:
    where $nn is name of NN-related property (the error is 'Cannot set associated list item')
** Questionable
*** TODO Joomla output: don't add JS and CSS assets that were already added by the Joomla [2013-10-26 Sat] :js:bug:
*** TODO Ac_Sql_Db, Ac_Sql_Db_PDO: charset (at least default to utf-8) :sql:bug:minor:
