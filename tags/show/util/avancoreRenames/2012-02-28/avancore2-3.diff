Index: Ae/File/Manager.php
===================================================================
--- Ae/File/Manager.php	(revision 0)
+++ Ae/File/Manager.php	(revision 259)
@@ -0,0 +1,86 @@
+<?php
+
+class Ae_File_Manager extends Ae_Autoparams {
+
+    protected $features = array();
+    
+    /**
+     * @var Ae_File_Manager
+     */
+    private static $defaultInstance = null;
+
+    
+    function setFeatures(array $features) {
+        $this->features = Ae_Autoparams::factoryCollection($features, 'Ae_File_Feature', array('manager' => $this), 'id', true, $dummy, true);
+    }
+    
+    function addFeature(Ae_File_Feature $feature) {
+        if (is_numeric($id = $feature->getId()) || !strlen($id)) {
+            $this->features[] = $feature;
+        } else {
+            $this->features[$id] = $feature;
+        }
+    }
+    
+    /**
+     * Returns NULL if feature not found
+     * 
+     * @param type $id
+     * @return Ae_File_Feature
+     */
+    function getFeature($id) {
+        if (isset($this->features[$id])) $res = $this->features[$id];
+            else $res = null;
+        return $res;
+    }
+    
+    function getFeatures() {
+        return $this->features;
+    }
+    
+    function getMimeFeature() {
+        $id = Ae_File_Feature_MimeInfo::id;
+        if (!($f = $this->getFeature($id))) {
+            $f = Ae_File_Feature_MimeInfo::createDefault();
+            if ($f) $this->addFeature($f);
+        }
+        return $f;
+    }
+    
+    static function setDefaultInstance(Ae_File_Manager $defaultInstance) {
+        self::$defaultInstance = $defaultInstance;
+    }
+
+    /**
+     * @return Ae_File_Manager
+     */
+    static function getDefaultInstance() {
+        if (!self::$defaultInstance) {
+            self::$defaultInstance = new Ae_File_Manager();
+        }
+        return self::$defaultInstance;
+    }    
+    
+    /**
+     * @param type $optionsOrFilename
+     * @return Ae_File
+     */
+    function createFile($optionsOrFilename) {
+        if (!is_array($optionsOrFilename)) $optionsOrFilename = array('path' => $optionsOrFilename);
+        $optionsOrFilename['manager'] = $this;
+        $res = $this->doCreateFile($optionsOrFilename);
+        return $res;
+    }
+    
+    protected function doCreateFile(array $optionsOrFilename) {
+        $res = Ae_Autoparams::factory($optionsOrFilename, 'Ae_File');
+        return $res;
+    }
+    
+    function addFeaturesToFile(Ae_File $file) {
+        foreach ($this->features as $feat) {
+            if ($feat->detect($file)) $file->addFeature($feat->getForFile($file));
+        }
+    }
+    
+}
\ No newline at end of file
Index: Ae/File/Feature.php
===================================================================
--- Ae/File/Feature.php	(revision 0)
+++ Ae/File/Feature.php	(revision 259)
@@ -0,0 +1,135 @@
+<?php
+
+/**
+ * Ae_File_Feature instances are held if following instances:
+ * - in Ae_File_Manager for detection (their $file is null)
+ * - in Ae_File
+ */
+abstract class Ae_File_Feature extends Ae_Autoparams {
+
+    /**
+     * @var Ae_File
+     */
+    protected $file = null;
+
+    protected $id = false;
+
+    protected $allowedExtensions = array();
+    
+    /**
+     * @var Ae_File_Manager
+     */
+    protected $manager = false;
+    
+
+    function hasPublicVars() {
+        return true;
+    }
+    
+    protected function setFile(Ae_File $file = null) {
+        $this->file = $file;
+        if ($file) $this->manager = $file->getManager();
+    }
+
+    /**
+     * @return Ae_File
+     */
+    function getFile() {
+        return $this->file;
+    }
+    
+    function detect(Ae_File $file) {
+        $res = true;
+        if ($this->allowedExtensions) {
+            $res = false;
+            $x = $file->getExtension();
+            foreach ($this->allowedExtensions as $ext) {
+                if (!strcasecmp($ext, $x)) {
+                    $res = true;
+                    break;
+                }
+            }
+        }
+        return $res;
+    }
+    
+    function getForFile(Ae_File $file) {
+        if ($this->file === $file) $res = $this;
+        else $res = $this->doCreateForFile($file);
+        return $res;
+    }
+    
+    protected function listClonedProps() {
+        return array('id');
+    }
+    
+    protected function doCreateForFile(Ae_File $file) {
+        
+        if (($cp = $this->listClonedProps())) $proto = Ae_Autoparams::getObjectProperty($this, $cp);
+            else $proto = array();
+            
+        $proto['file'] = $file;
+        
+        $c = get_class($this);
+        $res = new $c($proto);
+        return $res;
+    }
+    
+    /**
+     * TODO: SIMPLIFY!!! Add backlink from feature clone and check it
+     * Add tests
+     * 
+     * @param type $file
+     * @return type 
+     */
+    function alreadyHas($file) {
+        $res = false;
+        if (strlen($this->id) && !is_numeric($this->id)) {
+            if (in_array($this->id, $file->listFeatures())) {
+                $res = $file->getFeature($this->id);
+            } else $res = false;
+        }
+        else {
+           foreach ($file->getFeatures() as $f) {
+               if ($this->isMe($f)) {
+                   $res = $f;
+                   break;
+               }
+           }
+        }
+        return $res;
+    }
+    
+    protected function isMe(Ae_File_Feature $feature) {
+        $c = get_class($this);
+        return $feature instanceof $c;
+    }
+
+    protected function setId($id) {
+        $this->id = $id;
+    }
+
+    function getId() {
+        return $this->id;
+    }    
+
+    function setManager(Ae_File_Manager $manager) {
+        $this->manager = $manager;
+    }
+
+    /**
+     * @return Ae_File_Manager
+     */
+    function getManager() {
+        return $this->manager;
+    }    
+
+    function setAllowedExtensions($allowedExtensions) {
+        $this->allowedExtensions = $allowedExtensions;
+    }
+
+    function getAllowedExtensions() {
+        return $this->allowedExtensions;
+    }
+    
+}
\ No newline at end of file
Index: Ae/File/Feature/HttpSend.php
===================================================================
--- Ae/File/Feature/HttpSend.php	(revision 0)
+++ Ae/File/Feature/HttpSend.php	(revision 259)
@@ -0,0 +1,68 @@
+<?php
+
+class Ae_File_Feature_HttpSend extends Ae_File_Feature {
+
+    var $sendNotModified = true;
+    
+    var $sendFileName = true;
+    
+    var $download = false;
+    
+    protected function listClonedProps() {
+        return array_merge(parent::listClonedProps(), array('sendNotModified', 'sendFileName', 'download'));
+    }
+    
+    function getIfModifiedSince() {
+        $res = false;
+        if (isset($_SERVER) && isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {
+            $res = strtotime($_SERVER['HTTP_IF_MODIFIED_SINCE']);
+        }
+        return $res;
+    }
+    
+    function stream() {
+        if ($this->file->exists()) {
+            if ($this->sendNotModified) {
+                if (($ms = $this->getIfModifiedSince())) {
+                    $mt = $this->file->getMTime();
+                    if ($mt <= $ms) $this->replyNotModified();
+                        else $this->replyStream($withFilename);
+                } else {
+                    $this->replyStream($withFilename);
+                }
+            }
+        } else {
+            throw new Exception("Cannot stream() non-existing file");
+        }
+    }
+    
+    function replyNotModified() {
+        while (ob_get_level()) ob_end_clean();
+        header('HTTP/1.1 304 Not Modified', true, 304);
+        exit();
+    }
+    
+    function replyStream() {
+        while (ob_get_level()) ob_end_clean();
+        if (($mf = $this->manager->getMimeFeature())) {
+            $mime = $mf->getMime($this->file);
+            if (strlen($mime)) {
+                header('Content-Type: '.$mime);
+            }
+            header('Content-Length: '.$this->file->getFileInfo()->getSize());
+            header('Last-Modified: '.date('r', $this->file->getMtime()));
+        }
+        $h = false;
+        if ($this->download) {
+            $h = 'Content-Disposition: attachment';
+        } 
+        if ($this->sendFileName) {
+            if (!strlen($h)) $h = 'Content-Disposition: inline';
+            $h .= '; filename='.basename($this->file->getTranslatedPath());
+        }
+        if (strlen($h)) header($h);
+        readfile($this->file->getTranslatedPath());
+        exit();
+    }
+    
+}
\ No newline at end of file
Index: Ae/File/Feature/WebMapping.php
===================================================================
--- Ae/File/Feature/WebMapping.php	(revision 0)
+++ Ae/File/Feature/WebMapping.php	(revision 259)
@@ -0,0 +1,38 @@
+<?php
+
+class Ae_File_Feature_WebMapping extends Ae_File_Feature {
+
+    var $id = 'webMapping';
+    
+    var $dirToWebMap = array();
+    
+    static $rpCache = array();
+    
+    function listClonedProps() {
+        return array_merge(parent::listClonedProps(), array('dirToWebMap'));
+    }
+    
+    function getFileUrl($translatedPath = false) {
+        if ($translatedPath === false) $translatedPath = $this->file->getTranslatedPath();
+        if (file_exists($translatedPath)) {
+            $rp = realpath($translatedPath);
+        } else {
+            $rp = $translatedPath;
+        }
+        $res = false;
+        foreach ($this->dirToWebMap as $dir => $web) {
+            if (isset(self::$rpCache[$dir])) $dp = self::$rpCache[$dir];
+            else { 
+                $dp = realpath($dir);
+                if ($dp === false) $dp = $dir;
+                self::$rpCache[$dir] = $dp;
+            }
+            if (substr($rp, 0, strlen($dp)) == $dp) {
+                $res = $web.substr($rp, strlen($dp));
+                break;
+            }
+        }
+        return $res;
+    }
+    
+}
\ No newline at end of file
Index: Ae/File/Feature/MimeInfo/Finfo.php
===================================================================
--- Ae/File/Feature/MimeInfo/Finfo.php	(revision 0)
+++ Ae/File/Feature/MimeInfo/Finfo.php	(revision 259)
@@ -0,0 +1,29 @@
+<?php
+
+class Ae_File_Feature_MimeInfo_Finfo extends Ae_File_Feature_MimeInfo {
+    
+    /**
+     * @var finfo
+     */
+    protected $finfo = false;
+    
+
+    function setFinfo(finfo $finfo = null) {
+        $this->finfo = $finfo;
+    }
+
+    /**
+     * @return finfo
+     */
+    function getFinfo() {
+        if (!$this->finfo) {
+            $this->finfo = new finfo();
+        }
+        return $this->finfo;
+    }    
+    
+    protected function doGetMime($path) {
+        return $this->getFinfo()->file($path, FILEINFO_MIME);
+    }
+    
+}
\ No newline at end of file
Index: Ae/File/Feature/MimeInfo/Exec.php
===================================================================
--- Ae/File/Feature/MimeInfo/Exec.php	(revision 0)
+++ Ae/File/Feature/MimeInfo/Exec.php	(revision 259)
@@ -0,0 +1,7 @@
+<?php
+
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+?>
Index: Ae/File/Feature/MimeInfo/MimeContentType.php
===================================================================
--- Ae/File/Feature/MimeInfo/MimeContentType.php	(revision 0)
+++ Ae/File/Feature/MimeInfo/MimeContentType.php	(revision 259)
@@ -0,0 +1,9 @@
+<?php
+
+abstract class Ae_File_Feature_MimeInfo_MimeContentType extends Ae_File_Feature_MimeInfo {
+
+    abstract protected function doGetMime($path) {
+        return mime_content_type($path);
+    }
+    
+}
\ No newline at end of file
Index: Ae/File/Feature/Image.php
===================================================================
--- Ae/File/Feature/Image.php	(revision 0)
+++ Ae/File/Feature/Image.php	(revision 259)
@@ -0,0 +1,87 @@
+<?php
+
+class Ae_File_Feature_Image extends Ae_File_Feature {
+    
+    var $allowedExtensions = array(
+        '.gif', '.jpg', '.png', '.jpeg',
+    );
+    
+    var $thumbsDir = false;
+    
+    var $thumbsHashSeed = '';
+    
+    /**
+     * @var Ae_Image_Processor
+     */
+    protected $processor = false;
+    
+    /**
+     * Example: array('small' => array(400, 400), 'medium' => array(500, 500), 'large' => array(800, 800))
+     * @var array
+     */
+    var $thumbSizes = array();
+    
+    
+    protected function listClonedProps() {
+        return array_merge(parent::listClonedProps(), array('allowedExtensions', 'thumbsDir', 'processor', 'thumbSizes'));
+    }
+    
+    function getWidth() {
+        $this->getProcessor()->setFile($this->file->getTranslatedPath());
+        return $this->getProcessor()->getWidth();
+    }
+    
+    function getHeight() {
+        $this->getProcessor()->setFile($this->file->getTranslatedPath());
+        return $this->getProcessor()->getHeight();
+    }
+    
+    /**
+     * @return string Path to the thumbnail file
+     * @param string|array $size Key in $this->thumbSizes array or array(width, height)
+     * @param bool $generate Generate thumbnail if necessary (if no file exists or it is older than the original)
+     * @param bool $force Force thumbnail refresh
+     * @param string $path Override path value
+     */
+    function getThumbnail($size, $generate = true, $force = false, $path = false) {
+        if (!is_array($size)) {
+            if (isset($this->thumbSizes[$size])) $size = $this->thumbSizes[$size];
+                else throw new Exception("No such thumbnail size: {$size}");
+        }
+        list ($width, $height) = $size;
+        $tWidth = (int) $width;
+        $tHeight = (int) $height;
+        if ($tWidth <= 0) throw new Exception("Invalid width value: ".$width);
+        if ($tHeight <= 0) throw new Exception("Invalid height value: ".$height);
+        if ($path === false) $path = md5($this->file->getTranslatedPath().'-'.$tWidth.'-'.$tHeight.$this->thumbsHashSeed).$this->file->getExtension();
+        if (strlen($this->thumbsDir)) $path = rtrim($this->thumbsDir,'/').'/'.$path;
+        if ($generate) {
+            if (!$force) {
+                if (!is_file($path) || filemtime($path) < $this->file->getMTime()) {
+                    $this->writeThumbnail($path, $width, $height);
+                }
+            }
+        }
+        return $path;
+    }
+    
+    function writeThumbnail($thumbPath, $width, $height) {
+        $this->getProcessor()->setFile($this->file->getTranslatedPath());
+        $this->getProcessor()->makeThumbnail($thumbPath, $width, $height);
+    }
+
+    function setProcessor(Ae_Image_Processor $processor = null) {
+        $this->processor = $processor;
+    }
+
+    /**
+     * @return Ae_Image_Processor
+     */
+    function getProcessor() {
+        if (!$this->processor) {
+            $this->processor = new Ae_Image_Processor_Gd();
+        }
+        return $this->processor;
+    }    
+    
+}
\ No newline at end of file
Index: Ae/File/Feature/MimeInfo.php
===================================================================
--- Ae/File/Feature/MimeInfo.php	(revision 0)
+++ Ae/File/Feature/MimeInfo.php	(revision 259)
@@ -0,0 +1,30 @@
+<?php
+
+abstract class Ae_File_Feature_MimeInfo extends Ae_File_Feature {
+
+    const id = 'mimeInfo';
+    
+    var $id = Ae_File_Feature_MimeInfo::id;
+    
+    function detect(Ae_File $file) {
+        return false;
+    }
+    
+    function getMime($fileOrPath) {
+        if ($fileOrPath instanceof Ae_File) $fileOrPath = $fileOrPath->getTranslatedPath();
+        $res = $this->doGetMime($fileOrPath);
+        return $res;
+    }
+    
+    abstract protected function doGetMime($path);
+    
+    /**
+     * @return Ae_File_Feature_MimeInfo
+     */
+    static function createDefault() {
+        $res = null;
+        if (class_exists('finfo')) $res = new Ae_File_Feature_MimeInfo_Finfo();
+        return $res;
+    }
+    
+}
\ No newline at end of file
Index: Ae/Legacy/Output/Joomla15.php
===================================================================
--- Ae/Legacy/Output/Joomla15.php	(revision 249)
+++ Ae/Legacy/Output/Joomla15.php	(revision 259)
@@ -1,9 +1,18 @@
 <?php
-
+    
 class Ae_Legacy_Output_Joomla15 extends Ae_Legacy_Output_Joomla {
     
     var $removePathwayDuplicates = true;
+
+    function __construct() {
+        $this->mainframe =  &JFactory::getApplication();
+    }
     
+    function setPageTitle($pageTitle) {
+        $doc = JFactory::getDocument();
+        $doc->setTitle($pageTitle);
+    }
+    
     function outputResponse(Ae_Legacy_Controller_Response_Http $response, $asModule = false) {
         if ($response->redirectUrl) {
             $permanent = ($response->redirectType == Ae_Legacy_Controller_Response_Http::redirPermanent);
@@ -43,5 +52,12 @@
         $doc->setMetaData($name, $value);
     }
     
+    static function addHtmlToJoomlaToolbar($html) {
+        $bar = JToolBar::getInstance('toolbar');
+        Ae_Dispatcher::loadClass('Ae_Joomla_15_AnyHtmlButton');
+        $bar->appendButton('AnyHtml', $html);
+        
+    }
     
-}
\ No newline at end of file
+    
+}
Index: Ae/Joomla/15/AnyHtmlButton.php
===================================================================
--- Ae/Joomla/15/AnyHtmlButton.php	(revision 0)
+++ Ae/Joomla/15/AnyHtmlButton.php	(revision 259)
@@ -0,0 +1,20 @@
+<?php
+
+        
+if (!class_exists('JButton')) jimport('joomla.html.toolbar');
+
+class JButtonAnyHtml extends JButton {
+
+    function fetchId() {
+    }
+    
+    function fetchButton() {
+        $args = func_get_args();
+        return $args[1];
+    }
+
+}            
+
+
+class Ae_Joomla_15_AnyHtmlButton extends JButtonAnyHtml {
+}
Index: Ae/Joomla/25/Adapter.php
===================================================================
--- Ae/Joomla/25/Adapter.php	(revision 0)
+++ Ae/Joomla/25/Adapter.php	(revision 259)
@@ -0,0 +1,7 @@
+<?php
+
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+?>
Index: Ae/Joomla/25/Output.php
===================================================================
--- Ae/Joomla/25/Output.php	(revision 0)
+++ Ae/Joomla/25/Output.php	(revision 259)
@@ -0,0 +1,7 @@
+<?php
+
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+?>
Index: Ae/Legacy/Output/Joomla.php
===================================================================
--- Ae/Legacy/Output/Joomla.php	(revision 249)
+++ Ae/Legacy/Output/Joomla.php	(revision 259)
@@ -18,10 +18,14 @@
     
     var $shownJs = array();
     
-    function Ae_Legacy_Output_Joomla() {
+    function __construct() {
         $this->mainframe = & $GLOBALS['mainframe'];
     }
     
+    function setPageTitle($pageTitle) {
+        $this->mainframe->setPageTitle(implode(" - ", $pt));
+    }
+    
     function addCustomHeadTag($tag, $unique = false) {
         $document=& JFactory::getDocument();
 		if($document->getType() == 'html') {
@@ -49,7 +53,10 @@
         //var_dump('As module: '. $asModule);
             
         if ($response->headTags) {
-            foreach ($response->headTags as $t) $this->addCustomHeadTag($t);
+            foreach ($response->headTags as $t) {
+                if ($asModule)  echo $t;
+                    else $this->addCustomHeadTag($t);
+            }
         }
         
         if (!$asModule) {
@@ -77,7 +84,7 @@
                     //$pt[] = $this->_unhtmlentities($t);
                     $pt[] = html_entity_decode($t, ENT_QUOTES, 'cp1251');
                 }
-                $this->mainframe->setPageTitle(implode(" - ", $pt));
+                $this->setPageTitle(implode(" - ", $pt));
             }
             $this->showPathway($response);
             if ($response->metas) {
Index: Ae/I/Getter.php
===================================================================
--- Ae/I/Getter.php	(revision 0)
+++ Ae/I/Getter.php	(revision 259)
@@ -0,0 +1,7 @@
+<?php
+
+interface Ae_I_Getter {
+    
+    function get($object, $defaultValue = null);
+    
+}
\ No newline at end of file
Index: Ae/Admin/Manager.php
===================================================================
--- Ae/Admin/Manager.php	(revision 249)
+++ Ae/Admin/Manager.php	(revision 259)
@@ -30,6 +30,8 @@
      */
     var $toolbarContent = false;
     
+    var $toolbarHeader = false;
+    
     /**
      * @var Ae_Sql_Filter
      */
Index: Ae/Admin/Template.php
===================================================================
--- Ae/Admin/Template.php	(revision 249)
+++ Ae/Admin/Template.php	(revision 259)
@@ -4,338 +4,331 @@
  * @copyright    (c) 2008 Ilya Rezvin
  * @author         Ilya Rezvin <ilya@rezvin.com>
  * @version        $Id$
- */
-
-Ae_Dispatcher::loadClass('Ae_Template_Html');
-
-class Ae_Admin_Template extends Ae_Template_Html {
-    /**
-     * @var Ae_Admin_Manager
-     */
-    var $manager = false;
-    /**
-     * @var Ae_Legacy_Controller_Context_Http
-     */
-    var $context = false;
-    var $inForm = false;
-    var $formId = false;
-    var $managerId = false;
-    var $requestMethod = 'post';
-    /**
-     * Name of manager action parameter in URL or form input
-     *
-     * @var string
-     */
-    var $actionParam = 'action';
-    var $processingParam = 'processing';
-    var $recordKeyParam = 'key';
-    var $actions = array();
-    var $htmlIdsPrefix = false;
-    
-    var $_showTableMtime = false;
-    
-    /**
-     * @var Ae_Url
-     */
-    var $url = false;
-    
-    /**
-     * Populates template vars using info from the manager and its context
-     *
-     * @param Ae_Admin_Manager $manager
-     */
-    function setManager(& $manager) {
-        $this->manager = & $manager;
-        $context = & $manager->getContext();
-        if ($context->isInForm) {
-            $this->formId = $context->isInForm;
-            $this->requestMethod = $context->requestMethod;
-        } else {
-            $this->formId = 'managerForm';
-            $this->requestMethod = 'post'; 
-        }
-        $this->url = & $context->getUrl();
-        $this->actionParam = $context->mapParam('action');
-        $this->processingParam = $context->mapParam('processing');
-        $this->recordKeyParam = $context->mapParam('recordKey');
-        $this->htmlIdsPrefix = $context->mapIdentifier('_');
-        $this->actions = array();
-        foreach ($this->manager->listActions() as $a) $this->actions[$a] = & $this->manager->getAction($a);
-    }
-    
-    function showToolbar() {
-        $this->addJsLib('{AE}overlib_mini.js');
-        
-        if (count($this->actions)) {
-?>
-
-    <table class='actions'>
-        <tr>
-            <td class="beforeActions">&nbsp;</td>
-<?php foreach(array_keys($this->actions) as $a) { $act = & $this->actions[$a]; ?>
-            <td id="<?php echo $this->htmlIdsPrefix ?>_action_td_<?php echo $a; ?>" >
-                <img id="<?php echo $this->htmlIdsPrefix ?>_action_img_<?php echo $a; ?>" />
-                <div><a href="#" id="<?php echo $this->htmlIdsPrefix ?>_action_a_<?php echo $a; ?>">&nbsp;</a></div>
-            </td>                
-<?php } ?>
-
-        </tr>
-    </table>            
-            
-<?php
-        }
-    }
-    
-    function showCreateManagerController() {
-        $mgrCon = $this->manager->getJsManagerControllerRef();
-        $ctx = & $this->manager->getContext();
-        $h = & $this->getHtmlHelper();
-        $sd = $this->manager->getStateData();        
-?>
-
-    <input type="hidden" name="<?php $this->d($ctx->mapParam($this->manager->_methodParamName)); ?>" id="<?php $this->d($aId = $ctx->mapIdentifier($this->manager->_methodParamName)); ?>" value="<?php if (isset($sd['action'])) $this->d($sd['action']); ?>" />
-    <input type="hidden" name="<?php $this->d($ctx->mapParam($this->manager->_processingParamName)); ?>" id="<?php $this->d($pId = $ctx->mapIdentifier($this->manager->_processingParamName)); ?>" />
-    <script type="text/javascript"><!--
-    
-        var _m = <?php echo $mgrCon ?> = new AvanControllers.ManagerController({
-            managerActionElement: <?php $this->d($h->jsQuote($aId), true) ?>,
-            managerProcessingElement: <?php $this->d($h->jsQuote($pId), true) ?>
-
-        });
-        delete _m;
-    // -->
-    </script>
-<?php
-    
-    }
-    
-    function showJsBindings() {
-        
-        $mgrCon = $this->manager->getJsManagerControllerRef();
-        $h = & $this->getHtmlHelper();
-        $ctx = & $this->manager->getContext();
-?>
-
-        <script type="text/javascript">
-        <!--
-        var _m = <?php echo $mgrCon ?>;
-<?php if ($fn = $this->manager->getManagerFormName()) { ?>
-
-        _m.formElement = <?php echo $h->jsQuote($fn); ?>;
-        
-<?php } ?>
-<?php        
-        if (count($this->actions)) {
-            $actionsJson = array();
-            $hlp = & $this->getHtmlHelper();
-            foreach (array_keys($this->actions) as $a) {
-                $actionsJson[] = $this->actions[$a]->getJson();
-            }
-            $act = $this->manager->getJsActionsControllerRef();
-?>
-        var _a = <?php echo $act; ?> = new AvanControllers.ActionsController( {
-            actions: <?php echo $hlp->toJson($actionsJson, 14, 4, true, false); ?>
-        } );
-<?php foreach(array_keys($this->actions) as $a) { $act = & $this->actions[$a]; ?>
-        
-        _a.getAction('<?php echo $a; ?>')
-                .observe([_a.Click, _a.ShowCaption, _a.ShowHint], {element: '<?php echo $this->htmlIdsPrefix ?>_action_a_<?php echo $a; ?>'})
-                .observe([_a.Click, _a.ShowImage, _a.ShowHint], {element: '<?php echo $this->htmlIdsPrefix ?>_action_img_<?php echo $a; ?>'})
-                .observe([_a.EnabledDisabled, _a.Click], {element: '<?php echo $this->htmlIdsPrefix ?>_action_td_<?php echo $a; ?>'});
-<?php } ?>
-
-<?php if ($this->manager->isList()) { ?>
-        
-        <?php $this->d($this->manager->getJsListControllerRef(), true); ?>.setActionsController(_a);
-<?php } ?>
-        
-        _m.setActionsController(_a);
-        
-<?php if ($form = & $this->manager->getForm()) { $fcr = $this->manager->getJsFormControllerRef(); ?>
-        
-        var _f = <?php echo $fcr; ?> = new AvanControllers.FormController();
-        _m.setFormController(_f);
-        
-<?php if (in_array('cancel', array_keys($this->actions))) { ?>
-        
+ */
+
+Ae_Dispatcher::loadClass('Ae_Template_Html');
+
+class Ae_Admin_Template extends Ae_Template_Html {
+    /**
+     * @var Ae_Admin_Manager
+     */
+    var $manager = false;
+    /**
+     * @var Ae_Legacy_Controller_Context_Http
+     */
+    var $context = false;
+    var $inForm = false;
+    var $formId = false;
+    var $managerId = false;
+    var $requestMethod = 'post';
+    /**
+     * Name of manager action parameter in URL or form input
+     *
+     * @var string
+     */
+    var $actionParam = 'action';
+    var $processingParam = 'processing';
+    var $recordKeyParam = 'key';
+    var $actions = array();
+    var $htmlIdsPrefix = false;
+    
+    var $_showTableMtime = false;
+    
+    /**
+     * @var Ae_Url
+     */
+    var $url = false;
+    
+    /**
+     * Populates template vars using info from the manager and its context
+     *
+     * @param Ae_Admin_Manager $manager
+     */
+    function setManager(& $manager) {
+        $this->manager = & $manager;
+        $context = & $manager->getContext();
+        if ($context->isInForm) {
+            $this->formId = $context->isInForm;
+            $this->requestMethod = $context->requestMethod;
+        } else {
+            $this->formId = 'managerForm';
+            $this->requestMethod = 'post'; 
+        }
+        $this->url = & $context->getUrl();
+        $this->actionParam = $context->mapParam('action');
+        $this->processingParam = $context->mapParam('processing');
+        $this->recordKeyParam = $context->mapParam('recordKey');
+        $this->htmlIdsPrefix = $context->mapIdentifier('_');
+        $this->actions = array();
+        foreach ($this->manager->listActions() as $a) $this->actions[$a] = & $this->manager->getAction($a);
+    }
+    
+    function showToolbar() {
+        $this->addJsLib('{AE}overlib_mini.js');
+        
+        if (count($this->actions)) {
+?>
+
+    <table class='actions'>
+        <tr>
+            <td class="beforeActions">&nbsp;</td>
+<?php foreach(array_keys($this->actions) as $a) { $act = & $this->actions[$a]; ?>
+            <td id="<?php echo $this->htmlIdsPrefix ?>_action_td_<?php echo $a; ?>" >
+                <img id="<?php echo $this->htmlIdsPrefix ?>_action_img_<?php echo $a; ?>" />
+                <div><a href="#" id="<?php echo $this->htmlIdsPrefix ?>_action_a_<?php echo $a; ?>">&nbsp;</a></div>
+            </td>                
+<?php } ?>
+
+        </tr>
+    </table>            
+            
+<?php
+        }
+    }
+    
+    function showCreateManagerController() {
+        $mgrCon = $this->manager->getJsManagerControllerRef();
+        $ctx = & $this->manager->getContext();
+        $h = & $this->getHtmlHelper();
+        $sd = $this->manager->getStateData();        
+?>
+
+    <input type="hidden" name="<?php $this->d($ctx->mapParam($this->manager->_methodParamName)); ?>" id="<?php $this->d($aId = $ctx->mapIdentifier($this->manager->_methodParamName)); ?>" value="<?php if (isset($sd['action'])) $this->d($sd['action']); ?>" />
+    <input type="hidden" name="<?php $this->d($ctx->mapParam($this->manager->_processingParamName)); ?>" id="<?php $this->d($pId = $ctx->mapIdentifier($this->manager->_processingParamName)); ?>" />
+    <script type="text/javascript"><!--
+    
+        var _m = <?php echo $mgrCon ?> = new AvanControllers.ManagerController({
+            managerActionElement: <?php $this->d($h->jsQuote($aId), true) ?>,
+            managerProcessingElement: <?php $this->d($h->jsQuote($pId), true) ?>
+
+        });
+        delete _m;
+    // -->
+    </script>
+<?php
+    
+    }
+    
+    function showJsBindings() {
+        
+        $mgrCon = $this->manager->getJsManagerControllerRef();
+        $h = & $this->getHtmlHelper();
+        $ctx = & $this->manager->getContext();
+?>
+
+        <script type="text/javascript">
+        <!--
+        var _m = <?php echo $mgrCon ?>;
+<?php if ($fn = $this->manager->getManagerFormName()) { ?>
+
+        _m.formElement = <?php echo $h->jsQuote($fn); ?>;
+        
+<?php } ?>
+<?php        
+        if (count($this->actions)) {
+            $actionsJson = array();
+            $hlp = & $this->getHtmlHelper();
+            foreach (array_keys($this->actions) as $a) {
+                $actionsJson[] = $this->actions[$a]->getJson();
+            }
+            $act = $this->manager->getJsActionsControllerRef();
+?>
+        var _a = <?php echo $act; ?> = new AvanControllers.ActionsController( {
+            actions: <?php echo $hlp->toJson($actionsJson, 14, 4, true, false); ?>
+        } );
+<?php foreach(array_keys($this->actions) as $a) { $act = & $this->actions[$a]; ?>
+        
+        _a.getAction('<?php echo $a; ?>')
+                .observe([_a.Click, _a.ShowCaption, _a.ShowHint], {element: '<?php echo $this->htmlIdsPrefix ?>_action_a_<?php echo $a; ?>'})
+                .observe([_a.Click, _a.ShowImage, _a.ShowHint], {element: '<?php echo $this->htmlIdsPrefix ?>_action_img_<?php echo $a; ?>'})
+                .observe([_a.EnabledDisabled, _a.Click], {element: '<?php echo $this->htmlIdsPrefix ?>_action_td_<?php echo $a; ?>'});
+<?php } ?>
+
+<?php if ($this->manager->isList()) { ?>
+        
+        <?php $this->d($this->manager->getJsListControllerRef(), true); ?>.setActionsController(_a);
+<?php } ?>
+        
+        _m.setActionsController(_a);
+        
+<?php if ($form = & $this->manager->getForm()) { $fcr = $this->manager->getJsFormControllerRef(); ?>
+        
+        var _f = <?php echo $fcr; ?> = new AvanControllers.FormController();
+        _m.setFormController(_f);
+        
+<?php if (in_array('cancel', array_keys($this->actions))) { ?>
+        
 <?php /* ?>
 		_a.getAction('cancel').observe(_a.Click, {element: <?php echo $hlp->jsQuote($ctx->mapIdentifier('formContainer')); ?>, eventName: 'dblclick'});
-<?php */ ?>		
-        delete _f;
-        
-<?php } ?>
-
-<?php } ?>
-        
-<?php } ?>
-        delete _a;
-        delete _m;
-
+<?php */ ?>		
+        delete _f;
+        
+<?php } ?>
+
+<?php } ?>
+        
+<?php } ?>
+        delete _a;
+        delete _m;
+
         //-->
-        </script>
-<?php
-    }
-    
-    function showFilterForm() {
-        $f = & $this->manager->getFilterForm();
-?>
-    <div class='filters'>
-<?php
-        $r = & $this->manager->_getFilterFormResponse();
-        echo $r->content;
-        $this->htmlResponse->mergeWithResponse($r);
-?>
-        <div class='clr'>&nbsp;</div>   
-    </div>
-<?php        
-    }        
-    
-    function showManagerList() {
-        $table = & $this->manager->getTable();
-        $pager = & $this->manager->getPagination();
-        $filterForm = & $this->manager->getFilterForm();
-?>
-    <script type='text/javascript'>
-        <?php $this->d($this->manager->getJsManagerControllerRef(), true); ?>.setListController( 
-            <?php $this->d($this->manager->getJsListControllerRef(), true); ?> = new window.AvanControllers.ListController({selectedClass: 'selected'})
-        );
-    </script>
-    <div>
-        <?php if ($filterForm) $this->showFilterForm(); ?>
-        <?php $table->show(); ?>
-        <?php $pager->show(); ?>
-    </div>
-    <?php $table->showHints(); ?>
-<?php
-    }
-    
-    function showManagerDetails() {
-        $ctx = & $this->manager->getContext();
-?>   
-    <div class='details' id='<?php echo $ctx->mapIdentifier('formContainer') ?>'>   
-    <?php $this->showFormContent(); ?>   
-    
-    <?php if ($this->manager->listSubManagers()) $this->_showSubManagers(); ?>
-    
-    </div>
-    
-    
-<?php
-    }
-    
-    function showFormContent() {
-        $r = & $this->manager->_getFormResponse();
-        echo $r->content;
-        $this->htmlResponse->mergeWithResponse($r);   
-    }
-            
-    function showManagerWrapper($innerHtml, $isPart = false, $params = array()) {
-        //$this->addJsLib('prototype.js');
+        </script>
+<?php
+    }
+    
+    function showFilterForm() {
+        $f = & $this->manager->getFilterForm();
+?>
+    <div class='filters'>
+<?php
+        $r = & $this->manager->_getFilterFormResponse();
+        echo $r->content;
+        $this->htmlResponse->mergeWithResponse($r);
+?>
+        <div class='clr'>&nbsp;</div>   
+    </div>
+<?php        
+    }        
+    
+    function showManagerList() {
+        $table = & $this->manager->getTable();
+        $pager = & $this->manager->getPagination();
+        $filterForm = & $this->manager->getFilterForm();
+?>
+    <script type='text/javascript'>
+        <?php $this->d($this->manager->getJsManagerControllerRef(), true); ?>.setListController( 
+            <?php $this->d($this->manager->getJsListControllerRef(), true); ?> = new window.AvanControllers.ListController({selectedClass: 'selected'})
+        );
+    </script>
+    <div>
+        <?php if ($filterForm) $this->showFilterForm(); ?>
+        <?php $table->show(); ?>
+        <?php $pager->show(); ?>
+    </div>
+    <?php $table->showHints(); ?>
+<?php
+    }
+    
+    function showManagerDetails() {
+        $ctx = & $this->manager->getContext();
+?>   
+    <div class='details' id='<?php echo $ctx->mapIdentifier('formContainer') ?>'>   
+    <?php $this->showFormContent(); ?>   
+    
+    <?php if ($this->manager->listSubManagers()) $this->_showSubManagers(); ?>
+    
+    </div>
+    
+    
+<?php
+    }
+    
+    function showFormContent() {
+        $r = & $this->manager->_getFormResponse();
+        echo $r->content;
+        $this->htmlResponse->mergeWithResponse($r);   
+    }
+            
+    function showManagerWrapper($innerHtml, $isPart = false, $params = array()) {
+        //$this->addJsLib('prototype.js');
         
         $this->addJsLib('{PAX}core.js');
-        $this->addJsLib('{AE}avanManager.js');
-        
-        if ($isPart) $innerHtml = $this->fetch($innerHtml, $params);
-        
-        $context = & $this->manager->getContext();
-        $formName = $this->manager->getManagerFormName();
-        
-        if (!$context->isInForm) {
-            
-            $url = & $this->manager->getManagerUrl();
-        
-?>
-    <form action="<?php $this->d($url->toString(false)); ?>" method="<?php $this->d($context->requestMethod); ?>" id="<?php $this->d($formName); ?>" name="<?php $this->d($formName); ?>" >
-        
-        <?php $this->d($url->getHidden(), true); ?>
-<?php   } else {
-            
-            // TODO: fix this ugly crap!
-            $stateData = $this->manager->getStateData();
-            unset($stateData['action']);
-            Ae_Dispatcher::loadClass('Ae_Url');
-            $adp = $this->manager->_context->getDataPath();
-            echo $foo = Ae_Url::getHidden($stateData, /*Ae_Util::arrayToPath($adp)*/ $adp );
-        } ?>
-
-    <div class='manager'>
+        $this->addJsLib('{AE}avanManager.js');
+        
+        if ($isPart) $innerHtml = $this->fetch($innerHtml, $params);
+        
+        $context = & $this->manager->getContext();
+        $formName = $this->manager->getManagerFormName();
+        
+        if (!$context->isInForm) {
+            
+            $url = & $this->manager->getManagerUrl();
+        
+?>
+    <form action="<?php $this->d($url->toString(false)); ?>" method="<?php $this->d($context->requestMethod); ?>" id="<?php $this->d($formName); ?>" name="<?php $this->d($formName); ?>" enctype="multipart/form-data" >
+        
+        <?php $this->d($url->getHidden(), true); ?>
+<?php   } else {
+            
+            // TODO: fix this ugly crap!
+            $stateData = $this->manager->getStateData();
+            unset($stateData['action']);
+            Ae_Dispatcher::loadClass('Ae_Url');
+            $adp = $this->manager->_context->getDataPath();
+            echo $foo = Ae_Url::getHidden($stateData, /*Ae_Util::arrayToPath($adp)*/ $adp );
+        } ?>
+
+    <div class='manager'>
 <?php if ($this->manager->separateToolbar) ob_start(); ?>    
-    <table class='heading'>
-    <tr>
-    <td class='headingTd'><?php if ($this->manager->isForm()) echo $this->manager->getFormTitle(); else echo $this->manager->getPluralCaption(); ?></td>
-    <td class='afterHeading'>&nbsp;</td>
-    <td class='toolbarTd'>
-    <?php $this->showToolbar(); ?>
-    </td>
-    </tr>
-    </table>
-<?php if ($this->manager->separateToolbar) { $this->manager->toolbarContent = ob_get_clean(); } ?>    
-    <?php $this->showCreateManagerController(); ?>
-    <?php $this->d($innerHtml, true); ?>
-    <?php $this->showJsBindings(); ?>
-    </div>
-    
-    <?php if ($this->_showTableMtime && ($m = & $this->manager->getMapper())) var_dump(date("Y-m-d H:i:s", $m->getMtime())); ?>
-    
-<?php if (!$context->isInForm) { ?>
-    
-    </form>
-<?php   }       
-    }
-    
-    function _showSubManagers() {
-        $this->addCssLib('{AECSS}tabcontent.css', false);
-        $this->addJsLib('{AE}tabcontent.js', false);
-        $ctx = & $this->manager->getContext();
-        $tcId = $ctx->mapIdentifier('smTabs');
-        $tcVar = $tcId.'_o';
-        $h = & $this->getHtmlHelper();
-        
-?>
-
-        <div class='subManagers'>
-
-        <ul id="<?php $this->d($tcId); ?>" class="shadetabs">
-<?php foreach ($this->manager->listSubManagers() as $id) { 
-        $smId = $ctx->mapIdentifier('smTab_'.$id); 
-        $sm = & $this->manager->getSubManager($id);
-        $resp = & $sm->getResponse();
-?>
-    
-        <li><a href="#" rel="<?php $this->d($smId); ?>"><?php $this->d($sm->getPluralCaption()); ?></a></li>
-<?php } ?>
-        </ul>
-
-        <div class='tabContainer'>
-<?php foreach ($this->manager->listSubManagers() as $id) { 
-    $smId = $ctx->mapIdentifier('smTab_'.$id); 
-    $sm = & $this->manager->getSubManager($id);
-    $resp = & $sm->getResponse();
-    
-?>
-    
-        <div id="<?php $this->d($smId); ?>" class="tabcontent">
-            <div class='subManagerTab'>
-            <?php echo $resp->content; ?>
-            </div>
-        </div>
-<?php } ?>
-
-        </div>
-        
-        </div>
-
-        <script type="text/javascript">
-            
-            var <?php echo $tcVar; ?> = new ddtabcontent(<?php echo $h->jsQuote($tcId); ?>);
-            <?php echo $tcVar; ?>.setpersist(true);
-            <?php echo $tcVar; ?>.setselectedClassTarget("link");
-            <?php echo $tcVar; ?>.init();
-        </script>
-
-<?php
-        
-    }
-}
+<?php   $this->manager->toolbarHeader = $this->manager->isForm()? $this->manager->getFormTitle() : $this->manager->getPluralCaption(); ?>
+<?php   $this->showToolbar(); ?>
+<?php if ($this->manager->separateToolbar) { $this->manager->toolbarContent = ob_get_clean(); } ?>    
+    <?php $this->showCreateManagerController(); ?>
+    <?php $this->d($innerHtml, true); ?>
+    <?php $this->showJsBindings(); ?>
+    </div>
+    
+    <?php if ($this->_showTableMtime && ($m = & $this->manager->getMapper())) var_dump(date("Y-m-d H:i:s", $m->getMtime())); ?>
+    
+<?php if (!$context->isInForm) { ?>
+    
+    </form>
+<?php   }       
+    }
+    
+    function _showSubManagers() {
+        $this->addCssLib('{AECSS}tabcontent.css', false);
+        $this->addJsLib('{AE}tabcontent.js', false);
+        $ctx = & $this->manager->getContext();
+        $tcId = $ctx->mapIdentifier('smTabs');
+        $tcVar = $tcId.'_o';
+        $h = & $this->getHtmlHelper();
+        
+?>
 
+        <div class='subManagers'>
+
+        <ul id="<?php $this->d($tcId); ?>" class="shadetabs">
+<?php foreach ($this->manager->listSubManagers() as $id) { 
+        $smId = $ctx->mapIdentifier('smTab_'.$id); 
+        $sm = & $this->manager->getSubManager($id);
+        $resp = & $sm->getResponse();
+?>
+    
+        <li><a href="#" rel="<?php $this->d($smId); ?>"><?php $this->d($sm->getPluralCaption()); ?></a></li>
+<?php } ?>
+        </ul>
+
+        <div class='tabContainer'>
+<?php foreach ($this->manager->listSubManagers() as $id) { 
+    $smId = $ctx->mapIdentifier('smTab_'.$id); 
+    $sm = & $this->manager->getSubManager($id);
+    $resp = & $sm->getResponse();
+    
+?>
+    
+        <div id="<?php $this->d($smId); ?>" class="tabcontent">
+            <div class='subManagerTab'>
+            <?php echo $resp->content; ?>
+            </div>
+        </div>
+<?php } ?>
+
+        </div>
+        
+        </div>
+
+        <script type="text/javascript">
+            
+            var <?php echo $tcVar; ?> = new ddtabcontent(<?php echo $h->jsQuote($tcId); ?>);
+            <?php echo $tcVar; ?>.setpersist(true);
+            <?php echo $tcVar; ?>.setselectedClassTarget("link");
+            <?php echo $tcVar; ?>.init();
+        </script>
+
+<?php
+        
+    }
+}
+
 ?>
\ No newline at end of file
Index: Ae/Admin/Processing/SaveOrder.php
===================================================================
--- Ae/Admin/Processing/SaveOrder.php	(revision 0)
+++ Ae/Admin/Processing/SaveOrder.php	(revision 259)
@@ -0,0 +1,36 @@
+<?php
+
+// TODO: translate language strings
+class Ae_Admin_Processing_SaveOrder extends Ae_Admin_Processing {
+	
+	var $fieldName = 'ordering';
+	var $paramName = 'ordering';
+	
+	/**
+	 * @var Ae_Admin_Manager
+	 */
+	var $manager = false;
+	
+	function getOrderingValue($record) {
+		$res = $this->getContext()->getData(array($this->paramName, $this->manager->getStrPk($record)), false);
+		if (is_numeric($res) && $res >= 1) $res = (int) $res;
+			else $res = false;
+		return $res;
+	}
+	
+	function _doProcessRecord($record) {
+		
+		$value = $record->getField($this->fieldName);
+		$newValue = $this->getOrderingValue($record);
+		if ($newValue !== false && $newValue != $value) {
+		$record->setField($this->fieldName, $newValue);
+			if ($record->store()) {
+				$this->reportRecord($record, 'Запись перемещена', 'message', false, false);
+			} else {
+				$this->reportRecord($record, 'Не удалось переместить запись', 'error', false, false);
+			}
+		}
+		
+	}
+	
+}
Index: Ae/Admin/Processing/Reorder.php
===================================================================
--- Ae/Admin/Processing/Reorder.php	(revision 0)
+++ Ae/Admin/Processing/Reorder.php	(revision 259)
@@ -0,0 +1,34 @@
+<?php
+
+// TODO: translate language strings
+class Ae_Admin_Processing_Reorder extends Ae_Admin_Processing {
+	
+	const directionUp = 'up';
+	const directionDown = 'down';
+	
+	var $fieldName = 'ordering';
+	
+	// Not implemented yet
+	
+//	var $orderUpMethod = false;
+//	var $orderDownMethod = false;
+//	var $orderParamMethod = false;
+	
+	var $direction = self::directionUp;
+	
+	function _doProcessRecord($record) {
+		
+		$value = $record->getField($this->fieldName);
+		if (is_numeric($this->direction)) $value += $this->direction;
+		elseif ($this->direction === self::directionUp) $value -= 1;
+		elseif ($this->direction === self::directionDown) $value += 1;
+		
+		$record->setField($this->fieldName, $value);
+		if ($record->store()) {
+			$this->reportRecord($record, 'Запись перемещена', 'message', false, false);
+		} else {
+			$this->reportRecord($record, 'Не удалось переместить запись', 'error', false, false);
+		}
+	}
+	
+}
Index: Ae/Admin/Processing/Publish.php
===================================================================
--- Ae/Admin/Processing/Publish.php	(revision 0)
+++ Ae/Admin/Processing/Publish.php	(revision 259)
@@ -0,0 +1,32 @@
+<?php
+
+// TODO: translate language strings
+class Ae_Admin_Processing_Publish extends Ae_Admin_Processing {
+	
+	const modePublish = 'publish';
+	const modeUnpublish = 'unpublish';
+	const modeToggle = 'toggle';
+	
+	var $mode = self::modePublish;
+	var $header = 'Смена режима публикации';
+
+	var $fieldName = 'published';
+	
+	function _doProcessRecord($record) {
+		$currValue = $record->getField($this->fieldName);
+		switch ($this->mode) {
+			case self::modePublish: $newValue = 1; break;
+			case self::modeUnpublish: $newValue = 0; break;
+			case self::modeToggle: $newValue = !$currValue; break;
+		}
+		if ((bool) $newValue != (bool) $currValue) {
+			$record->setField($this->fieldName, $newValue);
+			if ($record->store()) {
+				$this->reportRecord($record, 'Запись '.($newValue? 'опубликована' : 'снята с публикации'), 'message', false, false);
+			} else {
+				$this->reportRecord($record, 'Не удалось '.($newValue? 'опубликовать' : 'снять с публикации').' запись', 'error', false, false);
+			}
+		}
+	}
+	
+}
Index: Ae/Admin/Column/SaveOrder.php
===================================================================
--- Ae/Admin/Column/SaveOrder.php	(revision 249)
+++ Ae/Admin/Column/SaveOrder.php	(revision 259)
@@ -7,6 +7,7 @@
      */
     var $manager = false;
     var $paramName = 'ordering';
+    var $saveOrderIcon = 'images/filesave.png';
     
     function getTaskName() {
         if (isset($this->settings['taskName'])) $res = $this->settings['taskName'];
@@ -16,7 +17,7 @@
     
     function showHeader($rowCount, $rowNo) {
         
-        $saveOrderCall = new Pm_Js_Call($this->manager->getJsManagerControllerRef().'.executeProcessing', array(
+        $saveOrderCall = new Ae_Js_Call($this->manager->getJsManagerControllerRef().'.executeProcessing', array(
             $this->getTaskName(), true
         ));
         
@@ -24,7 +25,7 @@
         <th <?php echo Ae_Util::mkAttribs($this->getHeaderAttribs($rowCount, $rowNo)); ?> > 
             <?php echo $this->getTitle(); ?> 
         </th>
-        <th <?php echo Ae_Util::mkAttribs($this->getHeaderAttribs($rowCount, $rowNo)); ?> > <a href="#" onclick="<?php echo $saveOrderCall; ?>"><img src="images/filesave.png" border="0" width="16" height="16" alt=ACLT_SAVE_ORDER /></a></th>
+        <th <?php echo Ae_Util::mkAttribs($this->getHeaderAttribs($rowCount, $rowNo)); ?> > <a href="#" onclick="<?php echo $saveOrderCall; ?>"><img src="<?php echo $this->saveOrderIcon; ?>" border="0" width="16" height="16" alt=ACLT_SAVE_ORDER /></a></th>
         <?php
     }
     
Index: Ae/Admin/Column/Published.php
===================================================================
--- Ae/Admin/Column/Published.php	(revision 249)
+++ Ae/Admin/Column/Published.php	(revision 259)
@@ -13,7 +13,7 @@
         $alt = $data? $this->getPublishedAlt() : $this->getUnpublishedAlt();
         $task = $data? $this->getUnpublishTask() : $this->getPublishTask();
         
-        $jsCall = new Pm_Js_Call($this->manager->getJsManagerControllerRef().'.executeProcessing', array(
+        $jsCall = new Ae_Js_Call($this->manager->getJsManagerControllerRef().'.executeProcessing', array(
             $task,
             array($this->manager->getStrPk($record))
         ));
@@ -26,7 +26,7 @@
                 "> ".
                     "<img ".
                         Ae_Util::mkAttribs(array(
-                            'src' => "images/$img", 
+                            'src' => "$img", 
                             'width' => 12,
                             'height' => 12,
                             'border' => 0,
Index: Ae/Admin/Column/Reorder.php
===================================================================
--- Ae/Admin/Column/Reorder.php	(revision 249)
+++ Ae/Admin/Column/Reorder.php	(revision 259)
@@ -7,6 +7,10 @@
      */
     var $manager = false;
     
+    var $orderUpIcon = 'images/uparrow.png';
+    
+    var $orderDownIcon = 'images/downarrow.png';
+    
     /**
      * Renders (echo's) column cell
      */
@@ -18,14 +22,14 @@
         $spk = $this->manager->getStrPk($record);
         
         if ($canUp = $this->canOrderUp($record, $rowNo)) {
-            $upJavascript = 'return '.(new Pm_Js_Call($this->manager->getJsManagerControllerRef().'.executeProcessing', array(
+            $upJavascript = 'return '.(new Ae_Js_Call($this->manager->getJsManagerControllerRef().'.executeProcessing', array(
                 $this->getOrderUpTask(),
                 array($spk)
             ))).';';
         }
         
         if ($canDown = $this->canOrderDown($record, $rowNo)) {
-            $downJavascript = 'return '.(new Pm_Js_Call($this->manager->getJsManagerControllerRef().'.executeProcessing', array(
+            $downJavascript = 'return '.(new Ae_Js_Call($this->manager->getJsManagerControllerRef().'.executeProcessing', array(
                 $this->getOrderDownTask(),
                 array($spk)
             ))).';';
@@ -38,7 +42,7 @@
     function orderUpIcon($condition=true, $javascript, $alt='Move up' ) {
         if ($condition) {
             return '<a href="#reorder" onClick="'.$javascript.'" title="'.$alt.'">
-                <img src="images/uparrow.png" width="12" height="12" border="0" alt="'.$alt.'" />
+                <img src="'.$this->orderUpIcon.'" width="12" height="12" border="0" alt="'.$alt.'" />
             </a>';
         } else {
             return '&nbsp;';
@@ -48,7 +52,7 @@
     function orderDownIcon($condition=true, $javascript, $alt='Move down' ) {
         if ($condition) {
             return '<a href="#reorder" onClick="'.$javascript.'" title="'.$alt.'">
-                <img src="images/downarrow.png" width="12" height="12" border="0" alt="'.$alt.'" />
+                <img src="'.$this->orderDownIcon.'" width="12" height="12" border="0" alt="'.$alt.'" />
             </a>';
         } else {
             return '&nbsp;';
Index: Ae/Legacy/Config.php
===================================================================
--- Ae/Legacy/Config.php	(revision 249)
+++ Ae/Legacy/Config.php	(revision 259)
@@ -32,6 +32,7 @@
     var $listLimit;
     var $cachePath;
     var $cachePrefix = 'ae';
+    var $cacheLifeTime;
     var $sendEmails = true;
     var $pageMapPath = false;
     var $backendDirOverride = false;
Index: Ae/Sql/Select/Expression.php
===================================================================
--- Ae/Sql/Select/Expression.php	(revision 249)
+++ Ae/Sql/Select/Expression.php	(revision 259)
@@ -64,10 +64,13 @@
 				if ($db) $res = $db->nameQuote($this->expression);
 					else $res = $this->expression;
 			}
-		} else $res = $this->expression;
+		} else {
+            if (is_array($this->expression)) $res = implode(", ", $this->expression);
+            else $res = $this->expression;
+        }
 		return $res;
 	}
-	
+    
 	function nameQuote(& $db) {
 		return $this->getExpression($db);
 	}
Index: Ae/Sql/Select/TableProvider.php
===================================================================
--- Ae/Sql/Select/TableProvider.php	(revision 249)
+++ Ae/Sql/Select/TableProvider.php	(revision 259)
@@ -103,9 +103,9 @@
      * @param string $alias
      * @return Ae_Sql_Select_Table
      */
-    function & addTable(& $options, $alias = false) {
+    function & addTable($options, $alias = false) {
     	if (is_a($options, 'Ae_Sql_Select_Table')) {
-            $t = & $options;
+            $t = $options;
             $t->setTableProvider($this);
         }
         else {
@@ -120,8 +120,10 @@
         }
         $alias = $t->alias? $t->alias : $t->name;
         if (!strlen($alias)) trigger_error("name of table must be provided", E_USER_ERROR);
-        if (isset($this->_tables[$alias])) trigger_error("table with alias '{$alias}' is already in tables collection", E_USER_ERROR);
-        $this->_tables[$alias] = & $t;
+        if (isset($this->_tables[$alias])) {
+            trigger_error("table with alias '{$alias}' is already in tables collection", E_USER_ERROR);
+        }
+        $this->_tables[$alias] = $t;
         return $t;
     }
     
@@ -240,4 +242,15 @@
 		return $this->_id;
 	}
     
+    function cleanupReferences() {
+        foreach ($this->_tables as $t) $t->_tableProvider = null;
+        $this->_tables = array();
+        foreach ($this->_tableProviders as $t) {
+            $t->cleanupReferences();
+            $t->_parent = null;
+        }
+        $this->_tableProviders = array();
+        $this->_foundTables = array();
+    }
+    
 }
\ No newline at end of file
Index: Ae/Sql/Select/Table.php
===================================================================
--- Ae/Sql/Select/Table.php	(revision 249)
+++ Ae/Sql/Select/Table.php	(revision 259)
@@ -91,6 +91,8 @@
      */
     var $_tableProvider = false;
     
+    var $omitInFromClause = false;
+    
     /**
      * @param array $options
      * @param Ae_Sql_Select_TableProvider $tableProvider
@@ -227,46 +229,49 @@
     }
     
     function getJoinClausePart() {
-        $sqlSelect = & $this->getSqlSelect(true);
-    	//if (!$this->_sqlSelect) trigger_error("\'sqlSelect' property not set - call setSqlSelect() first", E_USER_ERROR);
-        if (!strlen($this->name)) trigger_error ("\$name must be provided for table '{$this->alias}'", E_USER_ERROR);
-        //if (!strlen($this->alias)) trigger_error ("\$alias must be provided", E_USER_ERROR);
-        
-        if (strlen($this->joinsAlias)) {
-        	
-        	$joinType = $this->getEffectiveJoinType();
-        	
-            $needsCondition = $this->_joinNeedsCondition($joinType);
-            if ($needsCondition){
-            	if ($this->_empty($this->joinsOn)) {
-            		trigger_error ("\$joinsOn property not provided for '{$joinType}' type join (neither CROSS nor NATURAL)", E_USER_WARNING);
-            	}
+        if ($this->omitInFromClause) $res = '';
+        else {
+            $sqlSelect = & $this->getSqlSelect(true);
+            //if (!$this->_sqlSelect) trigger_error("\'sqlSelect' property not set - call setSqlSelect() first", E_USER_ERROR);
+            if (!strlen($this->name)) trigger_error ("\$name must be provided for table '{$this->alias}'", E_USER_ERROR);
+            //if (!strlen($this->alias)) trigger_error ("\$alias must be provided", E_USER_ERROR);
+
+            if (strlen($this->joinsAlias)) {
+
+                $joinType = $this->getEffectiveJoinType();
+
+                $needsCondition = $this->_joinNeedsCondition($joinType);
+                if ($needsCondition){
+                    if ($this->_empty($this->joinsOn)) {
+                        trigger_error ("\$joinsOn property not provided for '{$joinType}' type join (neither CROSS nor NATURAL)", E_USER_WARNING);
+                    }
+                } else {
+                    if (!$this->_empty($this->joinsOn)) {
+                        trigger_error ("'{$joinType}' type join don't needs \$joinsOn, but it's provided", E_USER_WARNING);
+                    }
+                }
+
+                if (!strlen($joinType) || (trim($joinType) == ',')) {
+                    $joinType = ',';
+                }
+                $res = $joinType.' '.$sqlSelect->nameQuote($this->name);
+                if (strlen($this->alias)) $res .= ' AS '.$sqlSelect->nameQuote($this->alias);
+
+                if ($this->useIndex !== false) {
+                    $res .= ' USE INDEX('.(is_array($this->useIndex)? implode(", ", $this->useIndex) : $this->useIndex).')'; 
+                }
+
+                $res .= $this->getJoinsOn();
+
             } else {
-            	if (!$this->_empty($this->joinsOn)) {
-            		trigger_error ("'{$joinType}' type join don't needs \$joinsOn, but it's provided", E_USER_WARNING);
-            	}
+
+                $res = $sqlSelect->nameQuote($this->name);
+                if (strlen($this->alias)) $res .= ' AS '.$sqlSelect->nameQuote($this->alias);
+                if ($this->useIndex !== false) {
+                    $res .= ' USE INDEX('.(is_array($this->useIndex)? implode(", ", $this->useIndex) : $this->useIndex).')'; 
+                }
+
             }
-            
-            if (!strlen($joinType) || (trim($joinType) == ',')) {
-            	$joinType = ',';
-            }
-            $res = $joinType.' '.$sqlSelect->nameQuote($this->name);
-            if (strlen($this->alias)) $res .= ' AS '.$sqlSelect->nameQuote($this->alias);
-            
-            if ($this->useIndex !== false) {
-                $res .= ' USE INDEX('.(is_array($this->useIndex)? implode(", ", $this->useIndex) : $this->useIndex).')'; 
-            }
-            
-            $res .= $this->getJoinsOn();
-        
-        } else {
-        	
-            $res = $sqlSelect->nameQuote($this->name);
-            if (strlen($this->alias)) $res .= ' AS '.$sqlSelect->nameQuote($this->alias);
-            if ($this->useIndex !== false) {
-                $res .= ' USE INDEX('.(is_array($this->useIndex)? implode(", ", $this->useIndex) : $this->useIndex).')'; 
-            }
-            
         }
         return $res;
     }
Index: Ae/Sql/Db/Ae.php
===================================================================
--- Ae/Sql/Db/Ae.php	(revision 249)
+++ Ae/Sql/Db/Ae.php	(revision 259)
@@ -137,7 +137,7 @@
     function getErrorDescr() {
         return $this->_aeDb->getErrorMsg();
     }
-        
+    
 }
 
 ?>
\ No newline at end of file
Index: Ae/Sql/Filter/Custom.php
===================================================================
--- Ae/Sql/Filter/Custom.php	(revision 249)
+++ Ae/Sql/Filter/Custom.php	(revision 259)
@@ -58,7 +58,7 @@
      */
     function _doBind($input) {
         $this->values = array();
-        if (!is_array($input)) {
+        if (!is_array($input) || (count($this->params) == 1)) {
             if (strlen($this->defaultParamName)) $input = array($this->defaultParamName => $input);
                 else $input = array();
         }
Index: Ae/Sql/Filter/Multiple.php
===================================================================
--- Ae/Sql/Filter/Multiple.php	(revision 249)
+++ Ae/Sql/Filter/Multiple.php	(revision 259)
@@ -20,13 +20,13 @@
     var $isOr = false;
     
     var $differentFiltersForWhereAndHaving = false; // TODO: implement this...
-    
-    /**
-     * Usually the Ae_Sql_Filter_Multiple accepts array (childName => childValue); but if this property is TRUE, it just sets assigned value to each child filter. 
-     * @var bool
-     */
-    var $setSameValueForAllChildren = false;
     
+    /**
+     * Usually the Ae_Sql_Filter_Multiple accepts array (childName => childValue); but if this property is TRUE, it just sets assigned value to each child filter. 
+     * @var bool
+     */
+    var $setSameValueForAllChildren = false;
+    
     function listFilters() {
         return array_keys($this->_filters);
     }
@@ -121,12 +121,12 @@
      * @access protected
      */
     function _doBind($input) {
-        if ($this->setSameValueForAllChildren) {
-            foreach ($this->listFilters() as $id) {
-                $f = & $this->getFilter($id);
-                $f->bind($input);
+        if ($this->setSameValueForAllChildren) {
+            foreach ($this->listFilters() as $id) {
+                $f = & $this->getFilter($id);
+                $f->bind($input);
             }
-        } else {
+        } else {
             if (is_array($input)) {
                 $appliedFilters = array();
                 foreach ($this->listFilters() as $id) {
@@ -139,7 +139,7 @@
                 if (!count($appliedFilters)) $this->applied = false;
             } else {
                 $this->applied = false;
-            }
+            }
         }
     }
     
Index: Ae/Sql/Select.php
===================================================================
--- Ae/Sql/Select.php	(revision 249)
+++ Ae/Sql/Select.php	(revision 259)
@@ -331,10 +331,12 @@
             $res->useNoMapper($t->name, $pkName);
         }
         $res->setAlias($orderedAliases[0]);
+        foreach ($this->otherJoins as $j) $res->addJoin($j);
         for ($i = 1; $i < count($orderedAliases); $i++) {
             $tbl = & $this->getTable($orderedAliases[$i]);
             $res->addJoin($tbl->getJoinClausePart());
         }
+        foreach ($this->otherJoinsAfter as $j) $res->addJoin($j);
         if ($this->where) {
             if (is_array($this->where)) foreach ($this->getWhereClause(false, 'plain') as $w) $res->addWhere($w);
             else $res->addWhere($this->where);
@@ -371,6 +373,14 @@
     	return $this->__toString();
     }
     
+    function cleanupReferences() {
+        $this->_db = null;
+        foreach ($this->_tables as $t) {
+            $t->_sqlSelect = null;
+        }
+        parent::cleanupReferences();
+    }
+    
 }
 
 ?>
Index: Ae/Autoparams.php
===================================================================
--- Ae/Autoparams.php	(revision 249)
+++ Ae/Autoparams.php	(revision 259)
@@ -95,6 +95,15 @@
         return $res;
     }
 
+    static function getObjectPropertyByPath($item, array $path, $defaultValue = null) {
+        $head = $item;
+        while (is_object($head) && !is_null($segment = array_shift($path))) {
+            $head = self::getObjectProperty($head, $segment, $defaultValue);
+        }
+        $res = count($path)? $defaultValue : $head;
+        return $res;;
+    }
+    
     static function getObjectProperty($item, $propertyName, $defaultValue = null) {
         if (is_array($item)) {
             $res = array();
@@ -108,6 +117,8 @@
                 $res[$k] = self::getObjectProperty($item, $k, $defaultValue);
             }
             return $res;
+        } elseif ($propertyName instanceof Ae_I_Getter) {
+            $res = $propertyName->get($item, $defaultValue);
         } else {
             if (strlen($propertyName) && method_exists($item, $g = 'get'.ucFirst($propertyName))) {
                 $res = $item->$g();
@@ -120,8 +131,8 @@
             } else {
                 $res = $defaultValue;
             }
-            return $res;
         }
+        return $res;
     }
 
     static function setObjectProperty($item, $propertyName, $value = null) {
Index: Ae/Form/Control/Path.php
===================================================================
--- Ae/Form/Control/Path.php	(revision 0)
+++ Ae/Form/Control/Path.php	(revision 259)
@@ -0,0 +1,26 @@
+<?php
+
+class Ae_Form_Control_Path {
+    
+    protected $path = false;
+    
+    function __construct($path) {
+        $this->path = $path;
+    }
+    
+    function getPath() {
+        return $this->path;
+    }
+    
+    /**
+     * @return Ae_Form_Control
+     */
+    function getControl(Ae_Form_Control $relativeTo, $require = false) {
+        $res = $relativeTo->searchControlByPath($this->path);
+        if (!$res && $require) {
+            throw new Exception("Cannot find control by path '{$this->path}' (relative to control '".$relativeTo->getPath()."')");
+        }
+        return $res;
+    }
+    
+}
\ No newline at end of file
Index: Ae/Form/Control/Listable.php
===================================================================
--- Ae/Form/Control/Listable.php	(revision 249)
+++ Ae/Form/Control/Listable.php	(revision 259)
@@ -115,7 +115,7 @@
     
     function _doGetValue() {
         if (!($this->readOnly === true) && isset($this->_rqData['value']) && ($this->canInputBeArray() || !is_array($this->_rqData['value']))) {
-            $val = $this->_rqData['value'];
+            $val = $this->_rqData['value'];
             $this->_doProcessInputValue($val);
             $val = $this->processInputText($val);
             $res = $val;
Index: Ae/Form/Control/Composite.php
===================================================================
--- Ae/Form/Control/Composite.php	(revision 249)
+++ Ae/Form/Control/Composite.php	(revision 259)
@@ -21,10 +21,8 @@
 
     var $moveErrorsToTheChildren = true;
     
-    var $_controlSettings = false;
+    var $_controls = array();
     
-    var $_controls = false;
-    
     var $_creationCount = 0;
     
     var $_gotDefault = false;
@@ -33,29 +31,28 @@
     
     var $valueFirstInContext = false;
     
+    protected $modelUpdated = false;
+    
     function doInitProperties($options) {
+        $this->_iid = round(rand()*100);
         parent::doInitProperties($options);
-        if (isset($options['controls']) && is_array($options['controls'])) {
-            $this->addControls($options['controls']);
-        }
+        if (!isset($options['controls'])) $options['controls'] = array();
+        $this->addInitialControls($options['controls']);
     }
     
+    protected function addInitialControls(array $controls) {
+        $this->addControls($controls);
+    }
+    
     function addControl($name, $settings = array()) {
-        if (is_array($this->_controls)) {
-            if (isset($this->_controls[$name])) trigger_error ("Control with name '{$name}' already exists - delete it first", E_USER_ERROR);
-                else {
-                    $settings['_creationOrder'] = $this->_creationCount++;
-                    $this->_controls[$name] = $settings;
+        if (isset($this->_controls[$name])) trigger_error ("Control with name '{$name}' already exists - delete it first", E_USER_ERROR);
+            else {
+                if (!isset($settings['creationOrder'])) {
+                    $settings['creationOrder'] = $this->_creationCount++;
                 }
-        } elseif (is_array($this->_controlSettings)) {
-            if (isset($this->_controlSettings[$name])) trigger_error ("Control with name '{$name}' already exists - delete it first", E_USER_ERROR);
-                else {
-                    $settings['_creationOrder'] = $this->_creationCount++;
-                    $this->_controlSettings[$name] = $settings;
-                }
-        } else {
-            $this->_controlSettings = array($name => $settings);
-        }
+                $this->_controls[$name] = $settings;
+            }
+        $this->_orderedDisplayChildren = false;
     }
     
     protected function sortControlPrototypesByCreationOrder(array $prototypes) {
@@ -68,14 +65,14 @@
         if (is_object($prot1)) {
             $co1 = isset($prot1->_creationOrder)? $prot1->_creationOrder : 0;
         } elseif (is_array($prot1)) {
-            $co1 = isset($prot1['_creationOrder'])?  $prot1['_creationOrder'] : 0;
+            $co1 = isset($prot1['creationOrder'])?  $prot1['creationOrder'] : 0;
         } else {
             $co1 = 0;
         }
         if (is_object($prot2)) {
             $co2 = isset($prot2->_creationOrder)? $prot2->_creationOrder : 0;
         } elseif (is_array($prot2)) {
-            $co2 = isset($prot2['_creationOrder'])?  $prot2['_creationOrder'] : 0;
+            $co2 = isset($prot2['creationOrder'])?  $prot2['creationOrder'] : 0;
         } else {
             $co2 = 0;
         }
@@ -110,10 +107,6 @@
     }
     
     function listControls() {
-        if ($this->_controls === false) {
-            $this->_controls = array();
-            if (is_array($this->_controlSettings)) $this->addControls($this->_controlSettings);
-        }
         $res = array_keys($this->_controls);
         return $res;
     }
@@ -204,7 +197,6 @@
         if ($this->getDefaultFromModel) {
             if (!($this->readOnly === true) && isset($this->_rqData) && $this->_rqData) {
                 $res = & $this->getControlsValues();
-                //var_dump($this->name, $this->_rqData, $res);
             } else {
                 $res = $this->getDefault();
             }
@@ -243,10 +235,11 @@
             trigger_error ("Name in the settings of the sub control ('{$settings['name']}') does not match key in the array ('{$name}')", E_USER_WARNING);
         $settings['name'] = $name;
         $instanceId = $name;
+        $co = isset($settings['creationOrder'])? $settings['creationOrder'] : '-';
         $res = new $class ($context, $settings, $instanceId);
         if (isset($settings['displayParent'])) $res->setDisplayParent($settings['displayParent']);
             else $res->setDisplayParent($this);
-        if (isset($settings['_creationOrder'])) $res->_creationOrder = $settings['_creationOrder']; 
+        //if (isset($settings['_creationOrder'])) $res->_creationOrder = $settings['_creationOrder']; 
         return $res;
     }
     
@@ -257,7 +250,7 @@
     }
     
     function _doGetDefault() {
-        if (($m = & $this->getModel())) {
+        if (($m = & $this->getModel()) && !$this->dontGetDefaultFromModel) {
             if (strlen($p = $this->getPropertyName())) $res = $m->getField($p);
             elseif ($this->useGetterIfPossible && $g = $this->getGetterName()) $res = $m->$g();
             else $res = null;
@@ -273,8 +266,24 @@
         }
     }
     
+    function updateModel() {
+        $this->modelUpdated = true;
+        foreach ($this->listControls() as $c) {
+            $this->getControl($c)->updateModel();
+        }
+    }
     
+    function executeXhr() {
+        $xhrTarget = $this->_context->getData('xhrTarget', '');
+        if (strlen($xhrTarget) && ($c = $this->searchControlByPath($xhrTarget))) $c->executeXhr();
+            else $this->executeXhrCore();
+    }
     
+    function isXhr() {
+        $res = $this->_context->getData($this->_methodParamName) === 'xhr';
+        return $res;
+    }
+    
 }
 
 ?>
\ No newline at end of file
Index: Ae/Form/Control/Repeater.php
===================================================================
--- Ae/Form/Control/Repeater.php	(revision 249)
+++ Ae/Form/Control/Repeater.php	(revision 259)
@@ -2,8 +2,194 @@
 
 Ae_Dispatcher::loadClass('Ae_Form_Control');
 
-class Ae_Form_Control_Repeater extends Ae_Form_Control {
+class Ae_Form_Control_Repeater extends Ae_Form_Control_Composite {
 	
-	
-	
+	var $childPrototype = array();
+    
+    var $addControlPrototype = array();
+    
+    var $childNameTemplate = '{index}';
+    
+    var $indexPlaceholder = '{index}';
+    
+    var $parentPlaceholder = '{parent}';
+    
+    var $prototypePathsToReplace = array();
+    
+    var $minChildren = 1;
+    
+    var $maxChildren = false;
+    
+    var $templateClass = 'Ae_Form_Control_Template_Basic';
+    
+    var $templatePart = 'simpleList';
+    
+    var $reloadFormJs = '';
+    
+    var $canRemoveBelowMinChildren = true;
+    
+    /**
+     * Callback to function($repeater) that returns Javascript code to reload form (probably ithout submitting)
+     */
+    var $reloadFormCallback = false;
+    
+    /**
+     * Callback to function($repeater, $child) that should return TRUE if child is empty
+     */
+    var $checkChildEmptyCallback = false;
+    
+    var $removeControlText = '&nbsp;';
+    
+    var $removeControlAttribs = array();
+    
+    var $defaultNumChildren = 0;
+    
+    protected $controlsInit = false;
+    
+    function getNumChildren() {
+        $res = max($this->minChildren, (int) $this->_context->getData('numChildren', $this->defaultNumChildren));
+        if ($this->maxChildren !== false) $res = min($res, $this->maxChildren);
+        Ae_Util::setArrayByPath($this->_context->_baseUrl->query, Ae_Util::pathToArray($this->_context->mapParam('numChildren')), $res);
+        return $res;
+    }
+    
+    function processContextForRemoval() {
+        
+    }
+    
+    function listControls() {
+        if (!$this->controlsInit) $this->initControls();
+        return parent::listControls();
+    }
+    
+    /**
+     * @param string $name
+     * @return Ae_Form_Control
+     */
+    function getControl($name) {
+        if (!$this->controlsInit) $this->initControls();
+        return parent::getControl($name);
+    }
+    
+    protected function replacePlaceholders($string, $index) {
+        $res = strtr($string, array(
+            $this->indexPlaceholder => $index,
+            $this->parentPlaceholder => $this->name,
+        ));
+        return $res;
+    }
+    
+    protected function fixPrototype(array $prototype, $index) {
+        foreach($this->prototypePathsToReplace as $p) {
+            if (!is_null($val = Ae_Util::getArrayByPath($prototype, $p = Ae_Util::pathToArray($p))) && is_string($val)) {
+                Ae_Util::setArrayByPath($prototype, $p, $this->replacePlaceholders($val, $index));
+            }
+        }
+        return $prototype;
+    }
+    
+    protected function getReloadCode() {
+                
+        $submit = $this->reloadFormJs;
+        if (!strlen($submit)) {
+            if ($this->reloadFormCallback) {
+                $submit = $this->invokeCallback($this->reloadFormCallback, $this);
+            } else {
+                $form = $this->_getRootControl();
+                if ($form instanceof Ae_Form) {
+                    $submit = "document.".($form->getContext()->mapParam('')).".submit();";
+                }
+            }
+        }
+        
+        return $submit;
+
+    }
+    
+    protected function processChildrenRemoval() {
+        $n = $this->getNumChildren();
+        $d = $this->_context->getData();
+        for ($i = 0; $i < $n; $i++) {
+            if ((int) Ae_Util::getArrayByPath($d, array('remove', $i))) {
+                unset($d[$i]);
+                for ($j = $i + 1; $j < $n; $j++) {
+                    $d[$j - 1] = $d[$j];
+                    $d['remove'][$j - 1] = isset($d['remove'][$j])? $d['remove'][$j] : '';
+                }
+                $d['numChildren'] = --$n;
+                $i--;
+            }
+        }
+        $this->_context->setData($d);
+    }
+    
+    function initControls() {
+        $this->controlsInit = true;
+        $this->processChildrenRemoval();
+        $nc = $this->getNumChildren();
+        for ($i = 0; $i < $nc; $i++) {
+            $name = $this->replacePlaceholders($this->childNameTemplate, $i);
+            $prototype = $this->fixPrototype($this->childPrototype, $i);
+            $prototype['index'] = $i;
+            $this->addControl($name, $prototype);
+        }
+        
+        $submit = $this->getReloadCode();
+        
+        if (strlen($submit)) {
+            $onclick = "var c = document.getElementById(".new Ae_Js_Val($this->_context->mapIdentifier('numChildren'))."); c.value = (parseInt(c.value) || 0) + 1; ".$submit."; return false;";
+            
+            if ($this->maxChildren === false || ($this->maxChildren > $this->getNumChildren())) {
+
+                $addControl = array(
+                    'class' => 'Ae_Form_Control_Button',
+                    'buttonType' => 'button',
+                    'htmlAttribs' => array('onclick' => $onclick),
+                    'caption' => '+',
+                    'dontGetDefaultFromModel' => true,
+                );
+                if ($this->addControlPrototype) Ae_Util::ms($addControl, $this->addControlPrototype);
+                $this->addControl('addControl', $addControl);
+                
+            }
+        }
+        
+    }
+    
+    protected function canRemove($child) {
+        $res = ($child->index >= $this->minChildren) || $this->canRemoveBelowMinChildren;
+        return $res;
+    }
+    
+    protected function getRemoveControlLink($child, $content, $attribs) {
+        return Ae_Util::mkElement('a', $content, $attribs);
+    }
+    
+    function postProcessChildPresentation(& $html, Ae_Form_Control $child) {
+        if ($child->name !== 'addControl' && $this->canRemove($child)) {
+            $id = $this->_context->mapIdentifier('remove_'.$child->index);
+            $h = Ae_Util::mkElement('input', false, array('type' => 'hidden', 'id' => $id, 'name' => $this->_context->mapParam(array('remove', $child->index)), 'value' => ''));
+            $script = 'document.getElementById('.new Pm_Js_Val($id).').value = 1; '.$this->getReloadCode().' return false; ';
+            $content = $this->removeControlText;
+            $attribs = Ae_Util::m(array('href' => '#', 'class' => 'removeControl', 'onclick' => $script), $this->removeControlAttribs);
+            $a = $this->getRemoveControlLink($child, $content, $attribs);
+            $html = $h.$a.$html;
+        }
+    }
+    
+    protected function postProcessPresentation(& $html) {
+        $html = Ae_Util::mkElement('input', false, array(
+            'type' => 'hidden', 
+            'name' => $this->_context->mapParam('numChildren'), 
+            'id' => $this->_context->mapIdentifier('numChildren'), 
+            'value' => $this->getNumChildren(),
+            
+        )).$html;
+    }
+    
+    function _doGetDefault() {
+        return null;
+    }
+
+    
 }
\ No newline at end of file
Index: Ae/Form/Control/Button.php
===================================================================
--- Ae/Form/Control/Button.php	(revision 249)
+++ Ae/Form/Control/Button.php	(revision 259)
@@ -23,6 +23,9 @@
     
     var $templatePart = 'button';
     
+    /**
+     * @var string 'submit', 'cancel', 'button'
+     */
     var $buttonType = 'submit';
     
     var $showsOwnCaption = true;
@@ -49,6 +52,9 @@
         return $res;
     }
     
+    function updateModel() {
+    }
+    
 }
 
 ?>
\ No newline at end of file
Index: Ae/Form/Control/Upload.php
===================================================================
--- Ae/Form/Control/Upload.php	(revision 249)
+++ Ae/Form/Control/Upload.php	(revision 259)
@@ -7,7 +7,7 @@
     var $templatePart = 'upload';
     
     function getFileParamName() {
-        $res = md5($this->_context->mapParam('value'));
+        $res = md5($pv = $this->_context->mapParam('value'));
         return $res;
     }
     
Index: Ae/Form/Control/Template/Basic.php
===================================================================
--- Ae/Form/Control/Template/Basic.php	(revision 249)
+++ Ae/Form/Control/Template/Basic.php	(revision 259)
@@ -37,11 +37,11 @@
     /**
      * @param Ae_Form_Control $control
      */
-    function showDivsList($control) {
+    function showDivsList($control, $wrap = null) {
 ?>
 
         <div <?php echo Ae_Util::mkAttribs($control->getHtmlAttribs()); ?> >
-<?php       $this->utlShowDivsList($control->getOrderedDisplayChildren());     
+<?php       $this->utlShowDivsList($control->getOrderedDisplayChildren(), $wrap);     
 ?>
         </div>
 <?php
@@ -173,7 +173,7 @@
      */
     function showDivWrapper ($control, $html) {
 ?>
-    <div class='control<?php if($errors = $control->getErrors()) echo ' withErrors'; ?>'>
+    <div class='wrapper control<?php if($errors = $control->getErrors()) echo ' withErrors'; ?>'>
         <div class='caption'>
             <?php $this->_showCaption($control, true, ""); ?>
             <?php if ($control->isRequired()) $this->_showCoolRequiredAsterisk($control); ?>
@@ -356,7 +356,7 @@
 ?>            
             <<?php echo $control->tagName; ?> <?php echo Ae_Util::mkAttribs($attribs); ?>>
                 <?php if (strlen($control->getValue())) $this->d ($control->getValue(), $control->allowHtml); else $this->d($control->getEmptyCaption()); ?>
-            </ <?php echo $control->tagName; ?>>       
+            </<?php echo $control->tagName; ?>>       
 <?php   
     }
     
@@ -365,14 +365,22 @@
      */
     function showButton($control) {
         $name = $this->_mapNames($control, 'value');
-        $attribs = Ae_Util::m($this->_getAttribs($control), array(
-            'type' => $control->buttonType,
-            'name' => $name,
-            'value' => $control->getButtonCaption(),
-        ));
+        if ($control->buttonType === 'button') {
+            $attribs = Ae_Util::m($this->_getAttribs($control), array(
+                'name' => $name,
+            ));
+            echo Ae_Util::mkElement('button', $control->getButtonCaption(), $attribs);
+        } else {
+            $name = $this->_mapNames($control, 'value');
+            $attribs = Ae_Util::m($this->_getAttribs($control), array(
+                'type' => $control->buttonType,
+                'name' => $name,
+                'value' => $control->getButtonCaption(),
+            ));
 ?>
         <input <?php echo Ae_Util::mkAttribs($attribs); ?> />
 <?php
+        }
     }
     
     /**
@@ -497,7 +505,8 @@
         else {
             if ($group->style == 'table') $this->showTable($group);
             elseif ($group->style == 'horizontal') $this->showHTable($group);
-                else $this->showSimpleList($group);
+            elseif ($group->style == 'divsList') $this->showDivsList ($group, 'divWrapper');
+            else $this->showSimpleList($group);
         }
         if (strlen($group->postHtml)) echo $group->postHtml;
     }
Index: Ae/Form/Control/Template/Placeholders.php
===================================================================
--- Ae/Form/Control/Template/Placeholders.php	(revision 249)
+++ Ae/Form/Control/Template/Placeholders.php	(revision 259)
@@ -42,6 +42,9 @@
                     } else {
                         $val = '';
                     }
+                } elseif (!strncmp($mc = trim($matches[1]), 'own:', 4)) {
+                	$propId = substr($matches[1], 4);
+                    $val = Ae_Autoparams::getObjectProperty($control, trim($propId));
                 } elseif (substr(trim($matches[1]), 0, 1) == '#') {
                     $path = substr(trim($matches[1]), 1);
                     if (($c = $control->getControlByPath($path)) && ($c->getDisplayParent() === $control)) {
Index: Ae/Form/Control.php
===================================================================
--- Ae/Form/Control.php	(revision 249)
+++ Ae/Form/Control.php	(revision 259)
@@ -216,6 +216,8 @@
     
     var $_presentationWithWrapper = false;
     
+    var $dontGetDefaultFromModel = false;
+    
     /**
      * Model that provides current control with the values and error info (or FALSE if no model is provided)
      * @access protected
@@ -257,8 +259,10 @@
     
     var $_submitted = '?';
     
-    var $_creationOrder = false;
+    var $_creationOrder = null;
     
+    var $index = false;
+    
     var $decorator = false;
     
     function doInitProperties($options = array()) {
@@ -279,6 +283,9 @@
         $tmp = $options;
         foreach (array('default', 'parent', 'model', 'modelProperty') as $opt) unset($tmp[$opt]);
         if (isset($options['name'])) $this->name = $options['name'];
+        if (isset($options['creationOrder'])) {
+            $this->_creationOrder = $options['creationOrder'];
+        }
         Ae_Util::bindAutoparams($this, $options);
     }
     
@@ -421,6 +428,14 @@
         else $res = false; 
     }
     
+    function getDebugCaption() {
+        return $this->name.' - '.$this->displayOrder.' / '.$this->_creationOrder;
+    }
+    
+    function dumpControlNames($arr) {
+        var_dump(Ae_Autoparams::getObjectProperty($arr, 'debugCaption'));
+    }
+    
     function getOrderedDisplayChildren() {
         if ($this->_orderedDisplayChildren === false) {
             $this->_doInitDisplayChildren();
@@ -480,7 +495,10 @@
             trigger_error ("\$path must be a string or an array; use Ae_Form_Control::searchControlByPathRef() to supply Ae_Form_Control references instead", E_USER_ERROR);
         $curr = $this;
         if (!is_array($path)) $path = explode('/', $path);
-        if (!strlen($path[0])) $curr = $curr->_getRootControl();
+        if (!strlen($path[0])) {
+            $curr = $curr->_getRootControl();
+            $path = array_slice($path, 1);
+        }
         while ($curr && count($path)) {
             $segment = $path[0];
             //var_dump(get_class($curr), get_class($curr->_parent), $segment);
@@ -530,6 +548,7 @@
                     $template = & $this->getTemplate();
                     $template->setVars($this->tplExtras);
                     $this->_presentation = $template->fetch($this->templatePart, $this->_doGetTemplatePartParams());
+                    $this->postProcessPresentation($this->_presentation);
                 }
                 $res = $this->_presentation;
             }
@@ -539,6 +558,13 @@
         }
     }
     
+    function postProcessChildPresentation(& $html, Ae_Form_Control $child) {
+    }
+    
+    protected function postProcessPresentation(& $html) {
+        if ($this->_parent) $this->_parent->postProcessChildPresentation($html, $this);
+    }
+    
     function fetchWithWrapper($refresh = false) {
         if ($this->isVisible()) {
             if ($this->_presentationWithWrapper === false || $refresh) {
@@ -806,8 +832,10 @@
      * Should return default value
      */
     function _doGetDefault() {
-        if (($m = & $this->getModel())) {
-            if (strlen($p = $this->getPropertyName())) $res = $m->getField($p);
+        if (($m = & $this->getModel()) && !$this->dontGetDefaultFromModel) {
+            if (strlen($p = $this->getPropertyName())) {
+                $res = $m->getField($p);
+            }
             elseif ($this->useGetterIfPossible && $g = $this->getGetterName()) $res = $m->$g();
             else $res = null;
         }
@@ -892,12 +920,19 @@
         return $res;
     }
     
+    function getPath() {
+        return $this->_getPath();
+    }
+    
     /**
      * @return Ae_Form_Control
+     * @param string $class Find parent control of specified class
      */
-    function & _getRootControl() {
+    function & _getRootControl($class = false) {
         $curr = & $this;
-        while ($curr->_parent) $curr = & $curr->_parent;
+        while ($curr->_parent && ($class === false || !($curr instanceof $class)))
+            $curr = & $curr->_parent;
+        if ($class !== false && !($curr instanceof $class)) $curr = null;
         return $curr;
     }
     
@@ -914,6 +949,48 @@
         $this->_gotValue = true;
     }
     
+    function updateModel() {
+        if (($m = $this->getModel()) && strlen($p = $this->getPropertyName()) && $m->hasProperty($p)) {
+            $m->setField($p, $this->getValue());
+        }
+    }
+    
+    function executeXhr() {
+        $this->executeXhrCore();
+    }
+    
+    function executeXhrCore() {
+    }
+    
+    function getXhrId() {
+        $res = $this->_getPath();
+        return $res;
+    }
+    
+    function getXhrUrl() {
+        $ctx = $this->_context->cloneObject();
+        $f = $this->_getRootControl();
+        Ae_Util::setArrayByPath($ctx->_baseUrl->query, Ae_Util::pathToArray($f->getContext()->mapParam($f->_methodParamName)), 'xhr');
+        Ae_Util::setArrayByPath($ctx->_baseUrl->query, Ae_Util::pathToArray($f->getContext()->mapParam('xhrTarget')), $this->getXhrId());
+        $res = $ctx->getUrl(array(), false);
+        return $res;
+    }
+    
+    function invokeCallback($callback) {
+        $res = null;
+        if ($callback) {
+            $args = func_get_args();
+            $args = array_slice($args, 1);
+            if (is_array($callback) && isset($callback[0])) {
+                if (is_object($callback[0]) && ($callback[0] instanceof Ae_Form_Control_Path)) {
+                    $callback[0] = $callback[0]->getControl($this, true);
+                }
+            }
+            $res = call_user_func_array($callback, $args);
+        }
+        return $res;
+    }
+    
 }
 
 ?>
\ No newline at end of file
Index: Ae/Util.php
===================================================================
--- Ae/Util.php	(revision 249)
+++ Ae/Util.php	(revision 259)
@@ -650,9 +650,9 @@
      * Converts 'foo_bar' to 'Foo_Bar'
      */
     static function fixClassName($className) {
-        $className = str_replace("_", " ", $className);
+        /*$className = str_replace("_", " ", $className);
         $className = ucwords($className);
-        $className = str_replace(" ", "_", $className);
+        $className = str_replace(" ", "_", $className);*/
         return $className;
     }
     
@@ -751,7 +751,7 @@
         $cells[] = $headerRow;
         foreach ($tableData as $k => $row) {
             $rowCells = array();
-            if (isset($rowTitles[$k])) $rowCells[] = $rowTitles[$k]; else $rowCells = '';
+            if (isset($rowTitles[$k])) $rowCells[] = $rowTitles[$k]; else $rowCells[] = '';
             foreach ($colsList as $col) $rowCells[] = isset($row[$col])? $row[$col] : '';
             $cells[] = $rowCells;
         }
Index: Ae/Table/Column/Published.php
===================================================================
--- Ae/Table/Column/Published.php	(revision 249)
+++ Ae/Table/Column/Published.php	(revision 259)
@@ -14,13 +14,13 @@
     
     function getPublishedImg() {
         if (isset($this->settings['publishedImg'])) $res = $this->settings['publishedImg'];
-            else $res = 'publish_g.png';
+            else $res = 'images/publish_g.png';
         return $res;
     }
     
     function getUnpublishedImg() {
         if (isset($this->settings['unpublishedImg'])) $res = $this->settings['unpublishedImg'];
-            else $res = 'publish_x.png';
+            else $res = 'images/publish_x.png';
         return $res;
     }
     
Index: Ae/Legacy/Database/MsSql.php
===================================================================
--- Ae/Legacy/Database/MsSql.php	(revision 249)
+++ Ae/Legacy/Database/MsSql.php	(revision 259)
@@ -76,7 +76,6 @@
         $this->queryCount++;
         if ($this->trackQueries) $this->queries[] = $this->_sql;
         if ($this->_useSqlSrv) {
-		Pm_Conversation::log($this->_sql);
         	$mres = sqlsrv_query($this->_getConnection(), $this->_sql);
         	if (($mres === false) && !$this->skipNextError) {
         		var_dump($this->_sql, $this->_getSqlSrvErrors());
Index: Ae/Getter.php
===================================================================
--- Ae/Getter.php	(revision 0)
+++ Ae/Getter.php	(revision 259)
@@ -0,0 +1,27 @@
+<?php
+
+class Ae_Getter implements Ae_I_Getter {
+    
+    protected $path = array();
+    protected $isMultiple = false;
+    
+    function __construct($path, $isMultiple = false) {
+        $this->isMultiple = $isMultiple;
+        if (!$this->isMultiple) {
+            if (!is_array($path)) $path = Ae_Util::pathToArray($path);
+        }
+        $this->path = $path;
+    }
+    
+    function get($object, $defaultValue = null) {
+        if ($this->isMultiple) $res = Ae_Autoparams::getObjectProperty ($object, $this->path, $defaultValue);
+        else $res = Ae_Autoparams::getObjectPropertyByPath($object, $this->path, $defaultValue);
+        return $res;
+    }
+    
+    function __toString() {
+        $res = $this->isMultiple? implode(", ", Ae_Util::toArray($this->path)) : Ae_Util::arrayToPath($this->path);
+        return $res;
+    }
+    
+}
\ No newline at end of file
Index: Ae/Decorator/Multi.php
===================================================================
--- Ae/Decorator/Multi.php	(revision 249)
+++ Ae/Decorator/Multi.php	(revision 259)
@@ -65,7 +65,7 @@
     function apply($value) {
         $res = $value;
         foreach ($this->decorators as $d) {
-            $res = $d->apply($value);
+            $res = $d->apply($res);
         }
         return $res;
     }
Index: Ae/Image/Processor/Gd.php
===================================================================
--- Ae/Image/Processor/Gd.php	(revision 249)
+++ Ae/Image/Processor/Gd.php	(revision 259)
@@ -24,7 +24,7 @@
     function _doOnSetFile() {
         $r = & $this->_getResizer();
         $r->setImage($this->_filePath);
-        if (strlen($e = $r->error())) $this->error = $e;
+        if (strlen($e = $r->error())) $this->_error = $e;
         $this->_type = $r->imgType;
         $this->_width = $r->imgWidth;
         $this->_height = $r->imgHeight;
Index: Ae/Image/Upload/Controller/Template.php
===================================================================
--- Ae/Image/Upload/Controller/Template.php	(revision 249)
+++ Ae/Image/Upload/Controller/Template.php	(revision 259)
@@ -3,48 +3,48 @@
 Ae_Dispatcher::loadClass('Ae_Upload_Controller_Template');
 
 class Ae_Image_Upload_Controller_Template extends Ae_Upload_Controller_Template {
-
-    var $langWidth = 'Width';
-
-    var $langHeight = 'Height';
-    
-    /**
-     * @var Ae_Image_Upload
-     */
-    var $upload = false;
-    
-    /**
-     * @var Ae_Image_Upload
-     */
-    var $newUpload = false;
-    
-    protected function rShowUpload() {
-        if ($this->upload) {
-?>
-        <div>
-            <b><?php echo($this->langFileToUpload); ?></b>
-            <br />
-            <?php echo $this->upload->getImgTag(array(), true); ?>
-            <br />
-            <?php echo $this->langWidth.': '.$this->upload->getWidth(); ?><br />
-            <?php echo $this->langHeight.': '.$this->upload->getHeight(); ?><br />
-            <?php echo $this->langFilename.': '.$this->upload->getFilename(); ?><br />
-            <?php echo $this->langMimeType.': '.$this->upload->getMimeType(); ?><br />
-            <?php echo $this->langFilesize.': '.$this->upload->getContentSize(); ?><br />
-        </div>
-<?php       
-        }
-    }
-    
-    function showThumb() {
-        $this->htmlResponse->extraHeaders[] = 'Content-Type: '.$this->upload->getMimeType();
-        $this->htmlResponse->extraHeaders[] = 'Content-Disposition: inline; filename=thumb-'.$this->upload->getFilename();
-        $this->htmlResponse->noHtml = true;
-        $this->htmlResponse->noWrap = true;
-        echo $this->upload->getThumbnail();
-    }
-    
-        
-}
 
+    var $langWidth = 'Width';
+
+    var $langHeight = 'Height';
+    
+    /**
+     * @var Ae_Image_Upload
+     */
+    var $upload = false;
+    
+    /**
+     * @var Ae_Image_Upload
+     */
+    var $newUpload = false;
+    
+    protected function rShowUpload() {
+        if ($this->upload) {
+?>
+        <div>
+            <b><?php echo($this->langFileToUpload); ?></b>
+            <br />
+            <?php echo $this->upload->getImgTag(array(), true); ?>
+            <br />
+            <?php echo $this->langWidth.': '.$this->upload->getWidth(); ?><br />
+            <?php echo $this->langHeight.': '.$this->upload->getHeight(); ?><br />
+            <?php echo $this->langFilename.': '.$this->upload->getFilename(); ?><br />
+            <?php echo $this->langMimeType.': '.$this->upload->getMimeType(); ?><br />
+            <?php echo $this->langFilesize.': '.$this->upload->getContentSize(); ?><br />
+        </div>
+<?php       
+        }
+    }
+    
+    function showThumb() {
+        $this->htmlResponse->extraHeaders[] = 'Content-Type: '.$this->upload->getMimeType();
+        $this->htmlResponse->extraHeaders[] = 'Content-Disposition: inline; filename="thumb-'.$this->upload->getFilename().'"';
+        $this->htmlResponse->noHtml = true;
+        $this->htmlResponse->noWrap = true;
+        echo $this->upload->getThumbnail();
+    }
+    
+        
+}
+
 ?>
\ No newline at end of file
Index: Ae/Image/Upload/Controller.php
===================================================================
--- Ae/Image/Upload/Controller.php	(revision 249)
+++ Ae/Image/Upload/Controller.php	(revision 259)
@@ -3,28 +3,26 @@
 Ae_Dispatcher::loadClass('Ae_Upload_Controller');
 
 class Ae_Image_Upload_Controller extends Ae_Upload_Controller {
-
-    var $defaultUploadManagerClass = 'Ae_Image_Upload_Manager';
-
-    var $canShowThumbs = true;
-    
-    var $_templateClass = 'Ae_Image_Upload_Controller_Template';    
-
-    function _getPreparedUploadManagerOptions() {
-        $u = parent::_getPreparedUploadManagerOptions();
-        if ($this->canShowThumbs && !isset($u['thumbLink'])) {
-            $u['thumbLink'] = $this->getPartialUrlWithOpenParam('uploadId', array('action' => 'thumb'));
-        }
-        return $u;
-    }
-    
-    function executeThumb() {
-        if ($this->canShowThumbs) {
-            if ($u = & $this->getUpload()) $this->_templatePart = 'thumb';
-                else $this->_templatePart = '404'; 
-        } else $this->_templatePart = '404';
-    }
-    
-}
 
-?>
\ No newline at end of file
+    var $defaultUploadManagerClass = 'Ae_Image_Upload_Manager';
+
+    var $canShowThumbs = true;
+    
+    var $_templateClass = 'Ae_Image_Upload_Controller_Template';    
+
+    function _getPreparedUploadManagerOptions() {
+        $u = parent::_getPreparedUploadManagerOptions();
+        if ($this->canShowThumbs && !isset($u['thumbLink'])) {
+            $u['thumbLink'] = $this->getPartialUrlWithOpenParam('uploadId', array('action' => 'thumb'));
+        }
+        return $u;
+    }
+    
+    function executeThumb() {
+        if ($this->canShowThumbs) {
+            if ($u = & $this->getUpload()) $this->_templatePart = 'thumb';
+                else $this->_templatePart = '404'; 
+        } else $this->_templatePart = '404';
+    }
+    
+}
Index: Ae/Legacy/Controller/Context/Http.php
===================================================================
--- Ae/Legacy/Controller/Context/Http.php	(revision 249)
+++ Ae/Legacy/Controller/Context/Http.php	(revision 259)
@@ -243,6 +243,14 @@
         return $res;
     }
     
+    function updateData($values = array(), $byPath = false) {
+        if ($byPath) {
+            $v = array();
+            Ae_Util::setArrayByPath($v, $this->_arrDataPath, $values);
+            $values = $v;
+        }
+        return parent::updateData($values);
+    }
     
 }
 
Index: Ae/Legacy/Controller/Response.php
===================================================================
--- Ae/Legacy/Controller/Response.php	(revision 249)
+++ Ae/Legacy/Controller/Response.php	(revision 259)
@@ -84,9 +84,10 @@
     function toArray() {
         $res = array();
         $vars = Ae_Util::getClassVars(get_class($this));
+        $vars1 = get_object_vars($this);
         foreach ($this->listArrayIgnore() as $varName) unset($vars[$varName]);
         foreach ($vars as $varName => $def) {
-            if ($varName{0} != '_' && ($this->$varName !== $def)) $res[$varName] = $this->$varName;
+            if (array_key_exists($varName, $vars1) && $varName{0} != '_' && ($this->$varName !== $def)) $res[$varName] = $this->$varName;
         }
         return $res;
     }
Index: Ae/Legacy/Controller/Context.php
===================================================================
--- Ae/Legacy/Controller/Context.php	(revision 249)
+++ Ae/Legacy/Controller/Context.php	(revision 259)
@@ -119,7 +119,7 @@
     function & cloneObject() {
         $className = Ae_Util::fixClassName(get_class($this));
         Ae_Dispatcher::loadClass($className);
-        $res = new $className;
+        $res = new $className();
         $res->assign($this);
         return $res;
     }
Index: Ae/Legacy/Controller/Std/Web.php
===================================================================
--- Ae/Legacy/Controller/Std/Web.php	(revision 249)
+++ Ae/Legacy/Controller/Std/Web.php	(revision 259)
@@ -198,6 +198,10 @@
     function doOnResponseStart() {
         $this->bindFromRequest();
     }
+    
+    function getCacheEnabled() {
+        return true;
+    }
 
     /**
      * @return Ae_Legacy_Controller_Response_Html
@@ -205,7 +209,7 @@
     function getResponse($methodName = false) {
         if ($methodName !== false) $this->_methodName = $methodName;
         $this->doOnResponseStart();
-        if (!$this->cacheSkip) {
+        if (!$this->cacheSkip && $this->getCacheEnabled()) {
             $this->loadFromCache();
             Ae_Debug_FirePHP::getInstance()->log ($this->loadedFromCache .'/'.(is_object($this->_response)? get_class($this->_response) : gettype($this->_response)), $this->getMethodName().'::loadedFromCache');
         }
@@ -226,7 +230,7 @@
                     $this->_response = $res;
                 }
             }
-            if (!$this->cacheSkip) $this->saveToCache();
+            if (!$this->cacheSkip && $this->getCacheEnabled()) $this->saveToCache();
         } catch (Pp_Exception $e) {
             $this->_tplData['exception'] = $e;
             $this->_response = false;
Index: Ae/Legacy/Controller/Std/Admin/Template.php
===================================================================
--- Ae/Legacy/Controller/Std/Admin/Template.php	(revision 249)
+++ Ae/Legacy/Controller/Std/Admin/Template.php	(revision 259)
@@ -46,7 +46,7 @@
             $this->htmlResponse->redirectUrl = $bu;
         } else {
             $bu = $this->controller->getUrl(array('action' => 'manager', 'mapper' => $this->context->getData('mapper')));
-            $formAttribs = array('action' => $bu->toString(false), 'method' => 'post', 'name' => 'aForm', 'id' => 'aForm');
+            $formAttribs = array('action' => $bu->toString(false), 'method' => 'post', 'name' => 'aForm', 'id' => 'aForm',  'enctype' => 'multipart/form-data');
             $this->htmlResponse->mergeWithResponse($this->managerResponse);
             ob_start(); 
 ?>
Index: Ae/Legacy/Controller/Response/Json.php
===================================================================
--- Ae/Legacy/Controller/Response/Json.php	(revision 249)
+++ Ae/Legacy/Controller/Response/Json.php	(revision 259)
@@ -1,6 +1,8 @@
 <?php
 
 class Ae_Legacy_Controller_Response_Json extends Ae_Legacy_Controller_Response_Html {
+    
+    static $skipJsonComments = false;
 
 	var $contentType = 'text/javascript; charset=utf-8';
 	
@@ -121,7 +123,8 @@
 				$res[$k] = $v;
 			}
 			if (isset($res['jsonComments']) && strlen($res['jsonComments'])) {
-			    $jc .= "\n" .$res['jsonComments'];
+                if (!Ae_Legacy_Controller_Response_Json::$skipJsonComments) 
+                    $jc .= "\n" .$res['jsonComments'];
 			} 
 			unset($res['jsonComments']);
 			if (isset($res['content'])) {
@@ -129,21 +132,21 @@
                 if ($this->autoExtractScripts) {
                     $cs = self::extractScripts($content);
                     foreach ($cs as $i => $part) {
-                        if ($part instanceof Pm_Js_Script) {
+                        if ($part instanceof Ae_Js_Script) {
                             $res['afterScript'][] = $part;
                             unset($cs[$i]);
                         }
                     }
                     $content = implode('', $cs);
                 }
-                $res['content'] = new Pm_Js_String($content, true);
+                $res['content'] = new Ae_Js_String($content, true);
             }
     		$allRes[] = $res;
         }
         if (count($allRes) == 1) $allRes = $allRes[0];
         if (!$asArray) {
-            $allRes = (string) new Pm_Js_Val($allRes);
-            if (strlen($jc)) {
+            $allRes = (string) new Ae_Js_Val($allRes);
+            if (!Ae_Legacy_Controller_Response_Json::$skipJsonComments && strlen($jc)) {
                 $jc = str_replace("/*", "", $jc);
                 $jc = str_replace("*/", "", $jc);
                 $allRes .= "\n\n/*\n".$jc."\n*/";
@@ -161,14 +164,14 @@
         if (preg_match_all($preg, $content, $arr, PREG_OFFSET_CAPTURE | PREG_SET_ORDER)) {
             foreach ($arr as $item) {
                 $data = substr($content, $left, $item[0][1] - $left);
-                if ($isScript) $data = new Pm_Js_Script($data);
+                if ($isScript) $data = new Ae_Js_Script($data);
                 $res[] = $data;
                 $isScript = strlen($item[1][0]);
                 $left = $item[0][1] + strlen($item[0][0]);
             }
         }
         $data = substr($content, $left);
-        if ($isScript) $data = new Pm_Js_Script($data);
+        if ($isScript) $data = new Ae_Js_Script($data);
         $res[] = $data;
         return $res;
     }
@@ -183,4 +186,15 @@
 		return $res;
 	}
     
+    function mergeWithResponse (& $subResponse, $withTitleAndPathway = true, $putContent = false) {
+        parent::mergeWithResponse($subResponse, $withTitleAndPathway, $putContent);
+        if ($subResponse instanceof Ae_Legacy_Controller_Response_Json) {
+            if ($subResponse->forwardUndeclaredVars) {
+                $this->forwardUndeclaredVars = true;
+                foreach (self::getUndeclaredVars($subResponse) as $k => $v) $this->$k = $v;
+            }
+           Ae_Util::ms($this->values, $subResponse->values);
+        }
+    }
+    
 }
\ No newline at end of file
Index: Ae/Legacy/Controller/Response/JsonPart.php
===================================================================
--- Ae/Legacy/Controller/Response/JsonPart.php	(revision 249)
+++ Ae/Legacy/Controller/Response/JsonPart.php	(revision 259)
@@ -31,8 +31,8 @@
     
     function screen($string) {
         if (is_object($string)) {
-            $v = new Pm_Js_Var($string);
-            $res = $v->toJson();
+            $v = new Ae_Js_Var($string);
+            $res = $v->toJs();
         } else $res = addcslashes($string, "'\"\n\r\t\0\\");
         return $res;
     }
Index: Ae/Upload/Controller/Template.php
===================================================================
--- Ae/Upload/Controller/Template.php	(revision 249)
+++ Ae/Upload/Controller/Template.php	(revision 259)
@@ -1,200 +1,203 @@
 <?php
 
 class Ae_Upload_Controller_Template extends Ae_Template_Html {
-    
-    var $langFileToUpload = 'File to upload';
-    var $langFilename = 'Filename';
-    var $langMimeType = 'Mime type';
-    var $langFilesize = 'File size';
-    var $langUploadAnotherFile = 'Upload another file';
-    var $langUseThisFile = 'Use this file';
-    var $langReplaceFile = 'Replace file';
-    var $langUploadFile = 'Upload file';
-    var $langCancel = 'Cancel';
-    var $langUploadFailed = 'File upload failed';
-    var $langNoUpload = 'No file uploaded';
-    var $langUploadNewFile = 'Upload new file';
-    var $langDownloadFile = 'Download file';
-    
-    var $readOnly = false;
-    var $retFieldName = false;
-    var $retFormName = false;
-    var $retLabelId = false;
-    var $error = false;
-    var $paramName = false;
-    var $newUploadId = false;
-    var $uploadWindowUrl = false;
-    
+    
+    var $langFileToUpload = 'File to upload';
+    var $langFilename = 'Filename';
+    var $langMimeType = 'Mime type';
+    var $langFilesize = 'File size';
+    var $langUploadAnotherFile = 'Upload another file';
+    var $langUseThisFile = 'Use this file';
+    var $langReplaceFile = 'Replace file';
+    var $langUploadFile = 'Upload file';
+    var $langCancel = 'Cancel';
+    var $langUploadFailed = 'File upload failed';
+    var $langNoUpload = 'No file uploaded';
+    var $langUploadNewFile = 'Upload new file';
+    var $langDownloadFile = 'Download file';
+    var $langMaxUploadSize = 'File size should not exceed %s';
+    
+    var $readOnly = false;
+    var $retFieldName = false;
+    var $retFormName = false;
+    var $retLabelId = false;
+    var $error = false;
+    var $paramName = false;
+    var $newUploadId = false;
+    var $uploadWindowUrl = false;
+    
     var $uploadCharset = false;
     
-    var $fileChangeFn = false;
-    
-    /**
-     * @var Ae_Upload_Controller
-     */
-    var $controller = false;
-    
-    /**
-     * @var Ae_Url
-     */
-    var $url = false;
-    
-    /**
-     * @var Ae_Upload_File
-     */
-    var $upload = false;
-    
-    /**
-     * @var Ae_Upload_File
-     */
-    var $newUpload = false;
-    
-    protected function rShowUpload() {
-        if ($this->upload) {
-?>
-        <div>
-            <b><?php echo($this->langFileToUpload); ?></b>
-            <br />
-            <?php echo $this->langFilename.': '.$this->upload->getFilename(); ?><br />
-            <?php echo $this->langMimeType.': '.$this->upload->getMimeType(); ?><br />
-            <?php echo $this->langFilesize.': '.$this->upload->getContentSize(); ?><br />
-        </div>
-<?php       
-        }
-        
-}
-    
-    function showClose() {
-?>
-        <script type='text/javascript'>
-            window.close();
-        </script>
-<?php
-    }
-    
-    function showRetVal() {
-        $this->htmlResponse->noWrap = true;
-        if ($this->upload) {
-?>
-        <script type='text/javascript'>
-            var field, lbl;
-<?php       if (strlen($this->retFieldName)) { ?>
-            if ((field = window.opener.document.getElementById(<?php $this->echoJson($this->retFieldName); ?>))) {
+    var $fileChangeFn = false;
+    
+    /**
+     * @var Ae_Upload_Controller
+     */
+    var $controller = false;
+    
+    /**
+     * @var Ae_Url
+     */
+    var $url = false;
+    
+    /**
+     * @var Ae_Upload_File
+     */
+    var $upload = false;
+    
+    /**
+     * @var Ae_Upload_File
+     */
+    var $newUpload = false;
+    
+    protected function rShowUpload() {
+        if ($this->upload) {
+?>
+        <div>
+            <b><?php echo($this->langFileToUpload); ?></b>
+            <br />
+            <?php echo $this->langFilename.': '.$this->upload->getFilename(); ?><br />
+            <?php echo $this->langMimeType.': '.$this->upload->getMimeType(); ?><br />
+            <?php echo $this->langFilesize.': '.$this->upload->getContentSize(); ?><br />
+        </div>
+<?php       
+        }
+        
+}
+    
+    function showClose() {
+?>
+        <script type='text/javascript'>
+            window.close();
+        </script>
+<?php
+    }
+    
+    function showRetVal() {
+        $this->htmlResponse->noWrap = true;
+        if ($this->upload) {
+?>
+        <script type='text/javascript'>
+            var field, lbl;
+<?php       if (strlen($this->retFieldName)) { ?>
+            if ((field = window.opener.document.getElementById(<?php $this->echoJson($this->retFieldName); ?>))) {
                 field.value = <?php $this->echoJson($this->upload->getId()); ?>;
             }
 <?php       if ($this->fileChangeFn) { ?>
                 window.fileChangeFn = <?php echo $this->fileChangeFn; ?>;
                 window.fileChangeFn(<?php $this->echoJson($this->upload->getId()); ?>);
-<?php       } ?>             
-<?php       } ?>
-<?php       if (strlen($this->retLabelId)) { ?>
-            if ((lbl = window.opener.document.getElementById(<?php $this->echoJson($this->retLabelId); ?>))) {
-                lbl.innerHTML = <?php $this->echoJson($this->upload->getDescr()); ?>;
-            } 
-<?php       } ?>
-        </script>
-<?php   $this->showClose(); ?>
-
-<?php
-        }
-    }
-    
-    function showDefault() {
-        $this->htmlResponse->noWrap = true;
-?>
-        <div>
-<?php       if ($this->error) { ?>
-            <p style='color: red; text-align: center'><?php echo htmlspecialchars($this->error); ?></p>
-<?php       } ?>
-            <?php $this->openFormElement(array(), array('enctype' => 'multipart/form-data', 'method' => 'post')); ?>
-<?php           if ($this->upload) { ?>
-<?php           $this->rShowUpload(); ?>
-                <input type='submit' name='<?php $this->mapParam('ok'); ?>' value=<?php echo($this->langUseThisFile ); ?> />
-                <p><?php echo($this->langUploadAnotherFile); ?></p> 
-<?php           } ?>
-                <input type='file' name='<?php $this->mapParam('file') ?>' />
-                <input type='submit' name='<?php $this->mapParam('upload'); ?>' value='<?php if ($this->upload) { echo($this->langReplaceFile);  } else { echo($this->langUploadFile);  } ?>' />
-                <br />
-                <br />
-                <input type='submit'  name='<?php $this->mapParam('cancel'); ?>' value='<?php echo($this->langCancel); ?>' />
-            </form>
-        </div>
-<?php
-    }
-    
-    function showUploadItem() {
+<?php       } ?>             
+<?php       } ?>
+<?php       if (strlen($this->retLabelId)) { ?>
+            if ((lbl = window.opener.document.getElementById(<?php $this->echoJson($this->retLabelId); ?>))) {
+                lbl.innerHTML = <?php $this->echoJson($this->upload->getDescr()); ?>;
+            } 
+<?php       } ?>
+        </script>
+<?php   $this->showClose(); ?>
+
+<?php
+        }
+    }
+    
+    function showDefault() {
+        $this->htmlResponse->noWrap = true;
+?>
+        <div>
+<?php       if ($this->error) { ?>
+            <p style='color: red; text-align: center'><?php echo htmlspecialchars($this->error); ?></p>
+<?php       } ?>
+            <?php $this->openFormElement(array(), array('enctype' => 'multipart/form-data', 'method' => 'post'), false); ?>
+<?php           if ($this->upload) { ?>
+<?php           $this->rShowUpload(); ?>
+                <input type='submit' name='<?php $this->mapParam('ok'); ?>' value=<?php echo($this->langUseThisFile ); ?> />
+                <p><?php echo($this->langUploadAnotherFile); ?></p> 
+<?php           } ?>
+                <input type='file' name='<?php $this->mapParam('file') ?>' />
+                <input type='submit' name='<?php $this->mapParam('upload'); ?>' value='<?php if ($this->upload) { echo($this->langReplaceFile);  } else { echo($this->langUploadFile);  } ?>' />
+                <br />
+<?php           if (strlen($s = $this->controller->getMaxUploadSize())) { ?>
+                <p><?php echo(sprintf($this->langMaxUploadSize, $s)); ?></p>
+<?php           } ?>                
+                <br />
+                <input type='submit'  name='<?php $this->mapParam('cancel'); ?>' value='<?php echo($this->langCancel); ?>' />
+            </form>
+        </div>
+<?php
+    }
+    
+    function showUploadItem() {
         
-            $readOnly = $this->readOnly;
-            $upload = & $this->upload;
-            $newUpload = & $this->newUpload;
-            $paramName = $this->paramName;
-            $valueId = $paramName.'_value';
-            $titleId = $paramName.'_title';
-            $value = $this->newUploadId;
-            
-            $this->addJsLib('uploadFiles.js');
-         
-?>
-<?php       if ($upload) { ?>
-                <?php echo $upload->getDescr(); ?>
-<?php           if ($dl = $upload->getDownloadUrl()) { ?>
-                <br /><a href='<?php echo htmlspecialchars($dl); ?>'><?php echo($this->langDownloadFile); ?></a>
-<?php           } ?>
-<?php       } else {  
-                echo($this->langNoUpload);  
-            } 
-?>
-<?php       if (!$readOnly) { ?>
-                <input type='hidden' name='<?php echo htmlspecialchars($paramName); 
-                    ?>' id='<?php echo htmlspecialchars($valueId); 
-                    ?>' value='<?php echo htmlspecialchars($value); 
-                    ?>' />
-                <br />
-                <a href='#' onclick='showSelectFile("<?php 
-                    $this->d($this->controller->getPartialUrlWithOpenParam('uploadId', array('retFieldName' => $valueId, 'retLabelId' => $titleId, 'fileChangeFn' => $this->fileChangeFn))); 
-                ?>", document.getElementById("<?php echo htmlspecialchars($valueId); ?>").value<?php if ($this->fileChangeFn !== false) { echo ', '.$this->fileChangeFn; } ?>); return false;'> <?php echo($this->langUploadNewFile); ?></a>
-                <br /><span id='<?php echo htmlspecialchars($titleId); ?>'><?php if ($newUpload) echo $newUpload->getDescr(); ?></span>
-<?php       } ?>            
-<?php
-    }
-    
-    function _getContentHeaderSuffix() {
-        $res = 'filename="'.$this->upload->getFilename().'"';
-        return $res;
-    }
-    
-    function _getContentType() {
-        $res = $this->upload->getMimeType();
-        if (strlen($this->uploadCharset)) $res .= '; charset='.$this->uploadCharset;
-        return $res;
-    }
-        
-    
-    function showDownload() {
-        //$this->upload->stream(true, false);
-        $this->htmlResponse->extraHeaders[] = 'Content-Type: '.$this->_getContentType();
-        $this->htmlResponse->extraHeaders[] = 'Content-Disposition: attachment; '.$this->_getContentHeaderSuffix();
-        $this->htmlResponse->noHtml = true;
-        $this->htmlResponse->noWrap = true;
-        echo $this->upload->getContent();
-    }
-    
-    function showView() {
+            $readOnly = $this->readOnly;
+            $upload = & $this->upload;
+            $newUpload = & $this->newUpload;
+            $paramName = $this->paramName;
+            $valueId = $paramName.'_value';
+            $titleId = $paramName.'_title';
+            $value = $this->newUploadId;
+            
+            $this->addJsLib('uploadFiles.js');
+         
+?>
+<?php       if ($upload) { ?>
+                <?php echo $upload->getDescr(); ?>
+<?php           if ($dl = $upload->getDownloadUrl()) { ?>
+                <br /><a href='<?php echo htmlspecialchars($dl); ?>'><?php echo($this->langDownloadFile); ?></a>
+<?php           } ?>
+<?php       } else {  
+                echo($this->langNoUpload);  
+            } 
+?>
+<?php       if (!$readOnly) { ?>
+                <input type='hidden' name='<?php echo htmlspecialchars($paramName); 
+                    ?>' id='<?php echo htmlspecialchars($valueId); 
+                    ?>' value='<?php echo htmlspecialchars($value); 
+                    ?>' />
+                <a href='#' onclick='showSelectFile("<?php 
+                    $this->d($this->controller->getPartialUrlWithOpenParam('uploadId', array('retFieldName' => $valueId, 'retLabelId' => $titleId, 'fileChangeFn' => $this->fileChangeFn))); 
+                ?>", document.getElementById("<?php echo htmlspecialchars($valueId); ?>").value<?php if ($this->fileChangeFn !== false) { echo ', '.$this->fileChangeFn; } ?>); return false;'> <?php echo($this->langUploadNewFile); ?></a>
+                <br /><span id='<?php echo htmlspecialchars($titleId); ?>'><?php if ($newUpload) echo $newUpload->getDescr(); ?></span>
+<?php       } ?>            
+<?php
+    }
+    
+    function _getContentHeaderSuffix() {
+        $res = 'filename="'.$this->upload->getFilename().'"';
+        return $res;
+    }
+    
+    function _getContentType() {
+        $res = $this->upload->getMimeType();
+        if (strlen($this->uploadCharset)) $res .= '; charset='.$this->uploadCharset;
+        return $res;
+    }
+        
+    
+    function showDownload() {
         //$this->upload->stream(true, false);
-        $this->htmlResponse->extraHeaders[] = 'Content-Type: '.$this->_getContentType();
-        $this->htmlResponse->extraHeaders[] = 'Content-Disposition: inline; '.$this->_getContentHeaderSuffix();
-        $this->htmlResponse->noHtml = true;
-        $this->htmlResponse->noWrap = true;
-        echo $this->upload->getContent();
-    }
-    
-    function show404() {
-        $this->htmlResponse->extraHeaders[] = 'HTTP/1.0 404 Not Found';
-        //$this->htmlResponse->extraHeaders[] = array('HTTP/1.0�404�Not�Found', 404);
-        //$this->htmlResponse->extraHeaders[] = 'Status: 404 Not Found';
-        //$this->htmlResponse->noWrap = true;
-        $this->htmlResponse->content = '<h1>404: Not Found</h1>';
-    }
+        $this->htmlResponse->extraHeaders[] = 'Content-Type: '.$this->_getContentType();
+        $this->htmlResponse->extraHeaders[] = 'Content-Disposition: attachment; '.$this->_getContentHeaderSuffix();
+        $this->htmlResponse->noHtml = true;
+        $this->htmlResponse->noWrap = true;
+        echo $this->upload->getContent();
+    }
+    
+    function showView() {
+        //$this->upload->stream(true, false);
+        $this->htmlResponse->extraHeaders[] = 'Content-Type: '.$this->_getContentType();
+        $this->htmlResponse->extraHeaders[] = 'Content-Disposition: inline; '.$this->_getContentHeaderSuffix();
+        $this->htmlResponse->noHtml = true;
+        $this->htmlResponse->noWrap = true;
+        echo $this->upload->getContent();
+    }
+    
+    function show404() {
+        $this->htmlResponse->extraHeaders[] = 'HTTP/1.0 404 Not Found';
+        //$this->htmlResponse->extraHeaders[] = array('HTTP/1.0�404�Not�Found', 404);
+        //$this->htmlResponse->extraHeaders[] = 'Status: 404 Not Found';
+        //$this->htmlResponse->noWrap = true;
+        $this->htmlResponse->content = '<h1>404: Not Found</h1>';
+    }
         
 }
 
Index: Ae/Upload/Controller.php
===================================================================
--- Ae/Upload/Controller.php	(revision 249)
+++ Ae/Upload/Controller.php	(revision 259)
@@ -1,23 +1,23 @@
 <?php
 
 class Ae_Upload_Controller extends Ae_Legacy_Controller {
-
-    var $uploadCharset = false;
-    
-    var $canDownload = true;
+
+    var $uploadCharset = false;
     
+    var $canDownload = true;
+    
     var $canView = true;
     
-    var $autoClose = true;
+    var $autoClose = true;
     
     var $showUploadItem = false;
     
-    var $oldUploadId = false;
-    
-    var $newUploadId = false;
-    
-    var $paramName = false;
-    
+    var $oldUploadId = false;
+    
+    var $newUploadId = false;
+    
+    var $paramName = false;
+    
     var $readOnly = false;
     
     var $fileChangeFn = false;
@@ -38,10 +38,10 @@
     
     var $_uploadId = false;
     
-    var $_error = false;
-    
-    var $_autoStateVars = array('retFieldName', 'retFormName', 'uploadId', 'retLabelId', 'fileChangeFn', 'error');
+    var $_error = false;
     
+    var $_autoStateVars = array('retFieldName', 'retFormName', 'uploadId', 'retLabelId', 'fileChangeFn'/*, 'error'*/);
+    
     var $uploadErrorMessage = 'Error in upload processing: %s';
     
     var $uploadStoreErrorMessage = 'Error occured while storing an upload';
@@ -51,20 +51,22 @@
      */
     var $_uploadManager = false;
     
-    var $_uploadManagerOptions = array();
-    
+    var $_uploadManagerOptions = array();
+    
     var $defaultUploadManagerClass = 'Ae_Upload_Manager';
     
     /**
      * @var Ae_Upload_File
      */
-    var $_upload = false;
-    
-    /**
-     * @var Ae_Upload_File
-     */
+    var $_upload = false;
+    
+    /**
+     * @var Ae_Upload_File
+     */
     var $_newUpload = false;
     
+    var $_fileData = false;
+    
     function getError() {
         if ($this->_error === false) {
             $this->_error = $this->_context->getData('error', false);
@@ -80,7 +82,7 @@
     }
     
     function isOk() {
-        $res = $this->_context->getData('ok', false) !== false;
+        $res = $this->_context->getData('ok', false) !== false;
         return $res;
     }
     
@@ -104,21 +106,21 @@
         }
         return $this->_upload;
     }
-    
-    /**
-     * @return Ae_Upload_File
-     */
-    function getNewUpload() {
+    
+    /**
+     * @return Ae_Upload_File
+     */
+    function getNewUpload() {
         if ($this->_newUpload === false) {
-            if (($uid = $this->newUploadId) !== false) {
-                $m = & $this->getUploadManager();
+            if (($uid = $this->newUploadId) !== false) {
+                $m = & $this->getUploadManager();
                 $this->_newUpload = & $m->getUpload($uid);
-            }
-        }
-        return $this->_newUpload;
-    }
+            }
+        }
+        return $this->_newUpload;
+    }
     
-    
+    
     function getRetFormName() {
         if ($this->_retFormName === false) {
             $this->_retFormName = $this->_context->getData('retFormName');
@@ -129,7 +131,7 @@
     function getUploadId() {
         if ($this->_uploadId === false) {
             $this->_uploadId = $this->_context->getData('uploadId', $this->oldUploadId);
-        }
+        }
         return $this->_uploadId;
     }
     
@@ -152,24 +154,24 @@
         elseif ($this->isOk()) $res = 'ok';
         elseif ($this->isCancel()) $res = 'cancel';
         elseif ($this->isUpload()) $res = 'upload';
-        else $res = parent::getMethodParamValue();
+        else $res = parent::getMethodParamValue();
         return $res;
     }
-    
-    function executeDownload() {
-        if ($this->canDownload) {
-            if ($u = & $this->getUpload()) $this->_templatePart = 'download';
-                else $this->_templatePart = '404'; 
-        } else $this->_templatePart = '404';
-    }
-    
-    function executeView() {
-        if ($this->canView) {
-            if ($u = & $this->getUpload()) $this->_templatePart = 'view';
-                else $this->_templatePart = '404'; 
-        } else $this->_templatePart = '404';
-    }
     
+    function executeDownload() {
+        if ($this->canDownload) {
+            if ($u = & $this->getUpload()) $this->_templatePart = 'download';
+                else $this->_templatePart = '404'; 
+        } else $this->_templatePart = '404';
+    }
+    
+    function executeView() {
+        if ($this->canView) {
+            if ($u = & $this->getUpload()) $this->_templatePart = 'view';
+                else $this->_templatePart = '404'; 
+        } else $this->_templatePart = '404';
+    }
+    
     function executeOk() {
         if ($u = & $this->getUpload()) {
             //if ($n = $u->getName()) $this->app->purgeUploads($n);
@@ -185,14 +187,20 @@
         $this->_templatePart = 'close';
     }
     
+    function getFileData() {
+        $paramPath = $this->_context->mapParam('file', true);
+        $f = Ae_Util::getUploadedFilesByHierarchy();
+        $fileData = Ae_Util::getArrayByPath($f, $paramPath, false);
+        return $fileData;
+    }
+    
     function executeUpload() {
         $f = false;
         $m = & $this->getUploadManager();
         $paramPath = $this->_context->mapParam('file', true);
-        $fileData = false;
+        $fileData = false;
         $this->_templatePart = 'default';
-        $f = Ae_Util::getUploadedFilesByHierarchy();
-        $fileData = Ae_Util::getArrayByPath($f, $paramPath, false);
+        $fileData = $this->getFileData();
         if ($fileData && (!isset($fileData['error']) || !$fileData['error']) ) {
             if ($u = & $this->getUpload()) {
                 $m->purgeUploads($u->getId());
@@ -203,7 +211,7 @@
             if ($this->upload->getError()) {
                 $this->_error = sprintf($this->uploadErrorMessage, $this->upload->getFilename());
             } else {
-                if ($m->tempStoreUpload($this->upload)) {
+                if ($m->tempStoreUpload($this->upload)) {
                     $this->_uploadId = $this->upload->getId();
                     $this->_error = false;
                 } else {
@@ -222,43 +230,43 @@
         }
     }
     
-    function executeShowUploadItem() {
+    function executeShowUploadItem() {
         $this->_templatePart = 'uploadItem';
     }
-    
-    function getUploadWindowUrl() {
-        return $this->_getPartialUrlWithOpenParam('uploadId', array('action' => 'upload'));
-    }
-    
-    function getPartialUrlWithOpenParam($paramName, $attribs = array()) {
-        $url = & $this->getUrl($attribs);
-        $iip = $this->_context->mapParam($paramName);
-        if ($url->query) {
-            Ae_Util::unsetArrayByPath($url->query, Ae_Util::pathToArray($iip));
-            $iip = '&'.$iip.'='; 
-        } else {
-            $iip = '?'.$iip.'=';
-        }
-        $res = $url->toString().$iip;
-        return $res;
-    }
-
-    function _getPreparedUploadManagerOptions() {
-        $u = $this->_uploadManagerOptions;
-        if ($this->canDownload && !isset($u['downloadLink'])) {
-            $u['downloadLink'] = $this->getPartialUrlWithOpenParam('uploadId', array('action' => 'download'));
-        }
-        if ($this->canView && !isset($u['viewLink'])) {
-            $u['viewLink'] = $this->getPartialUrlWithOpenParam('uploadId', array('action' => 'view'));
-        }
-        return $u;
-    }
     
+    function getUploadWindowUrl() {
+        return $this->_getPartialUrlWithOpenParam('uploadId', array('action' => 'upload'));
+    }
+    
+    function getPartialUrlWithOpenParam($paramName, $attribs = array()) {
+        $url = & $this->getUrl($attribs);
+        $iip = $this->_context->mapParam($paramName);
+        if ($url->query) {
+            Ae_Util::unsetArrayByPath($url->query, Ae_Util::pathToArray($iip));
+            $iip = '&'.$iip.'='; 
+        } else {
+            $iip = '?'.$iip.'=';
+        }
+        $res = $url->toString().$iip;
+        return $res;
+    }
+
+    function _getPreparedUploadManagerOptions() {
+        $u = $this->_uploadManagerOptions;
+        if ($this->canDownload && !isset($u['downloadLink'])) {
+            $u['downloadLink'] = $this->getPartialUrlWithOpenParam('uploadId', array('action' => 'download'));
+        }
+        if ($this->canView && !isset($u['viewLink'])) {
+            $u['viewLink'] = $this->getPartialUrlWithOpenParam('uploadId', array('action' => 'view'));
+        }
+        return $u;
+    }
+    
     /**
      * @return Ae_Upload_Manager
      */
-    function getUploadManager() {
-        if ($this->_uploadManager === false) {
+    function getUploadManager() {
+        if ($this->_uploadManager === false) {
             $this->_uploadManager = & Ae_Util::factoryWithOptions($this->_getPreparedUploadManagerOptions(), $this->defaultUploadManagerClass, 'class', false);
         }
         return $this->_uploadManager;
@@ -287,6 +295,10 @@
         $this->_template = false;
     }
     
+    function getMaxUploadSize() {
+        return ini_get('upload_max_filesize');
+    }
+    
 }
 
 ?>
\ No newline at end of file
Index: Ae/Legacy/Output/Native.php
===================================================================
--- Ae/Legacy/Output/Native.php	(revision 249)
+++ Ae/Legacy/Output/Native.php	(revision 259)
@@ -71,7 +71,6 @@
             $c = $r->replacePlaceholders(false, true);
             echo $c;
         }
-        if ($redir) var_dump($redir);
         if ($r->noHtml || $r->noWrap) {
             if ($this->allowCleanBufferAndDie) die();
         }
Index: Ae/Cache.php
===================================================================
--- Ae/Cache.php	(revision 249)
+++ Ae/Cache.php	(revision 259)
@@ -53,6 +53,7 @@
                 'class' => 'Ae_Cache',
             	'cacheDir' => $d->config->cachePath . '/aeCache',
             );
+            if (($l = (int) $d->config->getValue('cacheLifeTime'))) $res['lifetime'] = $l;
         }
         return $res;
     }
Index: Ae/Legacy/Database.php
===================================================================
--- Ae/Legacy/Database.php	(revision 249)
+++ Ae/Legacy/Database.php	(revision 259)
@@ -126,20 +126,16 @@
     }
     
     function loadAllResultsets($withNumericKeys = false) {
-        //Pm_Conversation::log("\n\n".$this->_sql."\n\n");
 	$rs = $this->getResultResource();
-	//Pm_Conversation::log($rs);
         $res = array();
         do {
             $currRs = array();
             while (($row = $withNumericKeys? $this->fetchBoth($rs) : $this->fetchAssoc($rs))) {
 		if (is_array($row) && !count($row)) continue;
                 $currRs[] = $row;
-		//Pm_Conversation::log($row);
             }
             if (count($currRs)) $res[] = $currRs;
             $r = $this->_gotoNextResultset($rs);
-	    //Pm_Conversation::log($r);
         } while ($r);
         $this->freeResultResource($rs);
         return $res; 
@@ -296,7 +292,8 @@
         foreach($tableName as $tn) touch($this->_tmpDir.'/'.$tn);
     }
     
-    function getTime($tableName, $default = false) {
+    
+    function getTime($tableName, $default = false, $touchIfNotExists = false) {
         if (is_array($tableName)) {
             $r = array();
             foreach ($tableName as $tn) $r[] = $this->getTime($tn);
@@ -304,7 +301,10 @@
         } else {
             if ($this->_useShowTableStatus) {
                 $res = $this->_getTimeFromTableStatus($tableName);
-                if ($res === false) $res = time();
+                if ($res === false) {
+                    $res = time();
+                    if ($touchIfNotExists) $this->touch($tableName);
+                }
             } else {
                 if (!is_file($fname = $this->_tmpDir.'/'.$tableName)) {
                     $res = $default === false? time() : $default;
Index: Ae/Model/Data.php
===================================================================
--- Ae/Model/Data.php	(revision 249)
+++ Ae/Model/Data.php	(revision 259)
@@ -272,9 +272,6 @@
         if ($this->_errors) {
             if ($propertyName) {
                 $res = Ae_Util::getArrayByPath($this->_errors, Ae_Util::pathToArray($propertyName));
-                if ($propertyName === 'element[alias]') {
-                    Pm_Conversation::log("Gotcha!!!", array($this->_errors, Ae_Util::pathToArray($propertyName)));
-                }
                 if (($concat !== false) && is_array($res)) $res = Ae_Util::implode_r($concat, $res);
             } else {
                 if ($concat === false) $res = $this->_errors;
@@ -1217,13 +1214,15 @@
                 $res = & $this->$m($key);
             } else {
                 if (!$this->_isOwnAssocLoaded($head, $key)) {
-                    if ($m = $this->_getMethod('load', $head.'Item') || $m = $this->_getMethod('load', $head)) $this->$m($key);
+                    if (($m = $this->_getMethod('load', $head.'Item')) || ($m = $this->_getMethod('load', $head))) $this->$m($key);
                     elseif ($m = $this->_getMethod('load', $head.'Items')) $this->$m();
                     else trigger_error ('Cannot load item of associated list '.get_class($this).'::'.$head.'; consider implementing load/loadItem/loadItems method', E_USER_ERROR);
                 }
                 if ((isset($this->$vn) || $this->_hasVar($vn)) && is_array($this->$vn) && isset($this->{$vn}[$key]) && is_object($this->{$vn}[$key])) {
                     $res = & $this->{$vn}[$key];
-                } else trigger_error ('Cannot retrieve item of associated list '.get_class($this).'::'.$head.'; please check accessor methods for consistence', E_USER_ERROR);
+                } else {
+                    trigger_error ('Cannot retrieve item of associated list '.get_class($this).'::'.$head.'; please check accessor methods for consistence', E_USER_ERROR);
+                }
             }
         } else {
             if ($m = $this->_getMethod('get', $head)) {
@@ -1318,7 +1317,7 @@
      * @access private
      */
     function _setOwnAssocItem($head, $plural, $key, & $assocObject) {
-        if ($m = $this->_getMethod('set', $head.'Item')) return $this->$m($assocObject);
+        if ($m = $this->_getMethod('set', $head.'Item')) return $this->$m($assocObject, $key);
         elseif ($m = $this->_getMethod('set', $head)) return $this->$m($assocObject, $key);
         else {
             if ($this->_hasOwnAssoc($head, $key)) $this->_deleteOwnAssoc($head, $key);
Index: Ae/Model/Values/Records.php
===================================================================
--- Ae/Model/Values/Records.php	(revision 249)
+++ Ae/Model/Values/Records.php	(revision 259)
@@ -1,89 +1,89 @@
 <?php
-/**
+/**
  * @package
  * @copyright    (c) 2008 Ilya Rezvin
  * @author         Ilya Rezvin <ilya@rezvin.com>
  * @version        $Id$
- */
-
-Ae_Dispatcher::loadClass('Ae_Model_Values');
-
-/**
- * Implements values list from the records
- */
-class Ae_Model_Values_Records extends Ae_Model_Values {
-    
-    /**
-     * @var Ae_Model_Mapper
-     */
-    var $_mapper = false;
-    
-    var $_cpk = true;
-    
-    var $mapperClass = false;
-    
-    var $where = false;
-    
-    var $ordering = '?';
-    
-    var $extraJoins = false;
-    
-    var $titleFieldName = false;
-    
-    var $titleIsProperty = '?';
-    
-    var $valueFieldName = false;
-    
+ */
+
+Ae_Dispatcher::loadClass('Ae_Model_Values');
+
+/**
+ * Implements values list from the records
+ */
+class Ae_Model_Values_Records extends Ae_Model_Values {
+    
+    /**
+     * @var Ae_Model_Mapper
+     */
+    var $_mapper = false;
+    
+    var $_cpk = true;
+    
+    var $mapperClass = false;
+    
+    var $where = false;
+    
+    var $ordering = '?';
+    
+    var $extraJoins = false;
+    
+    var $titleFieldName = false;
+    
+    var $titleIsProperty = '?';
+    
+    var $valueFieldName = false;
+    
     var $valueIsProperty = false;
     
-    /**
-     * If primary key is compound, return md5 as value
-     */
+    /**
+     * If primary key is compound, return md5 as value
+     */
     var $md5pk = true;
     
-    function Ae_Model_Values_Records (& $data, $propName = false, $options = true, $isStatic = false) {
-        parent::Ae_Model_Values($data, $propName, $options);
-        if (!$this->mapperClass) trigger_error ('$mapperClass property must be provided', E_USER_ERROR);
-        $this->_mapper = & Ae_Dispatcher::getMapper($this->mapperClass);
-        if ($this->ordering === '?') {
-            $this->ordering = $this->_mapper->getDefaultOrdering();
-            if ($this->ordering === false && $this->_mapper->getTitleFieldName()) {
-                $this->ordering = $this->_mapper->getTitleFieldName();
-            }
-        }
-        if ($this->valueFieldName) {
-            $this->_cpk = count($this->valueFieldName) > 1;
-        } else {
-           $this->_cpk = count($this->_mapper->listPkFields()) > 1;
-        }
-    }
-    
+    function Ae_Model_Values_Records (& $data, $propName = false, $options = true, $isStatic = false) {
+        parent::Ae_Model_Values($data, $propName, $options);
+        if (!$this->mapperClass) trigger_error ('$mapperClass property must be provided', E_USER_ERROR);
+        $this->_mapper = & Ae_Dispatcher::getMapper($this->mapperClass);
+        if ($this->ordering === '?') {
+            $this->ordering = $this->_mapper->getDefaultOrdering();
+            if ($this->ordering === false && $this->_mapper->getTitleFieldName()) {
+                $this->ordering = 't.'.$this->_mapper->getTitleFieldName();
+            }
+        }
+        if ($this->valueFieldName) {
+            $this->_cpk = count($this->valueFieldName) > 1;
+        } else {
+           $this->_cpk = count($this->_mapper->listPkFields()) > 1;
+        }
+    }
+    
     function _doDefaultGetValueList() {
         $ttls = $this->_mapper->getRecordTitles($this->where, $this->ordering, $this->extraJoins, $this->titleFieldName, $this->titleIsProperty, $this->valueFieldName, $this->valueIsProperty);
         //    if ($this->tableName === '#__element_versions')
-        
-        $res = array();
+        
+        $res = array();
         if (is_array($ttls)) {
-            if ($this->_cpk) {
-                if ($this->md5pk) {
-                    foreach ($ttls as $ttl) {
-                        $res[md5(implode("-", $ttl[0]))] = $ttl[1];             
-                    }
-                } else {
-                    foreach ($ttls as $ttl) {
-                        $res[implode("-", $ttl[0])] = $ttl[1];              
-                    }
-                }
-            } else {
-                foreach ($ttls as $ttl) {
-                    $res[$ttl[0]] = $ttl[1];                
-                }
+            if ($this->_cpk) {
+                if ($this->md5pk) {
+                    foreach ($ttls as $ttl) {
+                        $res[md5(implode("-", $ttl[0]))] = $ttl[1];             
+                    }
+                } else {
+                    foreach ($ttls as $ttl) {
+                        $res[implode("-", $ttl[0])] = $ttl[1];              
+                    }
+                }
+            } else {
+                foreach ($ttls as $ttl) {
+                    $res[$ttl[0]] = $ttl[1];                
+                }
             }
-        }
-        
-        if ($this->cache) $this->_cachedValueList = $res;
-        return $res;
-    }
+        }
+        
+        if ($this->cache) $this->_cachedValueList = $res;
+        return $res;
+    }
 
     function __sleep() {
         $this->_mapper = false;
@@ -93,9 +93,9 @@
     function __wakeup() {
         $this->_mapper = & Ae_Dispatcher::getMapper($this->mapperClass);        
     }
-    
-    // TODO: make getCaption() and check() methods
-    
-}
+    
+    // TODO: make getCaption() and check() methods
+    
+}
 
 ?>
\ No newline at end of file
Index: Ae/Model/Mapper.php
===================================================================
--- Ae/Model/Mapper.php	(revision 249)
+++ Ae/Model/Mapper.php	(revision 259)
@@ -252,7 +252,7 @@
             //$sql .= $this->database->getLimitsClause($limitCount, $limitOffset);
             $sql = $this->database->applyLimits($sql, $limitCount, $limitOffset, strlen($order)? $order : false);
         }
-
+        
         $this->database->setQuery($sql);
         //$objectList = $this->database->loadAssocList();
 
Index: Ae/Model/Property.php
===================================================================
--- Ae/Model/Property.php	(revision 249)
+++ Ae/Model/Property.php	(revision 259)
@@ -1,117 +1,119 @@
 <?php
-
-class Ae_Model_Property {
-    
-    var $propName = null;
-    
-    /**
-     * @var Ae_Model_Data
-     */
-    var $srcObject = null;
-    var $srcClass = null;
-    
-    /**
-     * @var Ae_Model_Data
-     */
-    var $implObject = null; 
-    var $implClass = null;
-    
-    var $isStatic = null;
-    var $isAbstract = null;
-    
-    var $plural = null;
-    var $arrayValue = null;
-    var $assocClass = null;
-    
-    var $value = null;
-    var $error = null;
-    
-    var $required = null;
-    var $readOnly = null;
-    var $dataType = null;
-    var $defaultValue = null;    
-    
-    var $caption = null;
-    var $controlType = null;
-    var $controlClass = null;
-    
-    var $internalDateFormat = null;
-    var $outputDateFormat = null;
-    
-    var $noBind = null;
-    var $noExport = null;
-    
+
+class Ae_Model_Property {
+    
+    var $propName = null;
+    
+    /**
+     * @var Ae_Model_Data
+     */
+    var $srcObject = null;
+    var $srcClass = null;
+    
+    /**
+     * @var Ae_Model_Data
+     */
+    var $implObject = null; 
+    var $implClass = null;
+    
+    var $isStatic = null;
+    var $isAbstract = null;
+    
+    var $plural = null;
+    var $arrayValue = null;
+    var $assocClass = null;
+    
+    var $value = null;
+    var $error = null;
+    
+    var $required = null;
+    var $readOnly = null;
+    var $dataType = null;
+    var $defaultValue = null;    
+    
+    var $caption = null;
+    var $controlType = null;
+    var $controlClass = null;
+    
+    var $internalDateFormat = null;
+    var $outputDateFormat = null;
+    
+    var $noBind = null;
+    var $noExport = null;
+    
     var $allowHtml = null;
     
-    var $restrictToListOnConvert = false;
+    var $restrictToListOnConvert = false;
     
     var $allowValuesOutOfLists = null;
-    
-    /**
-     * Whether this property should be checked by object that is not owner of the property
-     * @var bool
-     */
-    var $overCheck = null;
-    
-    /**
-     * Whether this association property should be loaded when owner is check()-ed (if it's not already loaded)
-     */
-    var $loadToCheck = null;
-    
-    /**
-     * Whether this association property should be checked if it was not bind()-ed before
-     */
-    var $checkIfUnbound = null;
-    
-    var $lt = null;
-    var $gt = null;
-    var $le = null;
-    var $ge = null;
+    
+    /**
+     * Whether this property should be checked by object that is not owner of the property
+     * @var bool
+     */
+    var $overCheck = null;
+    
+    /**
+     * Whether this association property should be loaded when owner is check()-ed (if it's not already loaded)
+     */
+    var $loadToCheck = null;
+    
+    /**
+     * Whether this association property should be checked if it was not bind()-ed before
+     */
+    var $checkIfUnbound = null;
+    
+    var $lt = null;
+    var $gt = null;
+    var $le = null;
+    var $ge = null;
     var $nz = null;
     
     var $maxLength = null;
-    
-    function Ae_Model_Property (& $srcObject, $propName, $isStatic, $formOptions = array()) {
-        foreach (array_keys($formOptions) as $optionName) $this->$optionName = & $formOptions[$optionName];
-
-        $this->srcObject = & $srcObject;
-        $this->propName = $propName;
-        $this->isStatic = $isStatic;
-    }
-    
-    function _updateData($formOptions = array()) {
-        foreach (array_diff(array_keys($formOptions), array('srcObject', 'implObject', 'propName', 'isStatic')) as $optionName) $this->$optionName = & $formOptions[$optionValue];
-    }
-    
-    function toFormOptions() {
-        $res = array();
-        foreach (array_keys(get_object_vars($this)) as $varName) {
-            if ($varName{0} != '_' && $varName != 'srcObject' && $varName != 'implObject' && !is_null($this->$varName)) $res[$varName] = & $this->$varName;  
-        }
-        return $res;
-    }
-    
-    function getValue() {
-        trigger_error (__FUNCTION__.' is not implemented yet', E_USER_ERROR);
-    }
-    
-    function getAssoc() {
-        trigger_error (__FUNCTION__.' is not implemented yet', E_USER_ERROR);
-    }
-    
-    function getErrors() {
-        trigger_error (__FUNCTION__.' is not implemented yet', E_USER_ERROR);
-    }
-    
-    function getDynamicInfo() {
-        if ($this->isAbstract) trigger_error('Cannot retrieve dynamic info from abstract property info '.$this->srcClass.'::'.$this->$propName, E_USER_ERROR);
-        if ($this->isStatic) {
-            $dynFormOptions = $this->srcObject->getFormOptions($this->propName, false);
-            $this->_updateData($dynFormOptions);
-        }
-        return true;
+    
+    var $skipValidation = false;
+    
+    function Ae_Model_Property (& $srcObject, $propName, $isStatic, $formOptions = array()) {
+        foreach (array_keys($formOptions) as $optionName) $this->$optionName = & $formOptions[$optionName];
+
+        $this->srcObject = & $srcObject;
+        $this->propName = $propName;
+        $this->isStatic = $isStatic;
     }
     
-}
-
+    function _updateData($formOptions = array()) {
+        foreach (array_diff(array_keys($formOptions), array('srcObject', 'implObject', 'propName', 'isStatic')) as $optionName) $this->$optionName = & $formOptions[$optionValue];
+    }
+    
+    function toFormOptions() {
+        $res = array();
+        foreach (array_keys(get_object_vars($this)) as $varName) {
+            if ($varName{0} != '_' && $varName != 'srcObject' && $varName != 'implObject' && !is_null($this->$varName)) $res[$varName] = & $this->$varName;  
+        }
+        return $res;
+    }
+    
+    function getValue() {
+        trigger_error (__FUNCTION__.' is not implemented yet', E_USER_ERROR);
+    }
+    
+    function getAssoc() {
+        trigger_error (__FUNCTION__.' is not implemented yet', E_USER_ERROR);
+    }
+    
+    function getErrors() {
+        trigger_error (__FUNCTION__.' is not implemented yet', E_USER_ERROR);
+    }
+    
+    function getDynamicInfo() {
+        if ($this->isAbstract) trigger_error('Cannot retrieve dynamic info from abstract property info '.$this->srcClass.'::'.$this->$propName, E_USER_ERROR);
+        if ($this->isStatic) {
+            $dynFormOptions = $this->srcObject->getFormOptions($this->propName, false);
+            $this->_updateData($dynFormOptions);
+        }
+        return true;
+    }
+    
+}
+
 ?>
\ No newline at end of file
Index: Ae/Model/Validator.php
===================================================================
--- Ae/Model/Validator.php	(revision 249)
+++ Ae/Model/Validator.php	(revision 259)
@@ -297,12 +297,14 @@
     
     function _checkForRequiredField($fieldName, $fieldInfo) {
         $res = true;
-        if (isset($fieldInfo['required']) && $fieldInfo['required']) {
-            $value = $this->convertValue($this->getFieldValue($fieldName, null, $fieldInfo), false, array());
-            if ($this->valueIsEmpty($value)) {
-                $res = false;
-                $this->errors[$fieldName]['required'] = $this->makeErrorMsg($this->msgs['required'], $fieldInfo);
-            } else {
+        if (!(isset($fieldInfo['skipValidation']) && $fieldInfo['skipValidation'])) {
+            if (isset($fieldInfo['required']) && $fieldInfo['required']) {
+                $value = $this->convertValue($this->getFieldValue($fieldName, null, $fieldInfo), false, array());
+                if ($this->valueIsEmpty($value)) {
+                    $res = false;
+                    $this->errors[$fieldName]['required'] = $this->makeErrorMsg($this->msgs['required'], $fieldInfo);
+                } else {
+                }
             }
         }
         return $res;
@@ -335,19 +337,21 @@
     
     function _checkForDataType($fieldName, $fieldInfo, $modifyModel) {
         $res = true;
-        $fieldValue = $this->getFieldValue($fieldName, null, $fieldInfo);
-        if (!$this->valueIsEmpty($fieldValue)) {
-            $errValue = null;
-            if (isset($fieldInfo['isNullable']) && $fieldInfo['isNullable']) $errValue = md5(microtime().rand());
-                else $errValue = null;
-            $cValue = $this->convertValue($fieldValue, false, $fieldInfo, $errValue);
-            if ($cValue === $errValue) {
-                $type = isset($fieldInfo['dataType'])? $fieldInfo['dataType'] : 'string';
-                $this->errors[$fieldName]['type'] = $this->makeErrorMsg($this->msgs[$type.'Type'], $fieldInfo);
-                $res = false; 
-            } 
-            elseif ($modifyModel && $fieldValue !== $cValue) {
-                $this->setFieldValue($fieldName, $cValue);
+        if (!(isset($fieldInfo['skipValidation']) && $fieldInfo['skipValidation'])) {
+            $fieldValue = $this->getFieldValue($fieldName, null, $fieldInfo);
+            if (!$this->valueIsEmpty($fieldValue)) {
+                $errValue = null;
+                if (isset($fieldInfo['isNullable']) && $fieldInfo['isNullable']) $errValue = md5(microtime().rand());
+                    else $errValue = null;
+                $cValue = $this->convertValue($fieldValue, false, $fieldInfo, $errValue);
+                if ($cValue === $errValue) {
+                    $type = isset($fieldInfo['dataType'])? $fieldInfo['dataType'] : 'string';
+                    $this->errors[$fieldName]['type'] = $this->makeErrorMsg($this->msgs[$type.'Type'], $fieldInfo);
+                    $res = false; 
+                } 
+                elseif ($modifyModel && $fieldValue !== $cValue) {
+                    $this->setFieldValue($fieldName, $cValue);
+                }
             }
         }
         return $res;
@@ -379,6 +383,7 @@
      * @return mixed Typed value or $errValue if it can't convert value 
      */
     function convertValue($value, $type = false, $fieldInfo = array(), $errValue = null) {
+        if (isset($fieldInfo['skipValidation']) && $fieldInfo['skipValidation']) return $value;
         if (is_array($value)) {
             if (isset($fieldInfo['plural']) || isset($fieldInfo['arrayValue'])) {
                 $res = array();
Index: Ae/Param/Std.php
===================================================================
--- Ae/Param/Std.php	(revision 249)
+++ Ae/Param/Std.php	(revision 259)
@@ -29,13 +29,25 @@
 					'gt' => 0,
 				)),
 			),
-			
+            
 			'enum' => array(
 				'conditions' => array('c1' => array(
 					'class' => 'Ae_Param_Condition_Enum',
 					'values' => array(), 
 				)),
 			),
+            
+            'bool' => array(
+                'filters' => array(
+                    'f1' => array(
+                        'class' => 'Ae_Param_Decorator',
+                        'decorator' => array(
+                            'class' => 'Ae_Decorator_Cast',
+                            'type' => 'bool',
+                        ),
+                    ),
+                ),
+            ),
         
         );
         Ae_Util::ms($this->defaults, $extraDefaults);
Index: Ae/Js.php
===================================================================
--- Ae/Js.php	(revision 249)
+++ Ae/Js.php	(revision 259)
@@ -64,6 +64,7 @@
         } else {
             if (!count($value)) return '[]'; else {
                 $nk = !$withNumericKeys && Ae_Js::areOnlyNumericKeys($value);
+                if ($withNumericKeys == 1) $withNumericKeys = false;
                 $res = $nk? '[' : '{';
                 $n = 0;
                 $c = count($value);
Index: Ae/Cache/Util/PHP.php
===================================================================
--- Ae/Cache/Util/PHP.php	(revision 249)
+++ Ae/Cache/Util/PHP.php	(revision 259)
@@ -7,6 +7,14 @@
      */
     protected $cache = null;
     
+    var $debug = false;
+    
+    protected $deletedFiles = array();
+    
+    function debugGetDeletedFiles() {
+        return $this->deletedFiles;
+    }
+    
     function setCache(Ae_Cache $cache) {
         $this->cache = $cache;
     }
@@ -16,25 +24,27 @@
     }
     
     protected function cleanRecursive($dir, $purgeTimeout = false, $depth = 0) {
+        if ($this->debug) $this->deletedFiles = array();
         $dirDeleted = false;
         if (!$dir instanceof RecursiveIteratorIterator) $dir = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir), RecursiveIteratorIterator::CHILD_FIRST); 
         if ($dir->isDir()) {
-            ini_set('html_errors', 0);
             $n = 0;
             $path = false;
             foreach ($dir as $file) {
                 if ($file->isDir()) {
-                    if (($file->getBasename() != '.')) {
+                    if (!in_array($file->getBasename(), array('.', '..'))) {
                         if (!$n) {
-                            if (rmdir($file->getPathname())) $n = 0;
+                            if ($this->debug) $this->deletedFiles[] = $file->getPathname();
+                            if ($this->debug || @rmdir($file->getPathname())) $n = 0;
                                 else $n = 1;
                         } else {
                             $n = 1;
                         } 
                     }
                 } else {
-                    if (($purgeTimeout === false) || (time() - $file->getMTime()) >= $purgeTimeout) {
-                        if (!unlink($file->getPathname())) $n++;
+                    if ($file->isFile() && (($purgeTimeout === false) || (time() - $file->getMTime()) >= $purgeTimeout)) {
+                        if ($this->debug) $this->deletedFiles[] = $file->getPathname();
+                        if (!($this->debug || unlink($file->getPathname()))) $n++;
                     } else $n++;
                 }
             }
@@ -43,11 +53,11 @@
     }
     
     function deleteRecursive($dir) {
-        return @$this->cleanRecursive($dir, false);
+        return $this->cleanRecursive($dir, false);
     }
     
     function purgeRecursive($dir, $lifetime) {
-        return @$this->cleanRecursive($dir, $lifetime);
+        return $this->cleanRecursive($dir, $lifetime);
     }
     
     function getStatsRecursive($dir) {
Index: Ae/File.php
===================================================================
--- Ae/File.php	(revision 0)
+++ Ae/File.php	(revision 259)
@@ -0,0 +1,110 @@
+<?php
+
+class Ae_File extends Ae_Autoparams {
+    
+    /**
+     * @var Ae_File_Manager
+     */
+    protected $manager = false;
+    
+    protected $path = false;
+    
+    /**
+     * @var SplFileInfo
+     */
+    protected $fileInfo = null;
+    
+    protected $features = false;
+
+    protected function setPath($path) {
+        $this->path = $path;
+    }
+
+    function getPath() {
+        return $this->path;
+    }
+    
+    /**
+     * @return SplFileInfo
+     */
+    function getFileInfo() {
+        if (!is_object($this->fileInfo)) $this->fileInfo = new SplFileInfo($this->getTranslatedPath());
+        return $this->fileInfo;
+    }
+    
+    function getExtension() {
+        if (preg_match('/(\.[^\.]+)$/', $this->getTranslatedPath(), $matches)) {
+            $res = $matches[1];
+        } else {
+            $res = false;
+        }
+        return $res;
+    }
+    
+    function exists() {
+        return file_exists($this->getTranslatedPath());
+    }
+    
+    function getTranslatedPath() {
+        return $this->path;
+    }
+    
+    function addFeature(Ae_File_Feature $feature) {
+        $this->initFeatures();
+        if ($feature->getFile() !== $this) $feature = $feature->getForFile($this);
+        if (is_numeric($id = $feature->getId()) || !strlen($id)) {
+            $this->features[] = $feature;
+        } else {
+            $this->features[$id] = $feature;
+        }
+    }
+    
+    function getFeatures() {
+        $this->initFeatures();
+        return $this->features;
+    }
+    
+    function listFeatures() {
+        $this->initFeatures();
+        return array_keys($this->features);
+    }
+    
+    protected function initFeatures() {
+        if ($this->features === false) {
+            $this->features = array();
+            $this->getManager()->addFeaturesToFile($this);
+        }
+    }
+    
+    /**
+     * Returns NULL if feature not found
+     * 
+     * @param type $id
+     * @return Ae_File_Feature
+     */
+    function getFeature($id) {
+        $this->initFeatures();
+        if (isset($this->features[$id])) $res = $this->features[$id];
+            else $res = null;
+        return $res;
+    }
+
+    protected function setManager(Ae_File_Manager $manager) {
+        $this->manager = $manager;
+    }
+
+    /**
+     * @return Ae_File_Manager
+     */
+    function getManager() {
+        if ($this->manager === false) {
+            $this->manager = Ae_File_Manager::getDefaultInstance();
+        }
+        return $this->manager;
+    }
+    
+    function getMTime() {
+        return $this->getFileInfo()->getMTime();
+    }
+    
+}
\ No newline at end of file
Index: Ae/Js/Object/Ref.php
===================================================================
--- Ae/Js/Object/Ref.php	(revision 0)
+++ Ae/Js/Object/Ref.php	(revision 259)
@@ -0,0 +1,27 @@
+<?php
+
+class Ae_Js_Object_Ref {
+    
+    protected $object = false;
+    
+    function __construct(Ae_Js_Object $object) {
+        $this->object = $object;
+    }
+    
+    /**
+     * @return Ae_Js_Object
+     */
+    function getObject() {
+        return $this->object;
+    }
+    
+    function toJs() {
+        return $this->object->id;
+    }
+    
+    function __toString() {
+    	return $this->toJs();
+    }
+    
+    
+}
\ No newline at end of file
Index: Ae/Js/Object/Init.php
===================================================================
--- Ae/Js/Object/Init.php	(revision 0)
+++ Ae/Js/Object/Init.php	(revision 259)
@@ -0,0 +1,41 @@
+<?php
+
+class Ae_Js_Object_Init {
+
+    /**
+     * @var Ae_Js_Object
+     */
+    protected $object = false;
+    
+    function __construct(Ae_Js_Object $object) {
+        $this->object = $object;
+    }
+    
+    /**
+     * @return Ae_Js_Object
+     */
+    function getObject() {
+        return $this->object;
+    }
+    
+    function toJs() {
+        if ($this->object->args) {
+            if (!isset($this->object->args[0])) $args = array($this->object->args);
+            else $args = $this->object->args;
+        } else {
+            $args = array();
+        }
+        if ($this->object->constructor) {
+            $res = $this->object->id.' = '.(new Ae_Js_Call($this->object->constructor, $args, true)).';';
+        } else {
+            $a = $args? new Ae_Js_Val($this->args) : new Ae_Js_Var('{}');
+            $res = $this->object->id.' = '.$a.';';
+        }
+        return $res;
+    }
+    
+    function __toString() {
+    	return $this->toJs();
+    }
+    
+}
\ No newline at end of file
Index: Ae/Js/Object/Assign.php
===================================================================
--- Ae/Js/Object/Assign.php	(revision 0)
+++ Ae/Js/Object/Assign.php	(revision 259)
@@ -0,0 +1,40 @@
+<?php
+
+class Ae_Js_Object_Assign {
+
+    protected $object = false;
+    
+    protected $property = false;
+    
+    protected $value = false;
+    
+    function __construct(Ae_Js_Object $object, $property, $value) {
+        $this->object = $object;
+        $this->property = $property;
+        $this->value = $value;
+    }
+    
+    /**
+     * @return Ae_Js_Object
+     */
+    function getObject() {
+        return $this->object;
+    }
+    
+    function getProperty() {
+        return $this->property;
+    }
+    
+    function getValue() {
+        return $this->value;
+    }
+    
+    function toJs() {
+        return $this->object->id.'.'.$this->property.' = '.new Ae_Js_Val($this->value);
+    }
+    
+    function __toString() {
+    	return $this->toJs();
+    }
+
+}
\ No newline at end of file
Index: Ae/Js/Hash.php
===================================================================
--- Ae/Js/Hash.php	(revision 0)
+++ Ae/Js/Hash.php	(revision 259)
@@ -0,0 +1,21 @@
+<?php
+
+class Ae_Js_Hash implements Ae_I_Jsable {
+    
+    var $value = array();
+    
+    function __construct(array $value) {
+        $this->value = $value;
+    }
+    
+    function __toString() {
+        $js = new Ae_Js();
+        return $this->toJs($js);
+    }
+    
+    function toJs(Ae_Js $js, $indent = 0, $indentStep = 4, $newLines = true) {
+        $res = $js->toJs($this->value, $indent, $indentStep, $newLines, 1);
+        return $res;
+    }
+    
+}
\ No newline at end of file
Index: Ae/Js/Script.php
===================================================================
--- Ae/Js/Script.php	(revision 249)
+++ Ae/Js/Script.php	(revision 259)
@@ -7,7 +7,7 @@
     function __toString() {
         $a = array('type' => 'text/javascript');
         if (strlen($this->src)) $a['src'] = $this->src;
-        $res = Ae_Util::mkElement('script', parent::__toString(), $a);
+        $res = Ae_Util::mkElement('script', parent::toJs(new Ae_Js()), $a);
         return $res;
     }
 
Index: Ae/Js/Object.php
===================================================================
--- Ae/Js/Object.php	(revision 0)
+++ Ae/Js/Object.php	(revision 259)
@@ -0,0 +1,62 @@
+<?php
+
+class Ae_Js_Object {
+    
+    var $id = false;
+    
+    var $constructor = false;
+    
+    var $args = array();
+    
+    protected $ref = false;
+    
+    protected $init = false;
+    
+    function __construct($id, $constructor = null, $args = array()) {
+        if (func_num_args() == 1 && is_array($id) && isset($id['_id'])) {
+            $this->id = $id['_id'];
+            if (isset($id['_constructor'])) $this->constructor = $id['_constructor'];
+            unset($id['_id']);
+            unset($id['_constructor']);
+            $this->args = $id;
+        } else {
+            $this->id = $id;
+            $this->constructor = $constructor;
+            $this->args = $args;
+        }
+    }
+    
+    /**
+     * @return Ae_Js_Object_Ref
+     */
+    function ref() {
+        if (!$this->ref) $this->ref = new Ae_Js_Object_Ref($this);
+        return $this->ref;
+    }
+    
+    /**
+     * @return Ae_Js_Object_Call
+     */
+    function call($func, $_ = null) {
+        $args = func_get_args();
+        if (!is_array($func)) $func = array($func);
+        if (!is_array($this->id)) $id = array($this->id);
+            else $id = $this->id;
+        $func = array_merge($id, $func);
+        $res = new Ae_Js_Call($func,  array_slice($args, 1));
+        return $res;
+    }
+    
+    /**
+     * @return Ae_Js_Object_Init
+     */
+    function init() {
+        if (!$this->init) $this->init = new Ae_Js_Object_Init($this);
+        return $this->init;
+    }
+    
+    function assign($property, $value) {
+        return new Ae_Js_Object_Assign($this, $property, $value);
+    }
+    
+}
\ No newline at end of file
Index: Cg/Property/Object.php
===================================================================
--- Cg/Property/Object.php	(revision 249)
+++ Cg/Property/Object.php	(revision 259)
@@ -4,306 +4,306 @@
  * @copyright    (c) 2008 Ilya Rezvin
  * @author         Ilya Rezvin <ilya@rezvin.com>
  * @version        $Id$
- */
-
-Ae_Dispatcher::loadClass('Cg_Property');
-
-class Cg_Property_Object extends Cg_Property {
-
-    var $isPrivateVar = true;
-    
-    /**
-     * @var bool Whether this property is based on incoming relation
-     * 
-     */
-    var $isIncoming = false;
-    
-    /**
-     * @var string
-     * Name of Ae_Dbs_Relation in schema that corresponds to this association
-     */
+ */
+
+Ae_Dispatcher::loadClass('Cg_Property');
+
+class Cg_Property_Object extends Cg_Property {
+
+    var $isPrivateVar = true;
+    
+    /**
+     * @var bool Whether this property is based on incoming relation
+     * 
+     */
+    var $isIncoming = false;
+    
+    /**
+     * @var string
+     * Name of Ae_Dbs_Relation in schema that corresponds to this association
+     */
     var $relation = false;
-    
-    /**
-     * @var string
-     */
-    var $otherRelation = false;
-    
-    /**
-     * @var bool
-     */
-    var $isOtherIncoming = false;
-    
-    var $className = false;
-    
-    var $thisIsUnique = false;
-    
-    var $otherIsUnique = false;
-    
-    var $idrSuffixSingle = '';
-    var $idrSuffixPlural = '';
-    
-    var $otherModelIdInMethodsSingle = false;
-    var $otherModelIdInMethodsPlural = false;
-    
-    var $mapperClass = false;
-    var $relationId = false;
-    
-    /**
-     * @var Ae_Sql_Dbi_Relation
-     */
-    var $_rel = false;
-    
-    /**
-     * @var Ae_Sql_Dbi_Relation
-     */
-    var $_otherRel = false;
-    
-    /**
-     * Other model that is associated with one of current relation 
-     * @var Cg_Model
-     */
-    var $_other = false;
-    
-    function listPassthroughVars() {
-        return array_merge(array('className', 'mapperClass', 'relationId', 'otherModelIdInMethodsSingle', 'otherModelIdInMethodsPlural'), parent::listPassthroughVars());
-    }
-    
-    function _init() {
-        if ($this->relation) {
-            if ($this->isIncoming)
-                $this->_rel = $this->_model->tableObject->getIncomingRelation($this->relation);
-            else 
-               $this->_rel = $this->_model->tableObject->getRelation($this->relation);
-               
-            if ($this->otherRelation) {
-                if ($this->isIncoming) $tbl = $this->_rel->ownTable;
-                    else $tbl = $this->_rel->getForeignTable();
-                if ($this->isOtherIncoming) $this->_otherRel = $tbl->getIncomingRelation($this->otherRelation);
-                    else $this->_otherRel = $tbl->getRelation($this->otherRelation);
-            }
-            
-        }
-        
-        if ($this->_rel) {
-            if ($this->_otherRel) {
-                $tblName = $this->isOtherIncoming? $this->_otherRel->ownTable->name : $this->_otherRel->table;
-                $this->_other = $this->_model->_domain->searchModelByTable($tblName);
-                $this->thisIsUnique = $this->isIncoming? $this->_rel->isOtherRecordUnique() : $this->_rel->isThisRecordUnique(); 
-                $this->otherIsUnique = $this->isOtherIncoming? $this->_otherRel->isThisRecordUnique() : $this->_otherRel->isOtherRecordUnique();
-            } else {
-                $tblName = $this->isIncoming? $this->_rel->ownTable->name : $this->_rel->table;
-                $this->_other = $this->_model->_domain->searchModelByTable($tblName);
-                $this->thisIsUnique = $this->isIncoming? $this->_rel->isOtherRecordUnique() : $this->_rel->isThisRecordUnique(); 
-                $this->otherIsUnique = $this->isIncoming? $this->_rel->isThisRecordUnique() : $this->_rel->isOtherRecordUnique();
-            }
-        } else {
-            var_dump("$this->name: Cannot find relation ", $this->relation);
-        }
-        
-        if (!$this->className) $this->className = $this->getDefaultClassName();
-        
-        if (!$this->varName) $this->varName = $this->getDefaultVarName();
-        
-        if (!$this->relationId) $this->relationId = '_'.$this->varName;
-        
-        if (!$this->pluralForList) $this->pluralForList = $this->getDefaultPluralForList();
-        
-        if (!$this->caption) $this->caption = $this->getDefaultCaption();
-        
-        if ($this->_other) $this->mapperClass = $this->_other->getMapperClass();
-        
+    
+    /**
+     * @var string
+     */
+    var $otherRelation = false;
+    
+    /**
+     * @var bool
+     */
+    var $isOtherIncoming = false;
+    
+    var $className = false;
+    
+    var $thisIsUnique = false;
+    
+    var $otherIsUnique = false;
+    
+    var $idrSuffixSingle = '';
+    var $idrSuffixPlural = '';
+    
+    var $otherModelIdInMethodsSingle = false;
+    var $otherModelIdInMethodsPlural = false;
+    
+    var $mapperClass = false;
+    var $relationId = false;
+    
+    /**
+     * @var Ae_Sql_Dbi_Relation
+     */
+    var $_rel = false;
+    
+    /**
+     * @var Ae_Sql_Dbi_Relation
+     */
+    var $_otherRel = false;
+    
+    /**
+     * Other model that is associated with one of current relation 
+     * @var Cg_Model
+     */
+    var $_other = false;
+    
+    function listPassthroughVars() {
+        return array_merge(array('className', 'mapperClass', 'relationId', 'otherModelIdInMethodsSingle', 'otherModelIdInMethodsPlural'), parent::listPassthroughVars());
+    }
+    
+    function _init() {
+        if ($this->relation) {
+            if ($this->isIncoming)
+                $this->_rel = $this->_model->tableObject->getIncomingRelation($this->relation);
+            else 
+               $this->_rel = $this->_model->tableObject->getRelation($this->relation);
+               
+            if ($this->otherRelation) {
+                if ($this->isIncoming) $tbl = $this->_rel->ownTable;
+                    else $tbl = $this->_rel->getForeignTable();
+                if ($this->isOtherIncoming) $this->_otherRel = $tbl->getIncomingRelation($this->otherRelation);
+                    else $this->_otherRel = $tbl->getRelation($this->otherRelation);
+            }
+            
+        }
+        
+        if ($this->_rel) {
+            if ($this->_otherRel) {
+                $tblName = $this->isOtherIncoming? $this->_otherRel->ownTable->name : $this->_otherRel->table;
+                $this->_other = $this->_model->_domain->searchModelByTable($tblName);
+                $this->thisIsUnique = $this->isIncoming? $this->_rel->isOtherRecordUnique() : $this->_rel->isThisRecordUnique(); 
+                $this->otherIsUnique = $this->isOtherIncoming? $this->_otherRel->isThisRecordUnique() : $this->_otherRel->isOtherRecordUnique();
+            } else {
+                $tblName = $this->isIncoming? $this->_rel->ownTable->name : $this->_rel->table;
+                $this->_other = $this->_model->_domain->searchModelByTable($tblName);
+                $this->thisIsUnique = $this->isIncoming? $this->_rel->isOtherRecordUnique() : $this->_rel->isThisRecordUnique(); 
+                $this->otherIsUnique = $this->isIncoming? $this->_rel->isThisRecordUnique() : $this->_rel->isOtherRecordUnique();
+            }
+        } else {
+            var_dump("$this->name: Cannot find relation ", $this->relation);
+        }
+        
+        if (!$this->className) $this->className = $this->getDefaultClassName();
+        
+        if (!$this->varName) $this->varName = $this->getDefaultVarName();
+        
+        if (!$this->relationId) $this->relationId = '_'.$this->varName;
+        
+        if (!$this->pluralForList) $this->pluralForList = $this->getDefaultPluralForList();
+        
+        if (!$this->caption) $this->caption = $this->getDefaultCaption();
+        
+        if ($this->_other) $this->mapperClass = $this->_other->getMapperClass();
+        
         //var_dump($this->name.' enabled: '.$this->isEnabled());
-        
-    }
-    
-    function varNameHasConflicts() {
-        $res = false;
-        $pdn =  $this->getPreferredDefaultVarName();
-        if ($this->varName === $pdn) {
-            foreach ($this->_model->listProperties() as $i) {
-                $p = $this->_model->getProperty($i);
-                if (!Ae_Util::sameObject($p, $this) && is_a($p, 'Cg_Property_Object') && $p->getPreferredDefaultVarName() == $pdn) $res = true;
-            }
-        }
-        return $res;
-    }
-    
-    
-    function resolveConflicts() {
-        if ($this->varNameHasConflicts()) {
-            $this->varName = substr($this->name, 5); // strip out "_rel_" prefix from the name
-            $this->relationId = '_'.$this->varName;
-        }
-    }
-    
-    function getTargetModelName() {
-        $res = $this->_other? $this->_other->name : false;
-    }
-    
-    function getDefaultClassName() {
-        if ($this->_other) return $this->_other->className;
-    }
-    
-    function isList() {
-        if ($this->_rel) {
-            return $this->isIncoming? !$this->_rel->isThisRecordUnique() : !$this->_rel->isOtherRecordUnique();
-        }
-    }
-    
-    function getOtherEntityName($single = true) {
-        if (!$single) 
-            $res = $this->_other->plural;
-        else 
-            $res = $this->_other->single;
-        
-        if (count ($cp = $this->_model->getCommonSubsystemPrefixes($this->_other))) {
-            $prefixes = array_slice($this->_other->subsystemPrefixes, count($cp));
-        } else {
-            $prefixes = $this->_other->subsystemPrefixes;
-        }
-        if (count($prefixes)) {
-            $res = implode(' ', $prefixes).' '.$res;
-        }
-        if (in_array($res, $this->_model->tableObject->listColumns())) {
-            $this->idrSuffixSingle = 'Object';
-            $this->idrSuffixPlural = 'Objects';
-            
-            $res .= ' '.($this->idrSuffix = !$single? $this->idrSuffixPlural : $this->idrSuffixSingle);
-        }
-        $res = Cg_Inflector::camelize($res);
-        return $res;
-    }
-    
-    function getPreferredDefaultVarName() {
-        return $this->getOtherEntityName(!$this->isList());
-    }
-    
-    function getDefaultVarName() {
+        
+    }
+    
+    function varNameHasConflicts() {
+        $res = false;
+        $pdn =  $this->getPreferredDefaultVarName();
+        if ($this->varName === $pdn) {
+            foreach ($this->_model->listProperties() as $i) {
+                $p = $this->_model->getProperty($i);
+                if (!Ae_Util::sameObject($p, $this) && is_a($p, 'Cg_Property_Object') && $p->getPreferredDefaultVarName() == $pdn) $res = true;
+            }
+        }
+        return $res;
+    }
+    
+    
+    function resolveConflicts() {
+        if ($this->varNameHasConflicts()) {
+            $this->varName = substr($this->name, 5); // strip out "_rel_" prefix from the name
+            $this->relationId = '_'.$this->varName;
+        }
+    }
+    
+    function getTargetModelName() {
+        $res = $this->_other? $this->_other->name : false;
+    }
+    
+    function getDefaultClassName() {
+        if ($this->_other) return $this->_other->className;
+    }
+    
+    function isList() {
+        if ($this->_rel) {
+            return $this->isIncoming? !$this->_rel->isThisRecordUnique() : !$this->_rel->isOtherRecordUnique();
+        }
+    }
+    
+    function getOtherEntityName($single = true) {
+        if (!$single) 
+            $res = $this->_other->plural;
+        else 
+            $res = $this->_other->single;
+        
+        if (count ($cp = $this->_model->getCommonSubsystemPrefixes($this->_other))) {
+            $prefixes = array_slice($this->_other->subsystemPrefixes, count($cp));
+        } else {
+            $prefixes = $this->_other->subsystemPrefixes;
+        }
+        if (count($prefixes)) {
+            $res = implode(' ', $prefixes).' '.$res;
+        }
+        if (in_array($res, $this->_model->tableObject->listColumns())) {
+            $this->idrSuffixSingle = 'Object';
+            $this->idrSuffixPlural = 'Objects';
+            
+            $res .= ' '.($this->idrSuffix = !$single? $this->idrSuffixPlural : $this->idrSuffixSingle);
+        }
+        $res = Cg_Inflector::camelize($res);
+        return $res;
+    }
+    
+    function getPreferredDefaultVarName() {
+        return $this->getOtherEntityName(!$this->isList());
+    }
+    
+    function getDefaultVarName() {
         if ($this->isList()) {
             $res = $this->otherModelIdInMethodsPlural;
         } else {
             $res = $this->otherModelIdInMethodsSingle;
         }
         if (!strlen($res))
-            $res = $this->getOtherEntityName(!$this->isList());
-        //if ($this->varNameHasConflicts()) $res .= '__!!!';
-        //var_dump($this->name);
-        return $res;
-    }
-    
-    function getDefaultPluralForList() {
-        $res = false;
-        if ($this->_rel) {
-            $plur = $this->isIncoming? !$this->_rel->isThisRecordUnique() : !$this->_rel->isOtherRecordUnique();
-            if ($plur) {
+            $res = $this->getOtherEntityName(!$this->isList());
+        //if ($this->varNameHasConflicts()) $res .= '__!!!';
+        //var_dump($this->name);
+        return $res;
+    }
+    
+    function getDefaultPluralForList() {
+        $res = false;
+        if ($this->_rel) {
+            $plur = $this->isIncoming? !$this->_rel->isThisRecordUnique() : !$this->_rel->isOtherRecordUnique();
+            if ($plur) {
                 if ($this->otherModelIdInMethodsPlural) $res = $this->otherModelIdInMethodsPlural; 
                 else {
                     if ($this->_other) $res = $this->getOtherEntityName(false);
                     else $res = $this->varName;
-                }
-                    
-            }
-        }
-        return $res;
+                }
+                    
+            }
+        }
+        return $res;
     }
     
     function isManyToMany() {
         return $this->_otherRel;
-    }
-    
-    function getDefaultCaption() {
-        if ($this->_rel && $this->_other) {
-            if ($this->isList()) $res = $this->_other->pluralCaption;
-            else $res = $this->_other->singleCaption;
-        }
-        return $res;
-    }
-    
-    /**
-     * Gets corresponding property from other model that is built on the same relation 
-     * @return Cg_Property_Object
-     */
-    function getMirrorProperty() {
-        $res = null;
-        foreach ($this->_other->listProperties() as $name) {
-            $prop = $this->_other->getProperty($name);
-            if (is_a($prop, 'Cg_Property_Object')) {
-                if ($this->_otherRel) {
-                    if ($prop->_otherRel && ($prop->isIncoming == !$this->isOtherIncoming) && ($prop->isOtherIncoming == !$this->isIncoming) 
-                        && Ae_Util::sameObject($this->_rel, $prop->_otherRel) && Ae_Util::sameObject($this->_otherRel, $prop->_rel)) 
-                    {
-                        $res = $prop;
-                        break;
-                    }
-                } else {
-                    if (($prop->isIncoming == !$this->isIncoming) && Ae_Util::sameObject($this->_rel, $prop->_rel)) {
-                        $res = $prop;
-                        break;
-                    }
-                }
-            }
-        }
-        return $res;
-    }
-    
-    function getAeModelRelationPrototype() {
-        $res = array();
-        $res['srcMapperClass'] = $this->_model->getMapperClass();
-        $res['destMapperClass'] = $this->_other->getMapperClass();
-        $res['srcVarName'] = $this->getClassMemberName();
-        if ($this->isManyToMany()) $res['srcNNIdsVarName'] = $this->getIdsMemberName();
-        if ($cmn  = $this->getCountMemberName()) $res['srcCountVarName'] = $cmn;
-        if (($mirrorProp = $this->getMirrorProperty()) && $mirrorProp->isEnabled()) {
-            $res['destVarName'] = $mirrorProp->getClassMemberName();
-            if ($cmn  = $mirrorProp->getCountMemberName()) $res['destCountVarName'] = $cmn;
-            if ($this->isManyToMany()) $res['destNNIdsVarName'] = $mirrorProp->getIdsMemberName();
-        }
-        if ($this->isIncoming) {
-            $res['fieldLinks'] = array_flip($this->_rel->columns);
-            $res['srcIsUnique'] = $this->_rel->isOtherRecordUnique();
-            $res['destIsUnique'] = $this->_rel->isThisRecordUnique();      
-        } else {
-            $res['fieldLinks'] = $this->_rel->columns;
-            $res['srcIsUnique'] = $this->_rel->isThisRecordUnique();
-            $res['destIsUnique'] = $this->_rel->isOtherRecordUnique();
-            $res['srcOutgoing'] = true;
-        }
-        if ($this->_otherRel) {
-            if ($this->isIncoming) {
-                $res['midTableName'] = $this->_rel->ownTable->name;
-            } else {
-                $res['midTableName'] = $this->_rel->table;
-            }
-            if ($this->isOtherIncoming) {
-                
-                $res['fieldLinks2'] = array_flip($this->_otherRel->columns);
-                $res['destIsUnique'] = $this->_otherRel->isThisRecordUnique();      
-            } else {
-                $res['fieldLinks2'] = $this->_otherRel->columns;
-                $res['destIsUnique'] = $this->_otherRel->isOtherRecordUnique();
+    }
+    
+    function getDefaultCaption() {
+        if ($this->_rel && $this->_other) {
+            if ($this->isList()) $res = $this->_other->pluralCaption;
+            else $res = $this->_other->singleCaption;
+        }
+        return $res;
+    }
+    
+    /**
+     * Gets corresponding property from other model that is built on the same relation 
+     * @return Cg_Property_Object
+     */
+    function getMirrorProperty() {
+        $res = null;
+        foreach ($this->_other->listProperties() as $name) {
+            $prop = $this->_other->getProperty($name);
+            if (is_a($prop, 'Cg_Property_Object')) {
+                if ($this->_otherRel) {
+                    if ($prop->_otherRel && ($prop->isIncoming == !$this->isOtherIncoming) && ($prop->isOtherIncoming == !$this->isIncoming) 
+                        && Ae_Util::sameObject($this->_rel, $prop->_otherRel) && Ae_Util::sameObject($this->_otherRel, $prop->_rel)) 
+                    {
+                        $res = $prop;
+                        break;
+                    }
+                } else {
+                    if (($prop->isIncoming == !$this->isIncoming) && Ae_Util::sameObject($this->_rel, $prop->_rel)) {
+                        $res = $prop;
+                        break;
+                    }
+                }
             }
+        }
+        return $res;
+    }
+    
+    function getAeModelRelationPrototype() {
+        $res = array();
+        $res['srcMapperClass'] = $this->_model->getMapperClass();
+        $res['destMapperClass'] = $this->_other->getMapperClass();
+        $res['srcVarName'] = $this->getClassMemberName();
+        if ($this->isManyToMany()) $res['srcNNIdsVarName'] = $this->getIdsMemberName();
+        if ($cmn  = $this->getCountMemberName()) $res['srcCountVarName'] = $cmn;
+        if (($mirrorProp = $this->getMirrorProperty()) && $mirrorProp->isEnabled()) {
+            $res['destVarName'] = $mirrorProp->getClassMemberName();
+            if ($cmn  = $mirrorProp->getCountMemberName()) $res['destCountVarName'] = $cmn;
+            if ($this->isManyToMany()) $res['destNNIdsVarName'] = $mirrorProp->getIdsMemberName();
+        }
+        if ($this->isIncoming) {
+            $res['fieldLinks'] = array_flip($this->_rel->columns);
+            $res['srcIsUnique'] = $this->_rel->isOtherRecordUnique();
+            $res['destIsUnique'] = $this->_rel->isThisRecordUnique();      
+        } else {
+            $res['fieldLinks'] = $this->_rel->columns;
+            $res['srcIsUnique'] = $this->_rel->isThisRecordUnique();
+            $res['destIsUnique'] = $this->_rel->isOtherRecordUnique();
+            $res['srcOutgoing'] = true;
+        }
+        if ($this->_otherRel) {
+            if ($this->isIncoming) {
+                $res['midTableName'] = $this->_rel->ownTable->name;
+            } else {
+                $res['midTableName'] = $this->_rel->table;
+            }
+            if ($this->isOtherIncoming) {
+                
+                $res['fieldLinks2'] = array_flip($this->_otherRel->columns);
+                $res['destIsUnique'] = $this->_otherRel->isThisRecordUnique();      
+            } else {
+                $res['fieldLinks2'] = $this->_otherRel->columns;
+                $res['destIsUnique'] = $this->_otherRel->isOtherRecordUnique();
+            }
             
             // workaround for many-to-many relations
             // TODO: figure why srcIsUnique and destIsUnique are true 
             if (isset($res['midTableName']) && strlen($res['midTableName'])) {
                 $res['srcIsUnique'] = false;
                 $res['destIsUnique'] = false;
-            }
-        }
-         
-        return $res;
-    }
-    
-    function getCountMemberName() {
-        if ($this->pluralForList) {
-            $res = '_'.$this->pluralForList.'Count';
-        } else {
-            $res = false;
-        }
-        return $res;
+            }
+        }
+         
+        return $res;
     }
     
+    function getCountMemberName() {
+        if ($this->pluralForList) {
+            $res = '_'.$this->pluralForList.'Count';
+        } else {
+            $res = false;
+        }
+        return $res;
+    }
+    
     /**
      * Name of member that holds foreign IDs for many-to-many relations
      */
@@ -311,39 +311,39 @@
         if ($this->isManyToMany()) $res = '_'.$this->getOtherEntityName(true).'Ids';
             else $res = false;
         return $res;
-    }
-    
-    /**
-     * @return Cg_Model
-     */
-    function getOtherModel() {
-        return $this->_other;
-    }
-    
-    /**
-     * @return Ae_Sql_Dbi_Relation
-     */
-    function getRelation() {
-        return $this->_rel;
-    }
-    
-    function getAllClassMembers() {
-        $res = parent::getAllClassMembers();
+    }
+    
+    /**
+     * @return Cg_Model
+     */
+    function getOtherModel() {
+        return $this->_other;
+    }
+    
+    /**
+     * @return Ae_Sql_Dbi_Relation
+     */
+    function getRelation() {
+        return $this->_rel;
+    }
+    
+    function getAllClassMembers() {
+        $res = parent::getAllClassMembers();
         if ($cmn = $this->getCountMemberName()) $res[$cmn] = false;
         if ($imn = $this->getIdsMemberName()) $res[$imn] = false;
-        return $res;
-    }
-    
-    function isEnabled() {
+        return $res;
+    }
+    
+    function isEnabled() {
         if ($this->enabled === false) return false;
         if ($this->enabled === true) return true;
-        foreach ($this->_model->_domain->dontLinkSubsystems as $s) {
-            if (in_array($s[0], $this->_model->listSystems()) && in_array($s[1], $this->_other->listSystems())) {
-                return false;
-            }
-        }
-        return true;
-        
+        foreach ($this->_model->_domain->dontLinkSubsystems as $s) {
+            if (in_array($s[0], $this->_model->listSystems()) && in_array($s[1], $this->_other->listSystems())) {
+                return false;
+            }
+        }
+        return true;
+        
     }
     
     function hasSeveralProperties() {
@@ -357,6 +357,11 @@
                 $this->getOtherEntityName(true).'Ids' => array(
                     'dataType' => 'int',
                     'arrayValue' => true,
+                    //'caption' => $this->_other->pluralCaption,
+                    'values' => array(
+                        'class' => 'Ae_Model_Values_Records',
+                        'mapperClass' => $this->_other->getMapperClass(),
+                    ),
                 ),
             );
         } else {
@@ -364,8 +369,8 @@
         }
         return $res;
     }
-    
-    
-}
+    
+    
+}
 
 ?>
\ No newline at end of file
