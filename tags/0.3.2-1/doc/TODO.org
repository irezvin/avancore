* DONE Ac_Model_Relation::loadSrc/loadDest *DOES NOT WORK* for M-N relations (but should be quite useful) :model:bug:
  - As it turned out, only loadSrc didn't work properly, in contrast to loadDest
  Completed on [2013-09-27 Fri] 
* DONE catcher of model errors that are not shown by form controls :admin:bug:
  in some cases object isn't saved, but we don't see any error messages, since they belong to properties, which don't have respective controls.
  - [X] control to show ALL form errors
  - [X] by default, it must show ALL errors
  - [X] we can try to exclude errors that are shown by other controls
  - [X] ability to improve error list' look
* WORK convert nullable empty foreign keys to NULL before saving since it annoys a lot :model:bug:
  - [ ] we should report if field is part of foreign key
  - [ ] test cases
    - [ ] case A: field is an exact foreign key
    - [ ] case B: field is a PART of foreign key
* WORK switch to getters and seters instead of Ac_Model_Data::bind(). NN IDs must have priority over linked object (if it wasn't set?) :model:redesign:
       when $this->_fooIds is changed, getFoos() should return proper values
*** TODO gen. code: currently only data members with accessors should be protected
*** TODO compatibility with Ac_Model_Relation using $this->__set('_foo') - calls peGet/peSet for specified fields or objects
*** TODO check if all other model members can become *protected*
    - [ ] replace "_" with "int"; 
    - [ ] calliing __get for "int" property which is not a data field must show DEPRECATED warning;
* DONE Translate this file to broken English [2014-02-07 Fri]
  // DONE [2014-07-16 Wed] 
* TODO think about fields that are part of foreign key [2014-03-05 Wed]
  - Example A: userAvatar is referenced by both user->id and user->photoId. 
    $user->id must serve as a restriction of photo ValueList while photoId must behave normally.
    This behaviour must be enabled in case when second field is part of other foreign key or record unique index, 
    or is a non-NULL value.
* TODO [2014-02-05 Wed] Ability to use new Result, Template and Controller
** TODO Ac_Response_Environment -> Ac_Result_Environment
** TODO Ac_Result_Environment_Legacy
** TODO Support new Controllers in Application
* TODO Foreign 'ids' are lost in N-N relation of Ac_Model_Object during setFooIds() after getFoo() :model:bug:
  steps to re-produce:
  - we have some "property", which loads external object(s) during evaluation
  - we setID/IDs in the form
  - object begins to save 
  - "validation" checks the "property", and related objects are loaded
  - after that ID/IDs won't be used since we have object properties' populated
* TODO Ac_Sql_Select: don't join tables, which are specified in $this->tables[$this->primaryAlias]->joinsAlias [2013-08-27 Tue] :sql:bug:
* TODO [2013-11-23 Sat] tests for Ac_Form
* TODO Finish hierarchical tests [2014-02-05 Wed]
** TODO Complete basic test cycle: ability to run the tests
   - [ ] Determined and well-specified execution order
   - [ ] Compare probes' reports with nominal values
   - [ ] Reporter, Writer
** TODO Form tests
** TODO Table tests
** TODO SQL tests
* TODO after model changes, the $form->fetchPresentation(true) should return updated data :forms:redesign:bug:
  (at least when $form->updateFromModel() is called)
  - a - pull-based forms
  - b - make 'caching' more intelligent
* TODO Forms and controls should not be descendants of Ac_Controller anymore :forms:redesign:
  Practice had shown that has no sense, burdens a class interface and confuses developer.
** TODO improve forms 					     :forms:redesign:
*** TODO incomfort to use and inflexible templates and wrappers
*** TODO non-clear and hard to understand lifecycle of elements, which should act like full-scaled widgets
*** TODO better way to provide form defaults
*** TODO ability of array-returning controls to write their values into the root of form' value array.
         that will give us ability to create elements which edit several model' properties at once.
*** TODO uniform method to update model from the froms
    Currently where are two concurrent methods: $form->updateModel() and $model->bind($form->getValue())
    In some cases these methods produce different results.
    - [ ] See, how Ac_Admin_Manager does
    - [ ] Always use $form->updateModel()
    - [ ] Make its' behaviour as close to bind() as possible
    - [ ] bind() is almost abandoned, it's better to remove or improve it
** TODO convert Ac_Sql_*, Ac_Form_*, Ac_Table_* to Ac_Prototyped :framework:redesign:incompat:
   - [ ] convert all *var $foo* to get/set, make sure everything is working
   - [ ] throw errors when encountering unknown objects or mis-configuration
*** Tests
** TODO [2013-11-23 Sat] tests for Ac_Table*
** TODO [2013-11-23 Sat] tests for Ac_Sql*
* DONE Get completely rid of Ac_Dispatcher (even for autoloading!!!) // DONE [2014-03-03 Mon]
** DONE Ac_Cg_Frontend: don't use Ac_Form_Helper // DONE [2014-03-03 Mon]
** DONE Remove Ac_Form_Helper, Ac_Form_Util // DONE [2014-03-03 Mon]
* DONE Ac_Mail: better implementation (Avancore 0.3-style), remove ugliness like $useNewMailer [2013-08-27 Tue] :core:feature:
       // DONE [2014-03-03 Mon]
* DONE [2014-02-05 Wed] bring back really used classes from obsolete/, leave there classes which are not used
* DONE [2014-02-05 Wed] Cg_ -> Ac_Cg
* DONE [2014-02-05 Wed] getter setter maker, base64dec tools make part of the project
* TODO [2014-02-05 Wed] Support composite PKs by stock Ac_Model_Mapper and Ac_Model_Object
* TODO [2014-02-05 Wed] Admin: allow to sort table by clicking on headers
** TODO basic solution
** TODO ability to specify own sort expressions
* DONE remove all closing "?>" 	    :framework:style:
* DONE Ac_Sql_Db::getLastError(); add to Ac_Model_Mapper::peSave    :sql:bug:
* DONE Ac_Sql_Db applies limits not through Dialect :sql:bug:
* TODO [2013-11-11 Mon] Get rid of Ac_Model_Collection::getStatementTail(), since not all DBMS have limit clause
** Make E_DEPRECATED, that's all
* TODO [2013-11-11 Mon] Ac_Admin_Manager returnUrl on save()/cancel() :admin:feature:
       Also $returnToReferer  would be nice.
* DONE cloning of Ac_Sql_Select 				:sql:feature:
* TODO decorators' access to the model :model:feature:
* TODO Ac_Widget_Menu [2014-03-12 Wed]				     :widget:feature:
* TODO [2013-10-26 Sat] Joomla output: don't add JS and CSS assets that were already added by the Joomla :js:bug:
* TODO [2013-10-26 Sat] Add "libraries" class to add common JS and CSS frameworks :js:feature:
       The idea is to provide ability to quickly add jQuery, chosen, bootstrap & so on.
       Adapter must serve as factory or as configurator for Libraries' instances to avoid
       conflicts with libraries bundled with the CMS.
* TODO Ac_Form_Control doesn't show errors, when model isChecked() == false (but should?) :model:redesign:
  Should it?
  If application populates model's _errors array from outside, shouldn't _checked altready be set to TRUE?
  How externally-provided errors should merge with model's own errors?
* TODO Ac_Sql_Db, Ac_Sql_Db_PDO: charset (at least default to utf-8) :sql:bug:
* TODO Ac_Model_Values_Records refactor to use Ac_Sql_Select instance generated by Ac_Model_Mapper::getSqlSelectPrototype() :model:feature:
* TODO when trying to receive N-N-linked object, generated code of the model instance produces bugs:model:bug:
  Example: where are relation categories <- NN -> products
  When trying $this->getField('products[0][foo]'), when no 'product' with '0' index is present, the error message 
  is being displayed regarding inability to load related object.
* TODO when trying to get transitional property with index of no-existent object, return NULL instead of displaying an error (see example above) :model:annoyance:
* TODO Ac_Form_Control_Date cannot display "zero date" in required format :forms:bug:
* TODO inability to 'properly' set default order in admin manager really pisses me off :admin:annoyance:
* TODO Better support of "magic" methods in Ac_Prototyped and vice versa (through Ac_I_Accessor?) :base:feature:
* TODO Integrate table, actions, sub-managers and filters into a common form (they must all be controls) :admin:feature:
* WORK SELECT LISTs based on Chosen and/or Select2 	  :forms:feature:hot:
* TODO support of readOnly (getter-only) model properties (which should be understood by other components) :model:feature:
* TODO figure out format of 'property' (getter + setter) docblocks, finally :docs:design:
* TODO PSR-2 code style compliance  			     :global:
* TODO composer support 					     :global:
* TODO uniform terms :framework:redesign:incompat:
  - [ ] title (instead of caption)
  - [ ] id (instead of name)
  - [ ] dataPath instead of fieldName, modelPropertyName, path etc
  - [ ] visible instead of hidden
  - [ ] enabled instead of disabled
  - [ ] writeable instead of readOnly
  - [ ] displayOrder/creationOrder instead of ordering or order
* TODO better specification of 'path' with getters support :base:design:
  - examples:
    - foo[bar.3][baz(true)][quxx]
    - foo->getBar()[3]->getBaz(true)->quux
  - Important! Wrong method or property must throw an excepton; 
    if transitional segment returns not an object or there is an array element missing,
    no exception must be thrown.
    - foo[@bar] - if there is no array key @bar, don't throw an error
* TODO ? rename Ac_Prototyped::factory* to Ac_Prototyped::create* :base:incompat:
* TODO Test generator  	    :framework:feature:major:
  If model & scaffolding is generated, we can automatically create tests (API and HTTP-based) for regular CRUD,
  since that allows to detect common issues. In the future, such tests can be made extensible.
  Also we can generate test datasets.
 * TODO Skeleton generator [2013-08-20 Tue] :framework:feature:hot:
 ** TODO for Joomla component
 ** TODO for Standalone app
 ** TODO commands to pack Avancore + solution into lib/ or into distro
 * TODO Ac_Model_Sql_TableProvider: возможность связывания с таблицами, созданными пользователем :model:feature:
   Мы сделали alias fooAlias, который читает из таблицы Model_Bar, связанной, в свою очередь, с моделью Baz. 
   Нам нужно, чтобы TableProvider смог подключить alias fooAlias[baz] <- желательно, чтобы он сам всё понял, без наших подсказок.
 * DONE Ac_Sql_Db: pseudo-parametrised queries [2013-08-27 Tue] :model:sql:feature:medium:
   $db->query($sql, ...) - regular call as usual ($sql is a string)
   $db->query(array(0 => $sql, 1=> posParam, 'foo' => fooParam)) - if $sql is an array, use parameter substitution.
   %1 - positional parameter, %foo - named parameter, +#foo - DB objects (NameQuote).+ 
   Only  word characters are allowed as identifiers, underscore can't be first character.
	(done [2013-11-07])
 * TODO Complete the test cases for model and Sql 	    :model:sql:tests:
* TODO Automatic injection of dependencies into Application components [2013-08-27 Tue] :base:design:
  Controller, mapper, service object are Application components.
  For example, if a component has method setDb(Ac_Sql_Db $db), then such method should be automatically called
  by Ac_Application instance using value from $this->getDb().
  Questions:
  - how to define the matches between application properties and components' dependencies?
  - what to do with components created by components?
  Контроллер, преобразователь, сервисные объекты являются компонентами Приложения.
* TODO Fully and completely get rid of pulling "defaults" from Ac_Application instance. [2013-08-27 Tue] :framework:redesign:
  Objects such as an Ac_Mail must be configured by creating object. (i.e. during Ac_Application::createMail())
* TODO Pre-made partials of Sql Select and ability to compose Select from them [2013-08-27 Tue] :sql:feature:
  Example: adding "children" or "parents" into nested sets, path column, nesting conditions and so on.
  We need to be able to specify partials' parameters (connected aliases, prefixes of exported aliases and so on)
* TODO Ac_Table_Column: display according to values and valueList meta-properties [2013-08-28 Wed] :admin:feature:medium:
  We need to be able to use one instance of Values for all appropriate records to reduce number of requsts to the DB.
* TODO Usable method do exclude/include all/some sub-mappers in Admin [2013-08-28 Wed] :admin:feature:minor:
* TODO Ac_Db_Mysqli, Ac_Db_Pg, Ac_Db_Ms [2013-09-08 Sun] 	:sql:feature:
* TODO Ac_Sql_Select parameters (*including names of tables and databases*) [2013-09-08 Sun] :sql:feature:medium:
  Если я делаю станадртную форму "параметров", то она должна экранироваться при помощи Ac_Sql_Db::q()
** TODO support of '#foo' => nameQuote in Ac_Sql_Db::preProcessQuery()
* TODO N-N relations must obey model' ID lists (if IDs property is filled-in, it should be used instead of mid-table content) [2013-09-27 Fri] :model:feature:
* TODO [2013-11-12 Tue] Do we need to make Ac_Sql_Filter_Multiple/Ac_Sql_Order_Multiple supporting $foo->getFilter|Order($sub)->bind()? :sql:design:
* TODO [2013-12-06 Fri] Ac_Admin_Manager must save open referencing records when top referenced record is saved
* TODO [2013-12-06 Fri] Clean up interface and implementation of Ac_Model_Mapper
* TODO [2013-12-06 Fri] Ac_Model_Mapper: ability to remap property<->column (?how to deal with SQL? special form of NameQuote, probably?)
* TODO [2013-12-09 Mon] Qualifiers in relation 		:model:feature:major:
  Ability to partially load 'qualified' objects since we *do* know their keys.
** Nice idea to add $defaultQualifier in Mapper to allow other related object know what qualifier to use.
** Usually it's a PK field.
* TODO [2013-12-09 Mon] Ac_Sql_Db::fetch* and Ac_Model_Mapper::load<Foo>: if array is provided instead of $keyColumn, multi-level array is created :sql:feature:minor:
  For Db, if last key of an object is TRUE, we assume records are uniquely qualifid by the keys.
  For mapper, we will check keys for uniqueness by default (trailing TRUE or FALSE can still be provided for override)
* TODO [2013-12-09 Mon] Ac_Sql_Db->debugNext()->query(...), Ac_Sql_Db->args(array)->query(...) :sql:feature:minor:
  Ability to provide extra params for next request (DB instance is returned for chaining)
** args/a: We CANNOT mix positional args, but can mix named ones
   After the request param values are "forgotten". But args() with no arguments allows to "remember" last ones.
   $foo = 10; 
   //...
   $bar = 20;
   //...
   Ac_Sql_Db->args(compact('foo', 'bar'))->query("SELECT :foo, :bar");
   Ac_Sql_Db->args()->query("SELECT :foo, :bar"); // will re-use last args
   //...
** debugNext
   Ac_Sql_Db->debugNext(Ac_Sql_Db::DEBUG_DIE_DONT_RUN)->query("SELECT 'stuff'");
   // also DEBUG_SHOW_RESULT, DEBUG_DIE_AFTER, DEBUG_FIREPHP - bit mask 

   debug: the SQL will always be shown
   DEBUG_DIE_DONT_RUN = 1 //  DEBUG_DIE_AFTER = 2 // request is run, but then we will die()
   DEBUG_SHOW_RESULT = 4 // result will be shown after the request (max. 100 lines)
   DEBUG_FIREPHP = 16 // all info through FirePHP
* TODO [2013-12-14 Sat] Ac_Sql_Select::applyPrototype(), Ac_Sql_Select::getPrototype()
* TODO [2014-02-05 Wed] Codegen: improve model browser
* TODO [2014-02-07 Fri] Ac_Form_Control_Template_Basic: use <labels> in the captions where appropriate
* TODO [2014-02-08 Sat] Re-work Ac_Table_Column_Link (to properly get current URL; now Ac_Url::guess() is used)
* TODO [2014-02-09 Sun] Document all config values used by Ac_Application_Adapter 
